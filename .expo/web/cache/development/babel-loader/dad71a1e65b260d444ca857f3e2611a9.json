{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { remove, xor, isEmpty } from 'lodash';\n\nvar Scheme = function () {\n  function Scheme() {\n    var _this = this;\n\n    _classCallCheck(this, Scheme);\n\n    this.currentScheme = 'default';\n    this.schemes = {\n      light: {},\n      dark: {}\n    };\n    this.changeListeners = [];\n    Appearance.addChangeListener(function () {\n      if (_this.currentScheme === 'default') {\n        _this.broadcastSchemeChange();\n      }\n    });\n  }\n\n  _createClass(Scheme, [{\n    key: \"broadcastSchemeChange\",\n    value: function broadcastSchemeChange() {\n      var _this2 = this;\n\n      this.changeListeners.forEach(function (listener) {\n        return listener(_this2.getSchemeType());\n      });\n    }\n  }, {\n    key: \"getSchemeType\",\n    value: function getSchemeType() {\n      var scheme = this.currentScheme === 'default' ? Appearance.getColorScheme() : this.currentScheme;\n      return scheme != null ? scheme : 'light';\n    }\n  }, {\n    key: \"setScheme\",\n    value: function setScheme(scheme) {\n      var prevSchemeType = this.getSchemeType();\n\n      if (!['light', 'dark', 'default'].includes(scheme)) {\n        throw new Error(scheme + \" is invalid colorScheme, please use 'light' | 'dark' | 'default'\");\n      }\n\n      this.currentScheme = scheme;\n\n      if (prevSchemeType !== this.getSchemeType()) {\n        this.broadcastSchemeChange();\n      }\n    }\n  }, {\n    key: \"loadSchemes\",\n    value: function loadSchemes(schemes) {\n      var lightSchemeKeys = Object.keys(schemes.light);\n      var darkSchemeKeys = Object.keys(schemes.dark);\n      var missingKeys = xor(lightSchemeKeys, darkSchemeKeys);\n\n      if (!isEmpty(missingKeys)) {\n        throw new Error(\"There is a mismatch in scheme keys: \" + missingKeys.join(', '));\n      }\n\n      this.schemes = schemes;\n    }\n  }, {\n    key: \"getScheme\",\n    value: function getScheme() {\n      return this.schemes[this.getSchemeType()];\n    }\n  }, {\n    key: \"addChangeListener\",\n    value: function addChangeListener(listener) {\n      this.changeListeners.push(listener);\n    }\n  }, {\n    key: \"removeChangeListener\",\n    value: function removeChangeListener(listener) {\n      remove(this.changeListeners, function (changeListener) {\n        return changeListener === listener;\n      });\n    }\n  }]);\n\n  return Scheme;\n}();\n\nexport default new Scheme();","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/style/scheme.js"],"names":["remove","xor","isEmpty","Scheme","currentScheme","schemes","light","dark","changeListeners","Appearance","addChangeListener","broadcastSchemeChange","forEach","listener","getSchemeType","scheme","getColorScheme","prevSchemeType","includes","Error","lightSchemeKeys","Object","keys","darkSchemeKeys","missingKeys","join","push","changeListener"],"mappings":";;;AACA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,QAAqC,QAArC;;IAEMC,M;AAQJ,oBAAc;AAAA;;AAAA;;AAAA,SAPdC,aAOc,GAPE,SAOF;AAAA,SANdC,OAMc,GANJ;AACRC,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,IAAI,EAAE;AAFE,KAMI;AAAA,SAFdC,eAEc,GAFI,EAEJ;AACZC,IAAAA,UAAU,CAACC,iBAAX,CAA6B,YAAM;AACjC,UAAI,KAAI,CAACN,aAAL,KAAuB,SAA3B,EAAsC;AACpC,QAAA,KAAI,CAACO,qBAAL;AACD;AACF,KAJD;AAKD;;;;WAED,iCAAwB;AAAA;;AACtB,WAAKH,eAAL,CAAqBI,OAArB,CAA6B,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAAC,MAAI,CAACC,aAAL,EAAD,CAAZ;AAAA,OAArC;AACD;;;WAMD,yBAAgB;AACd,UAAMC,MAAM,GAAG,KAAKX,aAAL,KAAuB,SAAvB,GAAmCK,UAAU,CAACO,cAAX,EAAnC,GAAiE,KAAKZ,aAArF;AACA,aAAOW,MAAP,WAAOA,MAAP,GAAiB,OAAjB;AACD;;;WAQD,mBAAUA,MAAV,EAAkB;AAChB,UAAME,cAAc,GAAG,KAAKH,aAAL,EAAvB;;AAEA,UAAI,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB,SAAlB,EAA6BI,QAA7B,CAAsCH,MAAtC,CAAL,EAAoD;AAClD,cAAM,IAAII,KAAJ,CAAaJ,MAAb,sEAAN;AACD;;AAED,WAAKX,aAAL,GAAqBW,MAArB;;AAEA,UAAIE,cAAc,KAAK,KAAKH,aAAL,EAAvB,EAA6C;AAC3C,aAAKH,qBAAL;AACD;AACF;;;WAQD,qBAAYN,OAAZ,EAAqB;AACnB,UAAMe,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYjB,OAAO,CAACC,KAApB,CAAxB;AACA,UAAMiB,cAAc,GAAGF,MAAM,CAACC,IAAP,CAAYjB,OAAO,CAACE,IAApB,CAAvB;AACA,UAAMiB,WAAW,GAAGvB,GAAG,CAACmB,eAAD,EAAkBG,cAAlB,CAAvB;;AAEA,UAAI,CAACrB,OAAO,CAACsB,WAAD,CAAZ,EAA2B;AACzB,cAAM,IAAIL,KAAJ,0CAAiDK,WAAW,CAACC,IAAZ,CAAiB,IAAjB,CAAjD,CAAN;AACD;;AAED,WAAKpB,OAAL,GAAeA,OAAf;AACD;;;WAMD,qBAAY;AACV,aAAO,KAAKA,OAAL,CAAa,KAAKS,aAAL,EAAb,CAAP;AACD;;;WAMD,2BAAkBD,QAAlB,EAA4B;AAC1B,WAAKL,eAAL,CAAqBkB,IAArB,CAA0Bb,QAA1B;AACD;;;WAQD,8BAAqBA,QAArB,EAA+B;AAC7Bb,MAAAA,MAAM,CAAC,KAAKQ,eAAN,EAAuB,UAAAmB,cAAc;AAAA,eAAIA,cAAc,KAAKd,QAAvB;AAAA,OAArC,CAAN;AACD;;;;;;AAIH,eAAe,IAAIV,MAAJ,EAAf","sourcesContent":["import { Appearance } from 'react-native';\nimport { remove, xor, isEmpty } from 'lodash';\n\nclass Scheme {\n  currentScheme = 'default';\n  schemes = {\n    light: {},\n    dark: {}\n  };\n  changeListeners = [];\n\n  constructor() {\n    Appearance.addChangeListener(() => {\n      if (this.currentScheme === 'default') {\n        this.broadcastSchemeChange();\n      }\n    });\n  }\n\n  broadcastSchemeChange() {\n    this.changeListeners.forEach(listener => listener(this.getSchemeType()));\n  }\n  /**\n   * Get app's current color scheme\n   */\n\n\n  getSchemeType() {\n    const scheme = this.currentScheme === 'default' ? Appearance.getColorScheme() : this.currentScheme;\n    return scheme ?? 'light';\n  }\n  /**\n   * Set color scheme for app\n   * arguments:\n   * scheme - color scheme e.g light/dark/default\n   */\n\n\n  setScheme(scheme) {\n    const prevSchemeType = this.getSchemeType();\n\n    if (!['light', 'dark', 'default'].includes(scheme)) {\n      throw new Error(`${scheme} is invalid colorScheme, please use 'light' | 'dark' | 'default'`);\n    }\n\n    this.currentScheme = scheme;\n\n    if (prevSchemeType !== this.getSchemeType()) {\n      this.broadcastSchemeChange();\n    }\n  }\n  /**\n   * Load set of schemes for light/dark mode\n   * arguments:\n   * schemes - two sets of map of colors e.g {light: {screen: 'white'}, dark: {screen: 'black'}}\n   */\n\n\n  loadSchemes(schemes) {\n    const lightSchemeKeys = Object.keys(schemes.light);\n    const darkSchemeKeys = Object.keys(schemes.dark);\n    const missingKeys = xor(lightSchemeKeys, darkSchemeKeys);\n\n    if (!isEmpty(missingKeys)) {\n      throw new Error(`There is a mismatch in scheme keys: ${missingKeys.join(', ')}`);\n    }\n\n    this.schemes = schemes;\n  }\n  /**\n   * Retrieve scheme by current scheme type\n   */\n\n\n  getScheme() {\n    return this.schemes[this.getSchemeType()];\n  }\n  /**\n   * Add a change scheme event listener\n   */\n\n\n  addChangeListener(listener) {\n    this.changeListeners.push(listener);\n  }\n  /**\n   * Remove a change scheme event listener\n   * arguments:\n   * listener - listener reference to remove\n   */\n\n\n  removeChangeListener(listener) {\n    remove(this.changeListeners, changeListener => changeListener === listener);\n  }\n\n}\n\nexport default new Scheme();"]},"metadata":{},"sourceType":"module"}