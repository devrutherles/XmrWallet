{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _ from 'lodash';\nimport Constants from \"../helpers/Constants\";\nimport TypographyPresets from \"./typographyPresets\";\nexport var Typography = function () {\n  function Typography() {\n    _classCallCheck(this, Typography);\n\n    this.keysPattern = this.generateKeysPattern();\n  }\n\n  _createClass(Typography, [{\n    key: \"loadTypographies\",\n    value: function loadTypographies(typographies) {\n      var _this = this;\n\n      _.forEach(typographies, function (value, key) {\n        _this[key] = value;\n      });\n\n      this.keysPattern = this.generateKeysPattern();\n    }\n  }, {\n    key: \"getKeysPattern\",\n    value: function getKeysPattern() {\n      return this.keysPattern;\n    }\n  }, {\n    key: \"generateKeysPattern\",\n    value: function generateKeysPattern() {\n      return new RegExp(_.chain(this).keys().map(function (key) {\n        return [\"\" + key];\n      }).flatten().join('|').value());\n    }\n  }, {\n    key: \"measureWidth\",\n    value: function measureWidth(text) {\n      var typography,\n          containerWidth,\n          size,\n          _args = arguments;\n      return _regeneratorRuntime.async(function measureWidth$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              typography = _args.length > 1 && _args[1] !== undefined ? _args[1] : TypographyPresets.text70;\n              containerWidth = _args.length > 2 && _args[2] !== undefined ? _args[2] : Constants.screenWidth;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.measureTextSize(text, typography, containerWidth));\n\n            case 4:\n              size = _context.sent;\n\n              if (!size) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", size.width);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"measureTextSize\",\n    value: function measureTextSize(text) {\n      var typography,\n          containerWidth,\n          rnTextSize,\n          size,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function measureTextSize$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              typography = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : TypographyPresets.text70;\n              containerWidth = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : Constants.screenWidth;\n              rnTextSize = require('react-native-text-size').default;\n\n              if (!text) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(rnTextSize.measure(_objectSpread({\n                text: text,\n                width: containerWidth\n              }, typography)));\n\n            case 6:\n              size = _context2.sent;\n              return _context2.abrupt(\"return\", size);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return Typography;\n}();\nvar TypedTypography = Typography;\nvar typography = new TypedTypography();\ntypography.loadTypographies(TypographyPresets);\nexport default typography;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/style/typography.js"],"names":["_","Constants","TypographyPresets","Typography","keysPattern","generateKeysPattern","typographies","forEach","value","key","RegExp","chain","keys","map","flatten","join","text","typography","text70","containerWidth","screenWidth","measureTextSize","size","width","rnTextSize","require","default","measure","TypedTypography","loadTypographies"],"mappings":";;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP;AACA,OAAOC,iBAAP;AACA,WAAaC,UAAb;AAAA;AAAA;;AAAA,SACEC,WADF,GACgB,KAAKC,mBAAL,EADhB;AAAA;;AAAA;AAAA;AAAA,WASE,0BAAiBC,YAAjB,EAA+B;AAAA;;AAC7BN,MAAAA,CAAC,CAACO,OAAF,CAAUD,YAAV,EAAwB,UAACE,KAAD,EAAQC,GAAR,EAAgB;AAEtC,QAAA,KAAI,CAACA,GAAD,CAAJ,GAAYD,KAAZ;AACD,OAHD;;AAKA,WAAKJ,WAAL,GAAmB,KAAKC,mBAAL,EAAnB;AACD;AAhBH;AAAA;AAAA,WAkBE,0BAAiB;AACf,aAAO,KAAKD,WAAZ;AACD;AApBH;AAAA;AAAA,WAsBE,+BAAsB;AACpB,aAAO,IAAIM,MAAJ,CAAWV,CAAC,CAACW,KAAF,CAAQ,IAAR,EAAcC,IAAd,GAAqBC,GAArB,CAAyB,UAAAJ,GAAG;AAAA,eAAI,MAAIA,GAAJ,CAAJ;AAAA,OAA5B,EAA4CK,OAA5C,GAAsDC,IAAtD,CAA2D,GAA3D,EAAgEP,KAAhE,EAAX,CAAP;AACD;AAxBH;AAAA;AAAA,WA2BE,sBAAmBQ,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBC,cAAAA,UAAzB,2DAAsCf,iBAAiB,CAACgB,MAAxD;AAAgEC,cAAAA,cAAhE,2DAAiFlB,SAAS,CAACmB,WAA3F;AAAA;AAAA,+CACqB,KAAKC,eAAL,CAAqBL,IAArB,EAA2BC,UAA3B,EAAuCE,cAAvC,CADrB;;AAAA;AACQG,cAAAA,IADR;;AAAA,mBAGMA,IAHN;AAAA;AAAA;AAAA;;AAAA,+CAIWA,IAAI,CAACC,KAJhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BF;AAAA;AAAA,WAmCE,yBAAsBP,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4BC,cAAAA,UAA5B,8DAAyCf,iBAAiB,CAACgB,MAA3D;AAAmEC,cAAAA,cAAnE,8DAAoFlB,SAAS,CAACmB,WAA9F;AACQI,cAAAA,UADR,GACqBC,OAAO,CAAC,wBAAD,CAAP,CAAkCC,OADvD;;AAAA,mBAGMV,IAHN;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIuBQ,UAAU,CAACG,OAAX;AACjBX,gBAAAA,IAAI,EAAJA,IADiB;AAGjBO,gBAAAA,KAAK,EAAEJ;AAHU,iBAKdF,UALc,EAJvB;;AAAA;AAIUK,cAAAA,IAJV;AAAA,gDAYWA,IAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCF;;AAAA;AAAA;AAoDA,IAAMM,eAAe,GAAGzB,UAAxB;AACA,IAAMc,UAAU,GAAG,IAAIW,eAAJ,EAAnB;AACAX,UAAU,CAACY,gBAAX,CAA4B3B,iBAA5B;AACA,eAAee,UAAf","sourcesContent":["import _ from 'lodash';\nimport Constants from \"../helpers/Constants\";\nimport TypographyPresets from \"./typographyPresets\";\nexport class Typography {\n  keysPattern = this.generateKeysPattern();\n  /**\n   * Load custom set of typographies\n   * arguments:\n   * typographies - map of keys and typography values\n   * e.g {text15: {fontSize: 58, fontWeight: '100', lineHeight: Math.floor(58 * 1.4)}}\n   */\n\n  loadTypographies(typographies) {\n    _.forEach(typographies, (value, key) => {\n      //@ts-ignore\n      this[key] = value;\n    });\n\n    this.keysPattern = this.generateKeysPattern();\n  }\n\n  getKeysPattern() {\n    return this.keysPattern;\n  }\n\n  generateKeysPattern() {\n    return new RegExp(_.chain(this).keys().map(key => [`${key}`]).flatten().join('|').value());\n  } // TODO: deprecate\n\n\n  async measureWidth(text, typography = TypographyPresets.text70, containerWidth = Constants.screenWidth) {\n    const size = await this.measureTextSize(text, typography, containerWidth);\n\n    if (size) {\n      return size.width;\n    }\n  }\n\n  async measureTextSize(text, typography = TypographyPresets.text70, containerWidth = Constants.screenWidth) {\n    const rnTextSize = require('react-native-text-size').default;\n\n    if (text) {\n      const size = await rnTextSize.measure({\n        text,\n        // text to measure, can include symbols\n        width: containerWidth,\n        // max-width of the \"virtual\" container\n        ...typography // RN font specification\n\n      });\n      return size;\n    }\n  }\n\n}\nconst TypedTypography = Typography;\nconst typography = new TypedTypography();\ntypography.loadTypographies(TypographyPresets);\nexport default typography;"]},"metadata":{},"sourceType":"module"}