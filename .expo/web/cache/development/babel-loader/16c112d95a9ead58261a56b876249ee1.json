{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"message\", \"messageStyle\", \"loaderColor\", \"overlay\", \"backgroundColor\", \"customLoader\", \"containerStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Colors, Typography } from \"../../style\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport Text from \"../../components/text\";\nimport { LoaderScreenProps } from \"./types\";\n\nvar LoaderScreen = function (_Component) {\n  _inherits(LoaderScreen, _Component);\n\n  var _super = _createSuper(LoaderScreen);\n\n  function LoaderScreen() {\n    _classCallCheck(this, LoaderScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoaderScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          message = _this$props.message,\n          messageStyle = _this$props.messageStyle,\n          loaderColor = _this$props.loaderColor,\n          overlay = _this$props.overlay,\n          backgroundColor = _this$props.backgroundColor,\n          customLoader = _this$props.customLoader,\n          containerStyle = _this$props.containerStyle,\n          others = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(View, {\n        style: [overlay ? [styles.overlayContainer, {\n          backgroundColor: backgroundColor\n        }] : styles.container, containerStyle]\n      }, React.createElement(View, {\n        flex: true,\n        center: true\n      }, customLoader || React.createElement(ActivityIndicator, _extends({\n        size: 'large',\n        animating: true,\n        color: loaderColor || (Constants.isIOS ? Colors.grey60 : Colors.primary)\n      }, others)), message && React.createElement(Text, {\n        style: [styles.message, messageStyle]\n      }, message)));\n    }\n  }]);\n\n  return LoaderScreen;\n}(Component);\n\nLoaderScreen.displayName = 'LoaderScreen';\nexport { LoaderScreenProps };\nexport default asBaseComponent(LoaderScreen);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: Colors.rgba(Colors.white, 0.85),\n    zIndex: 100\n  }),\n  message: _objectSpread(_objectSpread({}, Typography.text70), {}, {\n    marginTop: 18,\n    color: Colors.grey10\n  })\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/loaderScreen/index.js"],"names":["React","Component","Colors","Typography","Constants","asBaseComponent","View","Text","LoaderScreenProps","LoaderScreen","props","message","messageStyle","loaderColor","overlay","backgroundColor","customLoader","containerStyle","others","styles","overlayContainer","container","isIOS","grey60","primary","displayName","StyleSheet","create","flex","absoluteFillObject","rgba","white","zIndex","text70","marginTop","color","grey10"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,MAAT,EAAiBC,UAAjB;AACA,SAASC,SAAT;AACA,SAASC,eAAT;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,SAASC,iBAAT;;IAEMC,Y;;;;;;;;;;;;;WAGJ,kBAAS;AACP,wBASI,KAAKC,KATT;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UAEEC,YAFF,eAEEA,YAFF;AAAA,UAGEC,WAHF,eAGEA,WAHF;AAAA,UAIEC,OAJF,eAIEA,OAJF;AAAA,UAKEC,eALF,eAKEA,eALF;AAAA,UAMEC,YANF,eAMEA,YANF;AAAA,UAOEC,cAPF,eAOEA,cAPF;AAAA,UAQKC,MARL;;AAUA,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACJ,OAAO,GAAG,CAACK,MAAM,CAACC,gBAAR,EAA0B;AACvDL,UAAAA,eAAe,EAAfA;AADuD,SAA1B,CAAH,GAEvBI,MAAM,CAACE,SAFQ,EAEGJ,cAFH;AAAb,SAGH,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,MAAM;AAAjB,SACGD,YAAY,IAAI,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAE,OAAzB;AAAkC,QAAA,SAAS,MAA3C;AAA4C,QAAA,KAAK,EAAEH,WAAW,KAAKT,SAAS,CAACkB,KAAV,GAAkBpB,MAAM,CAACqB,MAAzB,GAAkCrB,MAAM,CAACsB,OAA9C;AAA9D,SAA0HN,MAA1H,EADnB,EAEGP,OAAO,IAAI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACQ,MAAM,CAACR,OAAR,EAAiBC,YAAjB;AAAb,SAA8CD,OAA9C,CAFd,CAHG,CAAP;AAQD;;;;EAtBwBV,S;;AAArBQ,Y,CACGgB,W,GAAc,c;AAyBvB,SAASjB,iBAAT;AACA,eAAeH,eAAe,CAACI,YAAD,CAA9B;AACA,IAAMU,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BR,EAAAA,gBAAgB,kCAAOM,UAAU,CAACG,kBAAlB;AACdd,IAAAA,eAAe,EAAEb,MAAM,CAAC4B,IAAP,CAAY5B,MAAM,CAAC6B,KAAnB,EAA0B,IAA1B,CADH;AAEdC,IAAAA,MAAM,EAAE;AAFM,IAJe;AAQ/BrB,EAAAA,OAAO,kCAAOR,UAAU,CAAC8B,MAAlB;AACLC,IAAAA,SAAS,EAAE,EADN;AAELC,IAAAA,KAAK,EAAEjC,MAAM,CAACkC;AAFT;AARwB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, ActivityIndicator } from 'react-native';\nimport { Colors, Typography } from \"../../style\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport Text from \"../../components/text\";\nimport { LoaderScreenProps } from \"./types\";\n\nclass LoaderScreen extends Component {\n  static displayName = 'LoaderScreen';\n\n  render() {\n    const {\n      message,\n      messageStyle,\n      loaderColor,\n      overlay,\n      backgroundColor,\n      customLoader,\n      containerStyle,\n      ...others\n    } = this.props;\n    return <View style={[overlay ? [styles.overlayContainer, {\n      backgroundColor\n    }] : styles.container, containerStyle]}>\n        <View flex center>\n          {customLoader || <ActivityIndicator size={'large'} animating color={loaderColor || (Constants.isIOS ? Colors.grey60 : Colors.primary)} {...others} />}\n          {message && <Text style={[styles.message, messageStyle]}>{message}</Text>}\n        </View>\n      </View>;\n  }\n\n}\n\nexport { LoaderScreenProps };\nexport default asBaseComponent(LoaderScreen);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlayContainer: { ...StyleSheet.absoluteFillObject,\n    backgroundColor: Colors.rgba(Colors.white, 0.85),\n    zIndex: 100\n  },\n  message: { ...Typography.text70,\n    marginTop: 18,\n    color: Colors.grey10\n  }\n});"]},"metadata":{},"sourceType":"module"}