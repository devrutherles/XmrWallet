{"ast":null,"code":"import { Colors } from \"../../style\";\nexport var hasInvalidChip = function hasInvalidChip(chips) {\n  return chips.filter(function (chip) {\n    return chip.invalid === true;\n  })[0] !== undefined;\n};\nexport var getValidationBasedColor = function getValidationBasedColor(chips, defaultChip) {\n  var dismissColor = (defaultChip == null ? void 0 : defaultChip.dismissColor) || Colors.red30;\n  return hasInvalidChip(chips) ? dismissColor : Colors.primary;\n};\nexport var getCounterTextColor = function getCounterTextColor(stateChips, props) {\n  var maxLength = props.maxLength;\n\n  if (isDisabled(props)) {\n    return Colors.grey50;\n  }\n\n  return maxLength && stateChips.length >= maxLength ? Colors.red30 : Colors.grey30;\n};\nexport var getCounterText = function getCounterText(count, maxLength) {\n  return Math.min(count, maxLength) + \" / \" + maxLength;\n};\nexport var getChipDismissColor = function getChipDismissColor(chip, isSelected, defaultChipProps) {\n  var dismissColor = (defaultChipProps == null ? void 0 : defaultChipProps.dismissColor) || Colors.white;\n  return !chip.invalid ? dismissColor : isSelected ? Colors.red10 : Colors.red30;\n};\nexport var isDisabled = function isDisabled(props) {\n  var disableTagRemoval = props.disableTagRemoval,\n      editable = props.editable;\n  return disableTagRemoval || editable === false;\n};","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/chipsInput/Presenter.js"],"names":["Colors","hasInvalidChip","chips","filter","chip","invalid","undefined","getValidationBasedColor","defaultChip","dismissColor","red30","primary","getCounterTextColor","stateChips","props","maxLength","isDisabled","grey50","length","grey30","getCounterText","count","Math","min","getChipDismissColor","isSelected","defaultChipProps","white","red10","disableTagRemoval","editable"],"mappings":"AAAA,SAASA,MAAT;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AACrC,SAAOA,KAAK,CAACC,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,OAAL,KAAiB,IAArB;AAAA,GAAjB,EAA4C,CAA5C,MAAmDC,SAA1D;AACD,CAFM;AAGP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACL,KAAD,EAAQM,WAAR,EAAwB;AAC7D,MAAMC,YAAY,GAAG,CAAAD,WAAW,QAAX,YAAAA,WAAW,CAAEC,YAAb,KAA6BT,MAAM,CAACU,KAAzD;AACA,SAAOT,cAAc,CAACC,KAAD,CAAd,GAAwBO,YAAxB,GAAuCT,MAAM,CAACW,OAArD;AACD,CAHM;AAIP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,UAAD,EAAaC,KAAb,EAAuB;AACxD,MACEC,SADF,GAEID,KAFJ,CACEC,SADF;;AAIA,MAAIC,UAAU,CAACF,KAAD,CAAd,EAAuB;AACrB,WAAOd,MAAM,CAACiB,MAAd;AACD;;AAED,SAAOF,SAAS,IAAIF,UAAU,CAACK,MAAX,IAAqBH,SAAlC,GAA8Cf,MAAM,CAACU,KAArD,GAA6DV,MAAM,CAACmB,MAA3E;AACD,CAVM;AAWP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQN,SAAR,EAAsB;AAClD,SAAUO,IAAI,CAACC,GAAL,CAASF,KAAT,EAAgBN,SAAhB,CAAV,WAA0CA,SAA1C;AACD,CAFM;AAGP,OAAO,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACpB,IAAD,EAAOqB,UAAP,EAAmBC,gBAAnB,EAAwC;AACzE,MAAMjB,YAAY,GAAG,CAAAiB,gBAAgB,QAAhB,YAAAA,gBAAgB,CAAEjB,YAAlB,KAAkCT,MAAM,CAAC2B,KAA9D;AACA,SAAO,CAACvB,IAAI,CAACC,OAAN,GAAgBI,YAAhB,GAA+BgB,UAAU,GAAGzB,MAAM,CAAC4B,KAAV,GAAkB5B,MAAM,CAACU,KAAzE;AACD,CAHM;AAIP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAAAF,KAAK,EAAI;AACjC,MACEe,iBADF,GAGIf,KAHJ,CACEe,iBADF;AAAA,MAEEC,QAFF,GAGIhB,KAHJ,CAEEgB,QAFF;AAIA,SAAOD,iBAAiB,IAAIC,QAAQ,KAAK,KAAzC;AACD,CANM","sourcesContent":["import { Colors } from \"../../style\";\nexport const hasInvalidChip = chips => {\n  return chips.filter(chip => chip.invalid === true)[0] !== undefined;\n};\nexport const getValidationBasedColor = (chips, defaultChip) => {\n  const dismissColor = defaultChip?.dismissColor || Colors.red30;\n  return hasInvalidChip(chips) ? dismissColor : Colors.primary;\n};\nexport const getCounterTextColor = (stateChips, props) => {\n  const {\n    maxLength\n  } = props;\n\n  if (isDisabled(props)) {\n    return Colors.grey50;\n  }\n\n  return maxLength && stateChips.length >= maxLength ? Colors.red30 : Colors.grey30;\n};\nexport const getCounterText = (count, maxLength) => {\n  return `${Math.min(count, maxLength)} / ${maxLength}`;\n};\nexport const getChipDismissColor = (chip, isSelected, defaultChipProps) => {\n  const dismissColor = defaultChipProps?.dismissColor || Colors.white;\n  return !chip.invalid ? dismissColor : isSelected ? Colors.red10 : Colors.red30;\n};\nexport const isDisabled = props => {\n  const {\n    disableTagRemoval,\n    editable\n  } = props;\n  return disableTagRemoval || editable === false;\n};"]},"metadata":{},"sourceType":"module"}