{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport _ from 'lodash';\n\nvar useToggleValue = function useToggleValue(initial, second) {\n  var initialValue = useRef(initial).current;\n  var secondValue = useRef(second).current;\n\n  var _useState = useState(initial),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var toggle = function toggle() {\n    if (_.isBoolean(initialValue)) {\n      setValue(!initialValue);\n    } else if (value === initialValue) {\n      setValue(secondValue);\n    } else {\n      setValue(initialValue);\n    }\n  };\n\n  return [value, toggle, setValue];\n};\n\nexport default useToggleValue;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/hooks/useToggleValue/index.js"],"names":["React","useState","useRef","_","useToggleValue","initial","second","initialValue","current","secondValue","value","setValue","toggle","isBoolean"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C,MAAMC,YAAY,GAAGL,MAAM,CAACG,OAAD,CAAN,CAAgBG,OAArC;AACA,MAAMC,WAAW,GAAGP,MAAM,CAACI,MAAD,CAAN,CAAeE,OAAnC;;AACA,kBAA0BP,QAAQ,CAACI,OAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAIT,CAAC,CAACU,SAAF,CAAYN,YAAZ,CAAJ,EAA+B;AAC7BI,MAAAA,QAAQ,CAAC,CAACJ,YAAF,CAAR;AACD,KAFD,MAEO,IAAIG,KAAK,KAAKH,YAAd,EAA4B;AACjCI,MAAAA,QAAQ,CAACF,WAAD,CAAR;AACD,KAFM,MAEA;AACLE,MAAAA,QAAQ,CAACJ,YAAD,CAAR;AACD;AACF,GARD;;AAUA,SAAO,CAACG,KAAD,EAAQE,MAAR,EAAgBD,QAAhB,CAAP;AACD,CAhBD;;AAkBA,eAAeP,cAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport _ from 'lodash';\n\nconst useToggleValue = (initial, second) => {\n  const initialValue = useRef(initial).current;\n  const secondValue = useRef(second).current;\n  const [value, setValue] = useState(initial);\n\n  const toggle = () => {\n    if (_.isBoolean(initialValue)) {\n      setValue(!initialValue);\n    } else if (value === initialValue) {\n      setValue(secondValue);\n    } else {\n      setValue(initialValue);\n    }\n  };\n\n  return [value, toggle, setValue];\n};\n\nexport default useToggleValue;"]},"metadata":{},"sourceType":"module"}