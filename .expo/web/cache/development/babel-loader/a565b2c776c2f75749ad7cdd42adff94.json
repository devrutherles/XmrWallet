{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport _ from 'lodash';\nimport * as Modifiers from \"../../commons/modifiers\";\nimport { Colors, Spacings, Typography } from \"../../style\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\n\nvar GridListItem = function (_Component) {\n  _inherits(GridListItem, _Component);\n\n  var _super = _createSuper(GridListItem);\n\n  function GridListItem() {\n    var _this;\n\n    _classCallCheck(this, GridListItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {};\n\n    _this.onItemPress = function () {\n      _this.props.onPress == null ? void 0 : _this.props.onPress(_this.props);\n    };\n\n    return _this;\n  }\n\n  _createClass(GridListItem, [{\n    key: \"getItemSizeObj\",\n    value: function getItemSizeObj() {\n      var itemSize = this.props.itemSize;\n\n      if (_.isPlainObject(itemSize)) {\n        return itemSize;\n      }\n\n      return {\n        width: itemSize,\n        height: itemSize\n      };\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(_ref) {\n      var text = _ref.text,\n          typography = _ref.typography,\n          color = _ref.color,\n          _ref$numberOfLines = _ref.numberOfLines,\n          numberOfLines = _ref$numberOfLines === void 0 ? 1 : _ref$numberOfLines,\n          style = _ref.style,\n          testID = _ref.testID;\n      var alignToStart = this.props.alignToStart;\n\n      if (text) {\n        return React.createElement(Text, {\n          testID: testID,\n          style: [style, Typography[typography], color && {\n            color: color\n          }, alignToStart && styles.contentAlignedToStart],\n          numberOfLines: numberOfLines\n        }, text);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          testID = _this$props.testID,\n          imageProps = _this$props.imageProps,\n          alignToStart = _this$props.alignToStart,\n          containerStyle = _this$props.containerStyle,\n          containerProps = _this$props.containerProps,\n          renderCustomItem = _this$props.renderCustomItem,\n          children = _this$props.children,\n          title = _this$props.title,\n          titleTypography = _this$props.titleTypography,\n          titleColor = _this$props.titleColor,\n          titleLines = _this$props.titleLines,\n          overlayText = _this$props.overlayText,\n          overlayTextContainerStyle = _this$props.overlayTextContainerStyle,\n          subtitle = _this$props.subtitle,\n          subtitleTypography = _this$props.subtitleTypography,\n          subtitleColor = _this$props.subtitleColor,\n          subtitleLines = _this$props.subtitleLines,\n          description = _this$props.description,\n          descriptionTypography = _this$props.descriptionTypography,\n          descriptionColor = _this$props.descriptionColor,\n          descriptionLines = _this$props.descriptionLines,\n          onPress = _this$props.onPress,\n          renderOverlay = _this$props.renderOverlay;\n\n      var hasPress = _.isFunction(onPress);\n\n      var hasOverlay = _.isFunction(renderOverlay);\n\n      var Container = hasPress ? TouchableOpacity : View;\n\n      var imageStyle = _objectSpread({}, this.getItemSizeObj());\n\n      var width = _.get(imageStyle, 'width');\n\n      var TextContainer = overlayText ? View : React.Fragment;\n      var textContainerStyle = overlayText ? {\n        style: [styles.overlayText, overlayTextContainerStyle]\n      } : null;\n      var imageBorderRadius = imageProps == null ? void 0 : imageProps.borderRadius;\n      return React.createElement(Container, _extends({\n        style: [styles.container, alignToStart && styles.containerAlignedToStart, {\n          width: width\n        }, containerStyle]\n      }, containerProps, {\n        onPress: hasPress ? this.onItemPress : undefined,\n        accessible: renderCustomItem ? true : undefined\n      }, Modifiers.extractAccessibilityProps(this.props)), imageProps && React.createElement(View, {\n        style: [{\n          borderRadius: imageBorderRadius\n        }, imageStyle]\n      }, React.createElement(Image, _extends({}, imageProps, {\n        style: [imageStyle, imageProps == null ? void 0 : imageProps.style]\n      })), children), !_.isNil(renderCustomItem) && React.createElement(View, {\n        style: {\n          width: width\n        }\n      }, renderCustomItem()), hasOverlay && React.createElement(View, {\n        style: [styles.overlay, this.getItemSizeObj()]\n      }, renderOverlay == null ? void 0 : renderOverlay()), React.createElement(TextContainer, textContainerStyle, this.renderContent({\n        testID: testID + \".title\",\n        text: title,\n        typography: titleTypography,\n        color: titleColor,\n        numberOfLines: titleLines,\n        style: styles.title\n      }), this.renderContent({\n        testID: testID + \".subtitle\",\n        text: subtitle,\n        typography: subtitleTypography,\n        color: subtitleColor,\n        numberOfLines: subtitleLines,\n        style: styles.subtitle\n      }), this.renderContent({\n        testID: testID + \".description\",\n        text: description,\n        typography: descriptionTypography,\n        color: descriptionColor,\n        numberOfLines: descriptionLines,\n        style: styles.description\n      })));\n    }\n  }]);\n\n  return GridListItem;\n}(Component);\n\nGridListItem.propTypes = {\n  renderCustomItem: _pt.func,\n  itemSize: _pt.oneOfType([_pt.number, _pt.shape({\n    width: _pt.number,\n    height: _pt.number\n  })]),\n  title: _pt.oneOfType([_pt.string, _pt.element]),\n  titleTypography: _pt.string,\n  titleColor: _pt.string,\n  titleLines: _pt.number,\n  subtitle: _pt.oneOfType([_pt.string, _pt.element]),\n  subtitleTypography: _pt.string,\n  subtitleColor: _pt.string,\n  subtitleLines: _pt.number,\n  description: _pt.oneOfType([_pt.string, _pt.element]),\n  descriptionTypography: _pt.string,\n  descriptionColor: _pt.string,\n  descriptionLines: _pt.number,\n  overlayText: _pt.bool,\n  alignToStart: _pt.bool,\n  renderOverlay: _pt.func,\n  testID: _pt.string\n};\nGridListItem.displayName = 'GridListItem';\nGridListItem.defaultProps = {\n  itemSize: 48\n};\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-start',\n    alignItems: 'center'\n  },\n  containerAlignedToStart: {\n    alignItems: 'flex-start'\n  },\n  title: _objectSpread({\n    marginTop: Spacings.s1,\n    textAlign: 'center'\n  }, Typography.bodySmallBold),\n  subtitle: _objectSpread({\n    textAlign: 'center'\n  }, Typography.subtext),\n  description: _objectSpread(_objectSpread({\n    textAlign: 'center'\n  }, Typography.subtext), {}, {\n    color: Colors.grey30\n  }),\n  contentAlignedToStart: {\n    textAlign: 'left'\n  },\n  overlay: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n  overlayText: {\n    position: 'absolute',\n    bottom: 10,\n    left: 10\n  }\n});\nexport default GridListItem;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/gridListItem/index.js"],"names":["_pt","React","Component","_","Modifiers","Colors","Spacings","Typography","View","Text","TouchableOpacity","Image","GridListItem","state","onItemPress","props","onPress","itemSize","isPlainObject","width","height","text","typography","color","numberOfLines","style","testID","alignToStart","styles","contentAlignedToStart","imageProps","containerStyle","containerProps","renderCustomItem","children","title","titleTypography","titleColor","titleLines","overlayText","overlayTextContainerStyle","subtitle","subtitleTypography","subtitleColor","subtitleLines","description","descriptionTypography","descriptionColor","descriptionLines","renderOverlay","hasPress","isFunction","hasOverlay","Container","imageStyle","getItemSizeObj","get","TextContainer","Fragment","textContainerStyle","imageBorderRadius","borderRadius","container","containerAlignedToStart","undefined","extractAccessibilityProps","isNil","overlay","renderContent","propTypes","func","oneOfType","number","shape","string","element","bool","displayName","defaultProps","StyleSheet","create","alignSelf","alignItems","marginTop","s1","textAlign","bodySmallBold","subtext","grey30","position","left","top","bottom"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport { StyleSheet } from 'react-native';\nimport _ from 'lodash';\nimport * as Modifiers from \"../../commons/modifiers\";\nimport { Colors, Spacings, Typography } from \"../../style\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\n\n/**\n * @description: A single grid view/list item component\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx\n */\nclass GridListItem extends Component {\n  static propTypes = {\n    /**\n       * Custom GridListItem to be rendered in the GridView\n       */\n    renderCustomItem: _pt.func,\n\n    /**\n       * The item size\n       */\n    itemSize: _pt.oneOfType([_pt.number, _pt.shape({\n      width: _pt.number,\n      height: _pt.number\n    })]),\n\n    /**\n       * Title content text\n       */\n    title: _pt.oneOfType([_pt.string, _pt.element]),\n\n    /**\n       * Title content typography\n       */\n    titleTypography: _pt.string,\n\n    /**\n       * Title content color\n       */\n    titleColor: _pt.string,\n\n    /**\n       * Title content number of lines\n       */\n    titleLines: _pt.number,\n\n    /**\n       * Subtitle content text\n       */\n    subtitle: _pt.oneOfType([_pt.string, _pt.element]),\n\n    /**\n       * Subtitle content typography\n       */\n    subtitleTypography: _pt.string,\n\n    /**\n       * Subtitle content color\n       */\n    subtitleColor: _pt.string,\n\n    /**\n       * Subtitle content number of lines\n       */\n    subtitleLines: _pt.number,\n\n    /**\n       * Description content text\n       */\n    description: _pt.oneOfType([_pt.string, _pt.element]),\n\n    /**\n       * Description content typography\n       */\n    descriptionTypography: _pt.string,\n\n    /**\n       * Description content color\n       */\n    descriptionColor: _pt.string,\n\n    /**\n       * Description content number of lines\n       */\n    descriptionLines: _pt.number,\n\n    /**\n       * Renders the title, subtitle and description inside the item\n       */\n    overlayText: _pt.bool,\n\n    /**\n       * Should content be align to start (default is center)\n       */\n    alignToStart: _pt.bool,\n\n    /**\n       * Renders an overlay on top of the image\n       */\n    renderOverlay: _pt.func,\n\n    /**\n       * Test ID for component\n       */\n    testID: _pt.string\n  };\n  static displayName = 'GridListItem';\n  static defaultProps = {\n    itemSize: 48\n  };\n  state = {};\n  onItemPress = () => {\n    this.props.onPress?.(this.props);\n  };\n\n  getItemSizeObj() {\n    const {\n      itemSize\n    } = this.props;\n\n    if (_.isPlainObject(itemSize)) {\n      return itemSize;\n    }\n\n    return {\n      width: itemSize,\n      height: itemSize\n    };\n  }\n\n  renderContent({\n    text,\n    typography,\n    color,\n    numberOfLines = 1,\n    style,\n    testID\n  }) {\n    const {\n      alignToStart\n    } = this.props;\n\n    if (text) {\n      return <Text testID={testID} // @ts-ignore\n      style={[style, Typography[typography], color && {\n        color\n      }, alignToStart && styles.contentAlignedToStart]} numberOfLines={numberOfLines}>\n          {text}\n        </Text>;\n    }\n  }\n\n  render() {\n    const {\n      testID,\n      imageProps,\n      alignToStart,\n      containerStyle,\n      containerProps,\n      renderCustomItem,\n      children,\n      title,\n      titleTypography,\n      titleColor,\n      titleLines,\n      overlayText,\n      overlayTextContainerStyle,\n      subtitle,\n      subtitleTypography,\n      subtitleColor,\n      subtitleLines,\n      description,\n      descriptionTypography,\n      descriptionColor,\n      descriptionLines,\n      onPress,\n      renderOverlay\n    } = this.props;\n\n    const hasPress = _.isFunction(onPress);\n\n    const hasOverlay = _.isFunction(renderOverlay);\n\n    const Container = hasPress ? TouchableOpacity : View;\n    const imageStyle = { ...this.getItemSizeObj()\n    };\n\n    const width = _.get(imageStyle, 'width');\n\n    const TextContainer = overlayText ? View : React.Fragment;\n    const textContainerStyle = overlayText ? {\n      style: [styles.overlayText, overlayTextContainerStyle]\n    } : null;\n    const imageBorderRadius = imageProps?.borderRadius;\n    return <Container style={[styles.container, alignToStart && styles.containerAlignedToStart, {\n      width\n    }, containerStyle]} {...containerProps} onPress={hasPress ? this.onItemPress : undefined} accessible={renderCustomItem ? true : undefined} {...Modifiers.extractAccessibilityProps(this.props)}>\n        {imageProps && <View style={[{\n        borderRadius: imageBorderRadius\n      }, imageStyle]}>\n            <Image {...imageProps} style={[imageStyle, imageProps?.style]} />\n            {children}\n          </View>}\n        {!_.isNil(renderCustomItem) && <View style={{\n        width\n      }}>{renderCustomItem()}</View>}\n        {hasOverlay && <View style={[styles.overlay, this.getItemSizeObj()]}>{renderOverlay?.()}</View>}\n        <TextContainer {...textContainerStyle}>\n          {this.renderContent({\n          testID: `${testID}.title`,\n          text: title,\n          typography: titleTypography,\n          color: titleColor,\n          numberOfLines: titleLines,\n          style: styles.title\n        })}\n          {this.renderContent({\n          testID: `${testID}.subtitle`,\n          text: subtitle,\n          typography: subtitleTypography,\n          color: subtitleColor,\n          numberOfLines: subtitleLines,\n          style: styles.subtitle\n        })}\n          {this.renderContent({\n          testID: `${testID}.description`,\n          text: description,\n          typography: descriptionTypography,\n          color: descriptionColor,\n          numberOfLines: descriptionLines,\n          style: styles.description\n        })}\n        </TextContainer>\n      </Container>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-start',\n    alignItems: 'center'\n  },\n  containerAlignedToStart: {\n    alignItems: 'flex-start'\n  },\n  title: {\n    marginTop: Spacings.s1,\n    textAlign: 'center',\n    ...Typography.bodySmallBold\n  },\n  subtitle: {\n    textAlign: 'center',\n    ...Typography.subtext\n  },\n  description: {\n    textAlign: 'center',\n    ...Typography.subtext,\n    color: Colors.grey30\n  },\n  contentAlignedToStart: {\n    textAlign: 'left'\n  },\n  overlay: {\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n  overlayText: {\n    position: 'absolute',\n    bottom: 10,\n    left: 10\n  }\n});\nexport default GridListItem;"]},"metadata":{},"sourceType":"module"}