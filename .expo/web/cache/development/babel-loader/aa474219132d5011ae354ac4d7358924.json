{"ast":null,"code":"import _pt from \"prop-types\";\nimport React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { Colors, Spacings, Typography } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nvar Segment = React.memo(function (props) {\n  var _props$activeColor = props.activeColor,\n      activeColor = _props$activeColor === void 0 ? Colors.primary : _props$activeColor,\n      label = props.label,\n      iconSource = props.iconSource,\n      iconStyle = props.iconStyle,\n      selectedIndex = props.selectedIndex,\n      onLayout = props.onLayout,\n      onPress = props.onPress,\n      inactiveColor = props.inactiveColor,\n      index = props.index,\n      iconOnRight = props.iconOnRight,\n      testID = props.testID;\n  var animatedTextStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      var color = (selectedIndex == null ? void 0 : selectedIndex.value) === index ? activeColor : inactiveColor;\n      return {\n        color: color\n      };\n    };\n\n    _f._closure = {\n      selectedIndex,\n      index,\n      activeColor,\n      inactiveColor\n    };\n    _f.asString = \"function _f(){const{selectedIndex,index,activeColor,inactiveColor}=jsThis._closure;{var color=(selectedIndex==null?void 0:selectedIndex.value)===index?activeColor:inactiveColor;return{color:color};}}\";\n    _f.__workletHash = 11802761808617;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\segmentedControl\\\\segment.js (25:45)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var animatedIconStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      var tintColor = (selectedIndex == null ? void 0 : selectedIndex.value) === index ? activeColor : inactiveColor;\n      return {\n        tintColor: tintColor\n      };\n    };\n\n    _f._closure = {\n      selectedIndex,\n      index,\n      activeColor,\n      inactiveColor\n    };\n    _f.asString = \"function _f(){const{selectedIndex,index,activeColor,inactiveColor}=jsThis._closure;{var tintColor=(selectedIndex==null?void 0:selectedIndex.value)===index?activeColor:inactiveColor;return{tintColor:tintColor};}}\";\n    _f.__workletHash = 2612158873134;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\segmentedControl\\\\segment.js (31:45)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var segmentStyle = useMemo(function () {\n    return {\n      paddingHorizontal: Spacings.s3,\n      paddingVertical: Spacings.s2\n    };\n  }, []);\n  var renderIcon = useCallback(function () {\n    return iconSource && React.createElement(Reanimated.Image, {\n      source: iconSource,\n      style: [animatedIconStyle, iconStyle]\n    });\n  }, [iconSource, iconStyle]);\n  var onSegmentPress = useCallback(function () {\n    (selectedIndex == null ? void 0 : selectedIndex.value) !== index && (onPress == null ? void 0 : onPress(index));\n  }, [index, onPress]);\n  var segmentOnLayout = useCallback(function (event) {\n    onLayout == null ? void 0 : onLayout(index, event);\n  }, [onLayout, index]);\n  return React.createElement(TouchableOpacity, {\n    onLayout: segmentOnLayout,\n    style: segmentStyle,\n    onPress: onSegmentPress,\n    row: true,\n    flexG: true,\n    center: true,\n    testID: testID + \".\" + index\n  }, !iconOnRight && renderIcon(), label && React.createElement(Reanimated.Text, {\n    numberOfLines: 1,\n    style: [animatedTextStyle, Typography.text90]\n  }, label), iconOnRight && renderIcon());\n});\nSegment.propTypes = {\n  label: _pt.string,\n  iconOnRight: _pt.bool,\n  activeColor: _pt.string,\n  inactiveColor: _pt.string,\n  onPress: _pt.func,\n  index: _pt.number.isRequired,\n  onLayout: _pt.func,\n  testID: _pt.string\n};\nexport default asBaseComponent(Segment);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/segmentedControl/segment.js"],"names":["_pt","React","useCallback","useMemo","Reanimated","useAnimatedStyle","Colors","Spacings","Typography","asBaseComponent","TouchableOpacity","Segment","memo","props","activeColor","primary","label","iconSource","iconStyle","selectedIndex","onLayout","onPress","inactiveColor","index","iconOnRight","testID","animatedTextStyle","color","value","animatedIconStyle","tintColor","segmentStyle","paddingHorizontal","s3","paddingVertical","s2","renderIcon","onSegmentPress","segmentOnLayout","event","text90","propTypes","string","bool","func","number","isRequired"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { Colors, Spacings, Typography } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\n\n/**\n * Segment sub-component for SegmentedControl component\n */\nconst Segment = React.memo(props => {\n  const {\n    activeColor = Colors.primary,\n    label,\n    iconSource,\n    iconStyle,\n    selectedIndex,\n    onLayout,\n    onPress,\n    inactiveColor,\n    index,\n    iconOnRight,\n    testID\n  } = props;\n  const animatedTextStyle = useAnimatedStyle(() => {\n    const color = selectedIndex?.value === index ? activeColor : inactiveColor;\n    return {\n      color\n    };\n  });\n  const animatedIconStyle = useAnimatedStyle(() => {\n    const tintColor = selectedIndex?.value === index ? activeColor : inactiveColor;\n    return {\n      tintColor\n    };\n  });\n  const segmentStyle = useMemo(() => ({\n    paddingHorizontal: Spacings.s3,\n    paddingVertical: Spacings.s2\n  }), []);\n  const renderIcon = useCallback(() => {\n    return iconSource && <Reanimated.Image source={iconSource} style={[animatedIconStyle, iconStyle]} />; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [iconSource, iconStyle]);\n  const onSegmentPress = useCallback(() => {\n    selectedIndex?.value !== index && onPress?.(index); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [index, onPress]);\n  const segmentOnLayout = useCallback(event => {\n    onLayout?.(index, event);\n  }, [onLayout, index]);\n  return <TouchableOpacity onLayout={segmentOnLayout} style={segmentStyle} onPress={onSegmentPress} row flexG center testID={`${testID}.${index}`}>\n      {!iconOnRight && renderIcon()}\n      {label && <Reanimated.Text numberOfLines={1} style={[animatedTextStyle, Typography.text90]}>\n          {label}\n        </Reanimated.Text>}\n      {iconOnRight && renderIcon()}\n    </TouchableOpacity>;\n});\nSegment.propTypes = {\n  /**\n     * The label of the segment.\n     */\n  label: _pt.string,\n\n  /**\n     * Should the icon be on right of the label\n     */\n  iconOnRight: _pt.bool,\n\n  /**\n     * The color of the active segment (label and outline).\n     */\n  activeColor: _pt.string,\n\n  /**\n     * The color of the inactive segment (label).\n     */\n  inactiveColor: _pt.string,\n\n  /**\n     * Callback for when segment has pressed.\n     */\n  onPress: _pt.func,\n\n  /**\n     * The index of the segment.\n     */\n  index: _pt.number.isRequired,\n\n  /**\n     * onLayout function.\n     */\n  onLayout: _pt.func,\n  testID: _pt.string\n};\nexport default asBaseComponent(Segment);"]},"metadata":{},"sourceType":"module"}