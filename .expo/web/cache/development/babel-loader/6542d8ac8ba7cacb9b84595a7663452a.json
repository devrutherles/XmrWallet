{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { Constants } from \"../../helpers\";\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport Badge from \"../badge\";\nvar INDICATOR_HEIGHT = 2;\nvar INDICATOR_BG_COLOR = Colors.primary;\nvar HORIZONTAL_PADDING = Constants.isTablet ? Spacings.s7 : Spacings.s5;\n\nvar TabBarItem = function (_PureComponent) {\n  _inherits(TabBarItem, _PureComponent);\n\n  var _super = _createSuper(TabBarItem);\n\n  function TabBarItem(props) {\n    var _this;\n\n    _classCallCheck(this, TabBarItem);\n\n    _this = _super.call(this, props);\n\n    _this.onAnimateCompleted = function () {\n      _this.setState({\n        selected: _this.props.selected\n      });\n    };\n\n    _this.onLayout = function (event) {\n      _this.layout = event.nativeEvent.layout;\n    };\n\n    _this.state = {\n      indicatorOpacity: props.selected ? new Animated.Value(1) : new Animated.Value(0),\n      selected: props.selected\n    };\n    return _this;\n  }\n\n  _createClass(TabBarItem, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selected !== this.props.selected) {\n        this.animate(this.props.selected);\n      }\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(newValue) {\n      Animated.timing(this.state.indicatorOpacity, {\n        toValue: newValue ? 1 : 0,\n        easing: Easing.ease,\n        duration: 150,\n        useNativeDriver: true\n      }).start(this.onAnimateCompleted);\n    }\n  }, {\n    key: \"getFlattenStyle\",\n    value: function getFlattenStyle(style) {\n      return StyleSheet.flatten(style);\n    }\n  }, {\n    key: \"getStylePropValue\",\n    value: function getStylePropValue(flattenStyle, propName) {\n      var prop;\n\n      if (flattenStyle) {\n        var propObject = _.pick(flattenStyle, [propName]);\n\n        prop = propObject[propName];\n      }\n\n      return prop;\n    }\n  }, {\n    key: \"getColorFromStyle\",\n    value: function getColorFromStyle(style) {\n      var flattenStyle = this.getFlattenStyle(style);\n      return this.getStylePropValue(flattenStyle, 'color');\n    }\n  }, {\n    key: \"getLayout\",\n    value: function getLayout() {\n      return this.layout;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          indicatorOpacity = _this$state.indicatorOpacity,\n          selected = _this$state.selected;\n      var _this$props = this.props,\n          children = _this$props.children,\n          indicatorStyle = _this$props.indicatorStyle,\n          icon = _this$props.icon,\n          iconColor = _this$props.iconColor,\n          iconSelectedColor = _this$props.iconSelectedColor,\n          label = _this$props.label,\n          labelStyle = _this$props.labelStyle,\n          badgeProps = _this$props.badgeProps,\n          leadingAccessory = _this$props.leadingAccessory,\n          trailingAccessory = _this$props.trailingAccessory,\n          uppercase = _this$props.uppercase,\n          maxLines = _this$props.maxLines,\n          selectedLabelStyle = _this$props.selectedLabelStyle,\n          showDivider = _this$props.showDivider,\n          width = _this$props.width,\n          onPress = _this$props.onPress,\n          activeBackgroundColor = _this$props.activeBackgroundColor,\n          backgroundColor = _this$props.backgroundColor,\n          testID = _this$props.testID,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          style = _this$props.style;\n      var iconTint = iconColor || this.getColorFromStyle(labelStyle) || this.getColorFromStyle(styles.label);\n      var iconSelectedTint = iconSelectedColor || this.getColorFromStyle(selectedLabelStyle) || this.getColorFromStyle(styles.selectedLabel);\n\n      var badgeSize = _.get(badgeProps, 'size', 16);\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: onPress,\n        style: [width ? {\n          width: width\n        } : {\n          flex: 1\n        }, style],\n        testID: testID,\n        backgroundColor: backgroundColor,\n        activeBackgroundColor: activeBackgroundColor,\n        onLayout: this.onLayout,\n        accessibilityState: selected ? {\n          selected: true\n        } : undefined,\n        accessibilityRole: 'tab',\n        accessibilityLabel: accessibilityLabel\n      }, React.createElement(View, {\n        row: true,\n        flex: true,\n        center: true,\n        style: [showDivider && styles.divider, styles.contentContainer]\n      }, leadingAccessory, icon && React.createElement(Image, {\n        style: !_.isEmpty(label) && styles.icon,\n        source: icon,\n        tintColor: selected ? iconSelectedTint : iconTint\n      }), !_.isEmpty(label) && React.createElement(Text, {\n        numberOfLines: maxLines,\n        uppercase: uppercase,\n        style: [labelStyle || styles.label, selected && (selectedLabelStyle || styles.selectedLabel)]\n      }, label), children, !_.isNil(badgeProps) && React.createElement(Badge, _extends({\n        backgroundColor: Colors.red30\n      }, badgeProps, {\n        size: badgeSize,\n        containerStyle: [styles.badge, badgeProps.containerStyle]\n      })), trailingAccessory), React.createElement(Animated.View, {\n        style: [{\n          opacity: indicatorOpacity\n        }, styles.indicator, indicatorStyle]\n      }));\n    }\n  }]);\n\n  return TabBarItem;\n}(PureComponent);\n\nTabBarItem.propTypes = {\n  icon: _pt.number,\n  iconColor: _pt.string,\n  iconSelectedColor: _pt.string,\n  label: _pt.string,\n  leadingAccessory: _pt.element,\n  trailingAccessory: _pt.element,\n  maxLines: _pt.number,\n  selected: _pt.bool,\n  showDivider: _pt.bool,\n  width: _pt.number,\n  backgroundColor: _pt.string,\n  ignore: _pt.bool,\n  onPress: _pt.func,\n  uppercase: _pt.bool,\n  activeBackgroundColor: _pt.string,\n  accessibilityLabel: _pt.string,\n  testID: _pt.string\n};\nTabBarItem.displayName = 'TabBar.Item';\nTabBarItem.defaultProps = {\n  maxLines: 1\n};\nexport default asBaseComponent(TabBarItem);\nvar styles = StyleSheet.create({\n  contentContainer: {\n    paddingHorizontal: HORIZONTAL_PADDING\n  },\n  label: _objectSpread({\n    color: Colors.primary\n  }, Typography.text80),\n  selectedLabel: _objectSpread(_objectSpread({\n    color: Colors.primary\n  }, Typography.text80), {}, {\n    fontWeight: 'bold'\n  }),\n  divider: {\n    borderRightWidth: 1,\n    borderRightColor: Colors.grey70,\n    marginVertical: 14\n  },\n  indicator: {\n    backgroundColor: INDICATOR_BG_COLOR,\n    height: INDICATOR_HEIGHT,\n    marginHorizontal: HORIZONTAL_PADDING\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  },\n  icon: {\n    marginRight: 6\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/tabBar/TabBarItem.js"],"names":["_pt","_","React","PureComponent","Constants","Colors","Typography","Spacings","asBaseComponent","View","TouchableOpacity","Text","Image","Badge","INDICATOR_HEIGHT","INDICATOR_BG_COLOR","primary","HORIZONTAL_PADDING","isTablet","s7","s5","TabBarItem","props","onAnimateCompleted","setState","selected","onLayout","event","layout","nativeEvent","state","indicatorOpacity","Animated","Value","prevProps","animate","newValue","timing","toValue","easing","Easing","ease","duration","useNativeDriver","start","style","StyleSheet","flatten","flattenStyle","propName","prop","propObject","pick","getFlattenStyle","getStylePropValue","children","indicatorStyle","icon","iconColor","iconSelectedColor","label","labelStyle","badgeProps","leadingAccessory","trailingAccessory","uppercase","maxLines","selectedLabelStyle","showDivider","width","onPress","activeBackgroundColor","backgroundColor","testID","accessibilityLabel","iconTint","getColorFromStyle","styles","iconSelectedTint","selectedLabel","badgeSize","get","flex","undefined","divider","contentContainer","isEmpty","isNil","red30","badge","containerStyle","opacity","indicator","propTypes","number","string","element","bool","ignore","func","displayName","defaultProps","create","paddingHorizontal","color","text80","fontWeight","borderRightWidth","borderRightColor","grey70","marginVertical","height","marginHorizontal","marginLeft","s1","marginRight"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;;;AAEA,SAASC,SAAT;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,QAA7B;AACA,SAASC,eAAT;AACA,OAAOC,IAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,KAAP;AACA,IAAMC,gBAAgB,GAAG,CAAzB;AACA,IAAMC,kBAAkB,GAAGV,MAAM,CAACW,OAAlC;AACA,IAAMC,kBAAkB,GAAGb,SAAS,CAACc,QAAV,GAAqBX,QAAQ,CAACY,EAA9B,GAAmCZ,QAAQ,CAACa,EAAvE;;IAQMC,U;;;;;AAoFJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAuBnBC,kBAvBmB,GAuBE,YAAM;AACzB,YAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAE,MAAKH,KAAL,CAAWG;AADT,OAAd;AAGD,KA3BkB;;AAAA,UAsDnBC,QAtDmB,GAsDR,UAAAC,KAAK,EAAI;AAClB,YAAKC,MAAL,GAAcD,KAAK,CAACE,WAAN,CAAkBD,MAAhC;AACD,KAxDkB;;AAEjB,UAAKE,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAET,KAAK,CAACG,QAAN,GAAiB,IAAIO,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAjB,GAAyC,IAAID,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CADhD;AAEXR,MAAAA,QAAQ,EAAEH,KAAK,CAACG;AAFL,KAAb;AAFiB;AAMlB;;;;WAED,4BAAmBS,SAAnB,EAA8B;AAC5B,UAAIA,SAAS,CAACT,QAAV,KAAuB,KAAKH,KAAL,CAAWG,QAAtC,EAAgD;AAC9C,aAAKU,OAAL,CAAa,KAAKb,KAAL,CAAWG,QAAxB;AACD;AACF;;;WAED,iBAAQW,QAAR,EAAkB;AAChBJ,MAAAA,QAAQ,CAACK,MAAT,CAAgB,KAAKP,KAAL,CAAWC,gBAA3B,EAA6C;AAC3CO,QAAAA,OAAO,EAAEF,QAAQ,GAAG,CAAH,GAAO,CADmB;AAE3CG,QAAAA,MAAM,EAAEC,MAAM,CAACC,IAF4B;AAG3CC,QAAAA,QAAQ,EAAE,GAHiC;AAI3CC,QAAAA,eAAe,EAAE;AAJ0B,OAA7C,EAKGC,KALH,CAKS,KAAKrB,kBALd;AAMD;;;WAQD,yBAAgBsB,KAAhB,EAAuB;AACrB,aAAOC,UAAU,CAACC,OAAX,CAAmBF,KAAnB,CAAP;AACD;;;WAED,2BAAkBG,YAAlB,EAAgCC,QAAhC,EAA0C;AACxC,UAAIC,IAAJ;;AAEA,UAAIF,YAAJ,EAAkB;AAChB,YAAMG,UAAU,GAAGlD,CAAC,CAACmD,IAAF,CAAOJ,YAAP,EAAqB,CAACC,QAAD,CAArB,CAAnB;;AAEAC,QAAAA,IAAI,GAAGC,UAAU,CAACF,QAAD,CAAjB;AACD;;AAED,aAAOC,IAAP;AACD;;;WAED,2BAAkBL,KAAlB,EAAyB;AACvB,UAAMG,YAAY,GAAG,KAAKK,eAAL,CAAqBR,KAArB,CAArB;AACA,aAAO,KAAKS,iBAAL,CAAuBN,YAAvB,EAAqC,OAArC,CAAP;AACD;;;WAED,qBAAY;AACV,aAAO,KAAKpB,MAAZ;AACD;;;WAMD,kBAAS;AACP,wBAGI,KAAKE,KAHT;AAAA,UACEC,gBADF,eACEA,gBADF;AAAA,UAEEN,QAFF,eAEEA,QAFF;AAIA,wBAsBI,KAAKH,KAtBT;AAAA,UACEiC,QADF,eACEA,QADF;AAAA,UAEEC,cAFF,eAEEA,cAFF;AAAA,UAGEC,IAHF,eAGEA,IAHF;AAAA,UAIEC,SAJF,eAIEA,SAJF;AAAA,UAKEC,iBALF,eAKEA,iBALF;AAAA,UAMEC,KANF,eAMEA,KANF;AAAA,UAOEC,UAPF,eAOEA,UAPF;AAAA,UAQEC,UARF,eAQEA,UARF;AAAA,UASEC,gBATF,eASEA,gBATF;AAAA,UAUEC,iBAVF,eAUEA,iBAVF;AAAA,UAWEC,SAXF,eAWEA,SAXF;AAAA,UAYEC,QAZF,eAYEA,QAZF;AAAA,UAaEC,kBAbF,eAaEA,kBAbF;AAAA,UAcEC,WAdF,eAcEA,WAdF;AAAA,UAeEC,KAfF,eAeEA,KAfF;AAAA,UAgBEC,OAhBF,eAgBEA,OAhBF;AAAA,UAiBEC,qBAjBF,eAiBEA,qBAjBF;AAAA,UAkBEC,eAlBF,eAkBEA,eAlBF;AAAA,UAmBEC,MAnBF,eAmBEA,MAnBF;AAAA,UAoBEC,kBApBF,eAoBEA,kBApBF;AAAA,UAqBE7B,KArBF,eAqBEA,KArBF;AAuBA,UAAM8B,QAAQ,GAAGjB,SAAS,IAAI,KAAKkB,iBAAL,CAAuBf,UAAvB,CAAb,IAAmD,KAAKe,iBAAL,CAAuBC,MAAM,CAACjB,KAA9B,CAApE;AACA,UAAMkB,gBAAgB,GAAGnB,iBAAiB,IAAI,KAAKiB,iBAAL,CAAuBT,kBAAvB,CAArB,IAAmE,KAAKS,iBAAL,CAAuBC,MAAM,CAACE,aAA9B,CAA5F;;AAEA,UAAMC,SAAS,GAAG/E,CAAC,CAACgF,GAAF,CAAMnB,UAAN,EAAkB,MAAlB,EAA0B,EAA1B,CAAlB;;AAEA,aAAO,oBAAC,gBAAD;AAAkB,QAAA,aAAa,EAAE,CAAjC;AAAoC,QAAA,OAAO,EAAEQ,OAA7C;AAAsD,QAAA,KAAK,EAAE,CAACD,KAAK,GAAG;AAC3EA,UAAAA,KAAK,EAALA;AAD2E,SAAH,GAEtE;AACFa,UAAAA,IAAI,EAAE;AADJ,SAFgE,EAIjErC,KAJiE,CAA7D;AAII,QAAA,MAAM,EAAE4B,MAJZ;AAIoB,QAAA,eAAe,EAAED,eAJrC;AAIsD,QAAA,qBAAqB,EAAED,qBAJ7E;AAIoG,QAAA,QAAQ,EAAE,KAAK7C,QAJnH;AAI6H,QAAA,kBAAkB,EAAED,QAAQ,GAAG;AACjKA,UAAAA,QAAQ,EAAE;AADuJ,SAAH,GAE5J0D,SANG;AAMQ,QAAA,iBAAiB,EAAE,KAN3B;AAMkC,QAAA,kBAAkB,EAAET;AANtD,SAOH,oBAAC,IAAD;AAAM,QAAA,GAAG,MAAT;AAAU,QAAA,IAAI,MAAd;AAAe,QAAA,MAAM,MAArB;AAAsB,QAAA,KAAK,EAAE,CAACN,WAAW,IAAIS,MAAM,CAACO,OAAvB,EAAgCP,MAAM,CAACQ,gBAAvC;AAA7B,SACGtB,gBADH,EAEGN,IAAI,IAAI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,CAACxD,CAAC,CAACqF,OAAF,CAAU1B,KAAV,CAAD,IAAqBiB,MAAM,CAACpB,IAA1C;AAAgD,QAAA,MAAM,EAAEA,IAAxD;AAA8D,QAAA,SAAS,EAAEhC,QAAQ,GAAGqD,gBAAH,GAAsBH;AAAvG,QAFX,EAGG,CAAC1E,CAAC,CAACqF,OAAF,CAAU1B,KAAV,CAAD,IAAqB,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAEM,QAArB;AAA+B,QAAA,SAAS,EAAED,SAA1C;AAAqD,QAAA,KAAK,EAAE,CAACJ,UAAU,IAAIgB,MAAM,CAACjB,KAAtB,EAA6BnC,QAAQ,KAAK0C,kBAAkB,IAAIU,MAAM,CAACE,aAAlC,CAArC;AAA5D,SACjBnB,KADiB,CAHxB,EAMGL,QANH,EAOG,CAACtD,CAAC,CAACsF,KAAF,CAAQzB,UAAR,CAAD,IAAwB,oBAAC,KAAD;AAAO,QAAA,eAAe,EAAEzD,MAAM,CAACmF;AAA/B,SAA0C1B,UAA1C;AAAsD,QAAA,IAAI,EAAEkB,SAA5D;AAAuE,QAAA,cAAc,EAAE,CAACH,MAAM,CAACY,KAAR,EAAe3B,UAAU,CAAC4B,cAA1B;AAAvF,SAP3B,EAQG1B,iBARH,CAPG,EAiBH,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAAC;AACvB2B,UAAAA,OAAO,EAAE5D;AADc,SAAD,EAErB8C,MAAM,CAACe,SAFc,EAEHpC,cAFG;AAAtB,QAjBG,CAAP;AAqBD;;;;EApMsBrD,a;;AAAnBkB,U,CACGwE,S,GAAY;AAIjBpC,EAAAA,IAAI,EAAEzD,GAAG,CAAC8F,MAJO;AASjBpC,EAAAA,SAAS,EAAE1D,GAAG,CAAC+F,MATE;AAcjBpC,EAAAA,iBAAiB,EAAE3D,GAAG,CAAC+F,MAdN;AAmBjBnC,EAAAA,KAAK,EAAE5D,GAAG,CAAC+F,MAnBM;AAwBjBhC,EAAAA,gBAAgB,EAAE/D,GAAG,CAACgG,OAxBL;AA6BjBhC,EAAAA,iBAAiB,EAAEhE,GAAG,CAACgG,OA7BN;AAkCjB9B,EAAAA,QAAQ,EAAElE,GAAG,CAAC8F,MAlCG;AAuCjBrE,EAAAA,QAAQ,EAAEzB,GAAG,CAACiG,IAvCG;AA4CjB7B,EAAAA,WAAW,EAAEpE,GAAG,CAACiG,IA5CA;AAiDjB5B,EAAAA,KAAK,EAAErE,GAAG,CAAC8F,MAjDM;AAsDjBtB,EAAAA,eAAe,EAAExE,GAAG,CAAC+F,MAtDJ;AA2DjBG,EAAAA,MAAM,EAAElG,GAAG,CAACiG,IA3DK;AAgEjB3B,EAAAA,OAAO,EAAEtE,GAAG,CAACmG,IAhEI;AAqEjBlC,EAAAA,SAAS,EAAEjE,GAAG,CAACiG,IArEE;AA0EjB1B,EAAAA,qBAAqB,EAAEvE,GAAG,CAAC+F,MA1EV;AA2EjBrB,EAAAA,kBAAkB,EAAE1E,GAAG,CAAC+F,MA3EP;AA4EjBtB,EAAAA,MAAM,EAAEzE,GAAG,CAAC+F;AA5EK,C;AADf1E,U,CA+EG+E,W,GAAc,a;AA/EjB/E,U,CAgFGgF,Y,GAAe;AACpBnC,EAAAA,QAAQ,EAAE;AADU,C;AAwHxB,eAAe1D,eAAe,CAACa,UAAD,CAA9B;AACA,IAAMwD,MAAM,GAAG/B,UAAU,CAACwD,MAAX,CAAkB;AAC/BjB,EAAAA,gBAAgB,EAAE;AAChBkB,IAAAA,iBAAiB,EAAEtF;AADH,GADa;AAI/B2C,EAAAA,KAAK;AACH4C,IAAAA,KAAK,EAAEnG,MAAM,CAACW;AADX,KAEAV,UAAU,CAACmG,MAFX,CAJ0B;AAQ/B1B,EAAAA,aAAa;AACXyB,IAAAA,KAAK,EAAEnG,MAAM,CAACW;AADH,KAERV,UAAU,CAACmG,MAFH;AAGXC,IAAAA,UAAU,EAAE;AAHD,IARkB;AAa/BtB,EAAAA,OAAO,EAAE;AACPuB,IAAAA,gBAAgB,EAAE,CADX;AAEPC,IAAAA,gBAAgB,EAAEvG,MAAM,CAACwG,MAFlB;AAGPC,IAAAA,cAAc,EAAE;AAHT,GAbsB;AAmB/BlB,EAAAA,SAAS,EAAE;AACTpB,IAAAA,eAAe,EAAEzD,kBADR;AAETgG,IAAAA,MAAM,EAAEjG,gBAFC;AAGTkG,IAAAA,gBAAgB,EAAE/F;AAHT,GAnBoB;AAwB/BwE,EAAAA,KAAK,EAAE;AACLwB,IAAAA,UAAU,EAAE1G,QAAQ,CAAC2G;AADhB,GAxBwB;AA2B/BzD,EAAAA,IAAI,EAAE;AACJ0D,IAAAA,WAAW,EAAE;AADT;AA3ByB,CAAlB,CAAf","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, Animated, Easing } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport Badge from \"../badge\";\nconst INDICATOR_HEIGHT = 2;\nconst INDICATOR_BG_COLOR = Colors.primary;\nconst HORIZONTAL_PADDING = Constants.isTablet ? Spacings.s7 : Spacings.s5;\n\n/**\n * @description: TabBar.Item, inner component of TabBar for configuring the tabs\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n * @extends: TouchableOpacity\n * @extendsLink: https://reactnative.dev/docs/touchableopacity\n */\nclass TabBarItem extends PureComponent {\n  static propTypes = {\n    /**\n       * icon of the tab\n       */\n    icon: _pt.number,\n\n    /**\n       * icon tint color\n       */\n    iconColor: _pt.string,\n\n    /**\n       * icon selected tint color\n       */\n    iconSelectedColor: _pt.string,\n\n    /**\n       * label of the tab\n       */\n    label: _pt.string,\n\n    /**\n       * Pass to render a leading element\n       */\n    leadingAccessory: _pt.element,\n\n    /**\n       * Pass to render a trailing element\n       */\n    trailingAccessory: _pt.element,\n\n    /**\n       * maximum number of lines the label can break\n       */\n    maxLines: _pt.number,\n\n    /**\n       * whether the tab is selected or not\n       */\n    selected: _pt.bool,\n\n    /**\n       * whether the tab will have a divider on its right\n       */\n    showDivider: _pt.bool,\n\n    /**\n       * A fixed width for the item\n       */\n    width: _pt.number,\n\n    /**\n       * tabBar's background color\n       */\n    backgroundColor: _pt.string,\n\n    /**\n       * ignore of the tab\n       */\n    ignore: _pt.bool,\n\n    /**\n       * callback for when pressing a tab\n       */\n    onPress: _pt.func,\n\n    /**\n       * whether to change the text to uppercase\n       */\n    uppercase: _pt.bool,\n\n    /**\n       * Apply background color on press for TouchableOpacity\n       */\n    activeBackgroundColor: _pt.string,\n    accessibilityLabel: _pt.string,\n    testID: _pt.string\n  };\n  static displayName = 'TabBar.Item';\n  static defaultProps = {\n    maxLines: 1\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      indicatorOpacity: props.selected ? new Animated.Value(1) : new Animated.Value(0),\n      selected: props.selected\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected !== this.props.selected) {\n      this.animate(this.props.selected);\n    }\n  }\n\n  animate(newValue) {\n    Animated.timing(this.state.indicatorOpacity, {\n      toValue: newValue ? 1 : 0,\n      easing: Easing.ease,\n      duration: 150,\n      useNativeDriver: true\n    }).start(this.onAnimateCompleted);\n  }\n\n  onAnimateCompleted = () => {\n    this.setState({\n      selected: this.props.selected\n    });\n  };\n\n  getFlattenStyle(style) {\n    return StyleSheet.flatten(style);\n  }\n\n  getStylePropValue(flattenStyle, propName) {\n    let prop;\n\n    if (flattenStyle) {\n      const propObject = _.pick(flattenStyle, [propName]);\n\n      prop = propObject[propName];\n    }\n\n    return prop;\n  }\n\n  getColorFromStyle(style) {\n    const flattenStyle = this.getFlattenStyle(style);\n    return this.getStylePropValue(flattenStyle, 'color');\n  }\n\n  getLayout() {\n    return this.layout;\n  }\n\n  onLayout = event => {\n    this.layout = event.nativeEvent.layout;\n  };\n\n  render() {\n    const {\n      indicatorOpacity,\n      selected\n    } = this.state;\n    const {\n      children,\n      indicatorStyle,\n      icon,\n      iconColor,\n      iconSelectedColor,\n      label,\n      labelStyle,\n      badgeProps,\n      leadingAccessory,\n      trailingAccessory,\n      uppercase,\n      maxLines,\n      selectedLabelStyle,\n      showDivider,\n      width,\n      onPress,\n      activeBackgroundColor,\n      backgroundColor,\n      testID,\n      accessibilityLabel,\n      style\n    } = this.props;\n    const iconTint = iconColor || this.getColorFromStyle(labelStyle) || this.getColorFromStyle(styles.label);\n    const iconSelectedTint = iconSelectedColor || this.getColorFromStyle(selectedLabelStyle) || this.getColorFromStyle(styles.selectedLabel);\n\n    const badgeSize = _.get(badgeProps, 'size', 16);\n\n    return <TouchableOpacity activeOpacity={1} onPress={onPress} style={[width ? {\n      width\n    } : {\n      flex: 1\n    }, style]} testID={testID} backgroundColor={backgroundColor} activeBackgroundColor={activeBackgroundColor} onLayout={this.onLayout} accessibilityState={selected ? {\n      selected: true\n    } : undefined} accessibilityRole={'tab'} accessibilityLabel={accessibilityLabel}>\n        <View row flex center style={[showDivider && styles.divider, styles.contentContainer]}>\n          {leadingAccessory}\n          {icon && <Image style={!_.isEmpty(label) && styles.icon} source={icon} tintColor={selected ? iconSelectedTint : iconTint} />}\n          {!_.isEmpty(label) && <Text numberOfLines={maxLines} uppercase={uppercase} style={[labelStyle || styles.label, selected && (selectedLabelStyle || styles.selectedLabel)]}>\n              {label}\n            </Text>}\n          {children}\n          {!_.isNil(badgeProps) && <Badge backgroundColor={Colors.red30} {...badgeProps} size={badgeSize} containerStyle={[styles.badge, badgeProps.containerStyle]} />}\n          {trailingAccessory}\n        </View>\n        <Animated.View style={[{\n        opacity: indicatorOpacity\n      }, styles.indicator, indicatorStyle]} />\n      </TouchableOpacity>;\n  }\n\n}\n\nexport default asBaseComponent(TabBarItem);\nconst styles = StyleSheet.create({\n  contentContainer: {\n    paddingHorizontal: HORIZONTAL_PADDING\n  },\n  label: {\n    color: Colors.primary,\n    ...Typography.text80\n  },\n  selectedLabel: {\n    color: Colors.primary,\n    ...Typography.text80,\n    fontWeight: 'bold'\n  },\n  divider: {\n    borderRightWidth: 1,\n    borderRightColor: Colors.grey70,\n    marginVertical: 14 // NOTE: will not cut long text at the top and bottom in iOS if TabBar not high enough\n\n  },\n  indicator: {\n    backgroundColor: INDICATOR_BG_COLOR,\n    height: INDICATOR_HEIGHT,\n    marginHorizontal: HORIZONTAL_PADDING\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  },\n  icon: {\n    marginRight: 6\n  }\n});"]},"metadata":{},"sourceType":"module"}