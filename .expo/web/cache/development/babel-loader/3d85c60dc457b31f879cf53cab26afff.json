{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"migrate\"];\nimport React, { useEffect, forwardRef } from 'react';\nimport { mapKeys } from 'lodash';\nimport hoistStatics from 'hoist-non-react-statics';\nimport OldTextField from \"./index\";\nimport NewTextField from \"../../incubator/TextField\";\nimport { LogService } from \"../../services\";\nvar propsMigrationMap = {\n  helperText: 'hint',\n  title: 'label',\n  titleColor: 'labelColor',\n  titleStyle: 'labelStyle',\n  showCharacterCounter: 'showCharCounter',\n  transformer: 'formatter'\n};\nvar specialMigrationMap = {\n  prefix: 'leadingAccessory',\n  prefixStyle: 'leadingAccessory',\n  rightIconSource: 'trailingAccessory',\n  rightIconStyle: 'trailingAccessory',\n  rightButtonProps: 'trailingAccessory',\n  leadingIcon: 'leadingAccessory',\n  useTopErrors: 'validationMessagePosition'\n};\nvar customMessageMap = {\n  centered: \"Pass textAlign to 'style' prop instead.\",\n  error: \"Use 'validationMessage' with 'validate' props\",\n  expandable: 'This prop will not be supported anymore',\n  renderExpandableInput: 'This prop will not be supported anymore',\n  renderExpandable: 'This prop will not be supported anymore',\n  onToggleExpandableModal: 'This prop will not be supported anymore',\n  topBarProps: 'This prop will not be supported anymore',\n  transformer: 'This prop will not be supported anymore'\n};\n\nfunction migrateProps(props) {\n  var fixedProps = mapKeys(props, function (_value, key) {\n    if (propsMigrationMap[key]) {\n      LogService.deprecationWarn({\n        component: 'TextField',\n        oldProp: key,\n        newProp: propsMigrationMap[key]\n      });\n      return propsMigrationMap[key];\n    } else if (specialMigrationMap[key]) {\n      LogService.warn(\"The new TextField implementation does not support the '\" + key + \"' prop. Please use the '\" + specialMigrationMap[key] + \"' instead\");\n    } else if (customMessageMap[key]) {\n      LogService.warn(\"The new TextField implementation does not support the '\" + key + \"' prop. \" + customMessageMap[key]);\n    }\n\n    return key;\n  });\n  return fixedProps;\n}\n\nvar TextFieldMigrator = forwardRef(function (_ref, ref) {\n  var _ref$migrate = _ref.migrate,\n      migrate = _ref$migrate === void 0 ? false : _ref$migrate,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  useEffect(function () {\n    if (!migrate) {\n      LogService.warn(\"RNUILib TextField component will soon be replaced with a new implementation, in order to start the migration - please pass the 'migrate' prop\");\n    }\n  }, []);\n\n  if (migrate) {\n    var migratedProps = migrateProps(props);\n    return React.createElement(NewTextField, _extends({}, migratedProps, {\n      ref: ref\n    }));\n  } else {\n    return React.createElement(OldTextField, _extends({}, props, {\n      ref: ref\n    }));\n  }\n});\nhoistStatics(TextFieldMigrator, NewTextField);\nTextFieldMigrator.displayName = 'TextField';\nexport default TextFieldMigrator;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/textField/TextFieldMigrator.js"],"names":["React","useEffect","forwardRef","mapKeys","hoistStatics","OldTextField","NewTextField","LogService","propsMigrationMap","helperText","title","titleColor","titleStyle","showCharacterCounter","transformer","specialMigrationMap","prefix","prefixStyle","rightIconSource","rightIconStyle","rightButtonProps","leadingIcon","useTopErrors","customMessageMap","centered","error","expandable","renderExpandableInput","renderExpandable","onToggleExpandableModal","topBarProps","migrateProps","props","fixedProps","_value","key","deprecationWarn","component","oldProp","newProp","warn","TextFieldMigrator","ref","migrate","migratedProps","displayName"],"mappings":"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","sourcesContent":["import React, { useEffect, forwardRef } from 'react';\nimport { mapKeys } from 'lodash';\nimport hoistStatics from 'hoist-non-react-statics'; // @ts-ignore\n\nimport OldTextField from \"./index\";\nimport NewTextField from \"../../incubator/TextField\";\nimport { LogService } from \"../../services\";\nconst propsMigrationMap = {\n  /* LABEL */\n  helperText: 'hint',\n  title: 'label',\n  titleColor: 'labelColor',\n  titleStyle: 'labelStyle',\n\n  /* CHAR COUNTER */\n  showCharacterCounter: 'showCharCounter',\n  transformer: 'formatter'\n};\nconst specialMigrationMap = {\n  prefix: 'leadingAccessory',\n  prefixStyle: 'leadingAccessory',\n  rightIconSource: 'trailingAccessory',\n  rightIconStyle: 'trailingAccessory',\n  rightButtonProps: 'trailingAccessory',\n  leadingIcon: 'leadingAccessory',\n  useTopErrors: 'validationMessagePosition'\n};\nconst customMessageMap = {\n  centered: `Pass textAlign to 'style' prop instead.`,\n  error: `Use 'validationMessage' with 'validate' props`,\n  expandable: 'This prop will not be supported anymore',\n  renderExpandableInput: 'This prop will not be supported anymore',\n  renderExpandable: 'This prop will not be supported anymore',\n  onToggleExpandableModal: 'This prop will not be supported anymore',\n  topBarProps: 'This prop will not be supported anymore',\n  transformer: 'This prop will not be supported anymore'\n};\n\nfunction migrateProps(props) {\n  const fixedProps = mapKeys(props, (_value, key) => {\n    if (propsMigrationMap[key]) {\n      LogService.deprecationWarn({\n        component: 'TextField',\n        oldProp: key,\n        newProp: propsMigrationMap[key]\n      });\n      return propsMigrationMap[key];\n    } else if (specialMigrationMap[key]) {\n      LogService.warn(`The new TextField implementation does not support the '${key}' prop. Please use the '${specialMigrationMap[key]}' instead`);\n    } else if (customMessageMap[key]) {\n      LogService.warn(`The new TextField implementation does not support the '${key}' prop. ${customMessageMap[key]}`);\n    }\n\n    return key;\n  });\n  return fixedProps;\n}\n\nconst TextFieldMigrator = forwardRef(({\n  migrate = false,\n  ...props\n}, ref) => {\n  useEffect(() => {\n    if (!migrate) {\n      LogService.warn(`RNUILib TextField component will soon be replaced with a new implementation, in order to start the migration - please pass the 'migrate' prop`);\n    }\n  }, []);\n\n  if (migrate) {\n    const migratedProps = migrateProps(props); // @ts-ignore\n\n    return <NewTextField {...migratedProps} ref={ref} />;\n  } else {\n    return <OldTextField {...props} ref={ref} />;\n  }\n});\nhoistStatics(TextFieldMigrator, NewTextField);\nTextFieldMigrator.displayName = 'TextField';\nexport default TextFieldMigrator;"]},"metadata":{},"sourceType":"module"}