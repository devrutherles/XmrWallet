{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport var orientations;\n\n(function (orientations) {\n  orientations[\"PORTRAIT\"] = \"portrait\";\n  orientations[\"LANDSCAPE\"] = \"landscape\";\n})(orientations || (orientations = {}));\n\nvar isAndroid = Platform.OS === 'android';\nvar isIOS = Platform.OS === 'ios';\nvar isTablet;\nvar statusBarHeight;\nvar screenHeight = Dimensions.get('screen').height;\nvar screenWidth = Dimensions.get('screen').width;\nvar windowHeight = Dimensions.get('window').height;\nvar windowWidth = Dimensions.get('window').width;\nisTablet = Platform.isPad || getAspectRatio() < 1.6 && Math.max(screenWidth, screenHeight) >= 900;\n\nfunction setStatusBarHeight() {\n  var StatusBarManager = NativeModules.StatusBarManager;\n  statusBarHeight = (StatusBarManager == null ? void 0 : StatusBarManager.HEIGHT) || 0;\n}\n\nfunction getAspectRatio() {\n  return screenWidth < screenHeight ? screenHeight / screenWidth : screenWidth / screenHeight;\n}\n\nfunction getOrientation(height, width) {\n  return width < height ? orientations.PORTRAIT : orientations.LANDSCAPE;\n}\n\nexport function updateConstants(dimensions) {\n  screenHeight = dimensions.screen.height;\n  screenWidth = dimensions.screen.width;\n  windowWidth = dimensions.window.width;\n  windowHeight = dimensions.window.height;\n  setStatusBarHeight();\n}\nvar accessibility = {\n  isScreenReaderEnabled: false\n};\n\nfunction handleScreenReaderChanged(isScreenReaderEnabled) {\n  accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n}\n\nAccessibilityInfo.addEventListener('screenReaderChanged', handleScreenReaderChanged);\n\nfunction setAccessibility() {\n  AccessibilityInfo.isScreenReaderEnabled().then(function (isScreenReaderEnabled) {\n    accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n  });\n}\n\nsetAccessibility();\nvar constants = {\n  orientations: orientations,\n  isAndroid: isAndroid,\n  isIOS: isIOS,\n  getAndroidVersion: function getAndroidVersion() {\n    return isAndroid ? parseInt(Platform.Version, 10) : undefined;\n  },\n\n  get statusBarHeight() {\n    return statusBarHeight;\n  },\n\n  isRTL: I18nManager.isRTL,\n\n  get orientation() {\n    return getOrientation(windowHeight, windowWidth);\n  },\n\n  get isLandscape() {\n    return getOrientation(windowHeight, windowWidth) === orientations.LANDSCAPE;\n  },\n\n  get screenWidth() {\n    return screenWidth;\n  },\n\n  get screenHeight() {\n    return screenHeight;\n  },\n\n  get windowWidth() {\n    return windowWidth;\n  },\n\n  get windowHeight() {\n    return windowHeight;\n  },\n\n  get isSmallScreen() {\n    return screenWidth <= 340;\n  },\n\n  get isShortScreen() {\n    return screenHeight <= 600;\n  },\n\n  get screenAspectRatio() {\n    return getAspectRatio();\n  },\n\n  get isTablet() {\n    return isTablet;\n  },\n\n  set isTablet(value) {\n    isTablet = value;\n  },\n\n  getSafeAreaInsets: function getSafeAreaInsets() {\n    var orientation = getOrientation(screenHeight, screenWidth);\n    return orientation === orientations.LANDSCAPE ? {\n      left: 44,\n      right: 44,\n      bottom: 24,\n      top: 0\n    } : {\n      left: 0,\n      right: 0,\n      bottom: 34,\n      top: 44\n    };\n  },\n\n  get isIphoneX() {\n    return isIOS && !Platform.isPad && !Platform.isTVOS && (screenHeight >= 812 || screenWidth >= 812);\n  },\n\n  addDimensionsEventListener: function addDimensionsEventListener(callback) {\n    return Dimensions.addEventListener('change', callback);\n  },\n  removeDimensionsEventListener: function removeDimensionsEventListener(callback) {\n    if (callback.remove) {\n      callback.remove();\n    } else {\n      Dimensions.removeEventListener('change', callback);\n    }\n  },\n\n  get accessibility() {\n    return accessibility;\n  },\n\n  backspaceKey: 'Backspace',\n  enterKey: 'Enter'\n};\nsetStatusBarHeight();\nDimensions.addEventListener('change', updateConstants);\nexport default constants;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/helpers/Constants.js"],"names":["orientations","isAndroid","Platform","OS","isIOS","isTablet","statusBarHeight","screenHeight","Dimensions","get","height","screenWidth","width","windowHeight","windowWidth","isPad","getAspectRatio","Math","max","setStatusBarHeight","StatusBarManager","NativeModules","HEIGHT","getOrientation","PORTRAIT","LANDSCAPE","updateConstants","dimensions","screen","window","accessibility","isScreenReaderEnabled","handleScreenReaderChanged","AccessibilityInfo","addEventListener","setAccessibility","then","constants","getAndroidVersion","parseInt","Version","undefined","isRTL","I18nManager","orientation","isLandscape","isSmallScreen","isShortScreen","screenAspectRatio","value","getSafeAreaInsets","left","right","bottom","top","isIphoneX","isTVOS","addDimensionsEventListener","callback","removeDimensionsEventListener","remove","removeEventListener","backspaceKey","enterKey"],"mappings":"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","sourcesContent":["import { Platform, Dimensions, NativeModules, I18nManager, AccessibilityInfo } from 'react-native';\nexport let orientations;\n\n(function (orientations) {\n  orientations[\"PORTRAIT\"] = \"portrait\";\n  orientations[\"LANDSCAPE\"] = \"landscape\";\n})(orientations || (orientations = {}));\n\nconst isAndroid = Platform.OS === 'android';\nconst isIOS = Platform.OS === 'ios';\nlet isTablet;\nlet statusBarHeight;\nlet screenHeight = Dimensions.get('screen').height;\nlet screenWidth = Dimensions.get('screen').width;\nlet windowHeight = Dimensions.get('window').height;\nlet windowWidth = Dimensions.get('window').width; //@ts-ignore\n\nisTablet = Platform.isPad || getAspectRatio() < 1.6 && Math.max(screenWidth, screenHeight) >= 900;\n\nfunction setStatusBarHeight() {\n  const {\n    StatusBarManager\n  } = NativeModules;\n  statusBarHeight = StatusBarManager?.HEIGHT || 0; // So there will be a value for any case\n  // statusBarHeight = isIOS ? 20 : StatusBarManager.HEIGHT;\n  // if (isIOS) {\n  //   // override guesstimate height with the actual height from StatusBarManager\n  //   StatusBarManager.getHeight((data: any) => (statusBarHeight = data.height));\n  // }\n}\n\nfunction getAspectRatio() {\n  return screenWidth < screenHeight ? screenHeight / screenWidth : screenWidth / screenHeight;\n}\n\nfunction getOrientation(height, width) {\n  return width < height ? orientations.PORTRAIT : orientations.LANDSCAPE;\n}\n\nexport function updateConstants(dimensions) {\n  screenHeight = dimensions.screen.height;\n  screenWidth = dimensions.screen.width;\n  windowWidth = dimensions.window.width;\n  windowHeight = dimensions.window.height;\n  setStatusBarHeight();\n}\nconst accessibility = {\n  isScreenReaderEnabled: false\n};\n\nfunction handleScreenReaderChanged(isScreenReaderEnabled) {\n  accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n}\n\nAccessibilityInfo.addEventListener('screenReaderChanged', handleScreenReaderChanged);\n\nfunction setAccessibility() {\n  AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {\n    accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n  });\n}\n\nsetAccessibility();\nconst constants = {\n  /* Platform */\n  orientations,\n  isAndroid,\n  isIOS,\n  getAndroidVersion: () => {\n    return isAndroid ? parseInt(Platform.Version, 10) : undefined;\n  },\n\n  /* Navigation */\n  get statusBarHeight() {\n    return statusBarHeight;\n  },\n\n  /* Layout */\n  isRTL: I18nManager.isRTL,\n\n  get orientation() {\n    return getOrientation(windowHeight, windowWidth);\n  },\n\n  get isLandscape() {\n    return getOrientation(windowHeight, windowWidth) === orientations.LANDSCAPE;\n  },\n\n  get screenWidth() {\n    return screenWidth;\n  },\n\n  get screenHeight() {\n    return screenHeight;\n  },\n\n  get windowWidth() {\n    return windowWidth;\n  },\n\n  get windowHeight() {\n    return windowHeight;\n  },\n\n  get isSmallScreen() {\n    return screenWidth <= 340;\n  },\n\n  get isShortScreen() {\n    return screenHeight <= 600;\n  },\n\n  get screenAspectRatio() {\n    return getAspectRatio();\n  },\n\n  get isTablet() {\n    return isTablet;\n  },\n\n  set isTablet(value) {\n    isTablet = value;\n  },\n\n  getSafeAreaInsets: () => {\n    const orientation = getOrientation(screenHeight, screenWidth);\n    return orientation === orientations.LANDSCAPE ? {\n      left: 44,\n      right: 44,\n      bottom: 24,\n      top: 0\n    } : {\n      left: 0,\n      right: 0,\n      bottom: 34,\n      top: 44\n    };\n  },\n\n  /* Devices */\n  get isIphoneX() {\n    return isIOS && //@ts-ignore\n    !Platform.isPad && //@ts-ignore\n    !Platform.isTVOS && (screenHeight >= 812 || screenWidth >= 812);\n  },\n\n  /* Orientation */\n  addDimensionsEventListener: callback => {\n    return Dimensions.addEventListener('change', callback);\n  },\n\n  /* Dimensions */\n  removeDimensionsEventListener: callback => {\n    if (callback.remove) {\n      callback.remove();\n    } else {\n      Dimensions.removeEventListener('change', callback);\n    }\n  },\n\n  /* Accessibility */\n  get accessibility() {\n    return accessibility;\n  },\n\n  /* Keyboard */\n  backspaceKey: 'Backspace',\n  enterKey: 'Enter'\n};\nsetStatusBarHeight();\nDimensions.addEventListener('change', updateConstants);\nexport default constants;"]},"metadata":{},"sourceType":"module"}