{"ast":null,"code":"import _ from 'lodash';\nimport URL from 'url-parse';\nimport Colors from \"../style/colors\";\nexport function hashStringToNumber(str) {\n  var hash = 5381;\n\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    hash = (hash << 5) + hash + char;\n  }\n\n  return hash;\n}\nexport function getAvatarColors() {\n  return [Colors.blue20, Colors.cyan20, Colors.green20, Colors.yellow20, Colors.orange20, Colors.red20, Colors.purple20, Colors.violet20];\n}\nexport function getColorById(id) {\n  var avatarColors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getAvatarColors();\n\n  if (!id) {\n    return avatarColors[0];\n  }\n\n  var hashedId = hashStringToNumber(id);\n  var colorIndex = Math.abs(hashedId % avatarColors.length);\n  return avatarColors[colorIndex];\n}\nexport function getInitials(name) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var initials = '';\n\n  if (name && _.isString(name)) {\n    var nameSplitted = _.chain(name).split(/\\s+/g).filter(function (word) {\n      return word.length > 0;\n    }).take(limit).value();\n\n    _.each(nameSplitted, function (str) {\n      initials += str[0];\n    });\n  }\n\n  return _.toUpper(initials);\n}\nexport function getBackgroundColor(name, avatarColors, hashFunction, defaultColor) {\n  if (!name || !avatarColors || !hashFunction) {\n    return defaultColor;\n  }\n\n  var hash = hashFunction(name);\n  var index = Math.abs(hash % avatarColors.length);\n  return avatarColors[index];\n}\nexport function isGravatarUrl(url) {\n  var _URL = new URL(url),\n      hostname = _URL.hostname,\n      pathname = _URL.pathname;\n\n  return _.split(hostname, '.').includes('gravatar') && pathname.startsWith('/avatar/');\n}\nexport function isBlankGravatarUrl(url) {\n  return isGravatarUrl(url) && _.endsWith(url, '?d=blank');\n}\nexport function patchGravatarUrl(gravatarUrl) {\n  var url = new URL(gravatarUrl, true);\n  var query = url.query;\n  query.d = '404';\n  delete query.default;\n  url.set('query', query);\n  return url.toString();\n}","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/helpers/AvatarHelper.js"],"names":["_","URL","Colors","hashStringToNumber","str","hash","i","length","char","charCodeAt","getAvatarColors","blue20","cyan20","green20","yellow20","orange20","red20","purple20","violet20","getColorById","id","avatarColors","hashedId","colorIndex","Math","abs","getInitials","name","limit","initials","isString","nameSplitted","chain","split","filter","word","take","value","each","toUpper","getBackgroundColor","hashFunction","defaultColor","index","isGravatarUrl","url","hostname","pathname","includes","startsWith","isBlankGravatarUrl","endsWith","patchGravatarUrl","gravatarUrl","query","d","default","set","toString"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport URL from 'url-parse';\nimport Colors from \"../style/colors\";\nexport function hashStringToNumber(str) {\n  let hash = 5381;\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) + hash + char;\n    /* hash * 33 + c */\n    // eslint-disable-line\n  }\n\n  return hash;\n}\nexport function getAvatarColors() {\n  return [Colors.blue20, Colors.cyan20, Colors.green20, Colors.yellow20, Colors.orange20, Colors.red20, Colors.purple20, Colors.violet20];\n}\nexport function getColorById(id, avatarColors = getAvatarColors()) {\n  if (!id) {\n    return avatarColors[0];\n  }\n\n  const hashedId = hashStringToNumber(id);\n  const colorIndex = Math.abs(hashedId % avatarColors.length);\n  return avatarColors[colorIndex];\n}\nexport function getInitials(name, limit = 2) {\n  let initials = '';\n\n  if (name && _.isString(name)) {\n    const nameSplitted = _.chain(name).split(/\\s+/g).filter(word => word.length > 0).take(limit).value();\n\n    _.each(nameSplitted, str => {\n      initials += str[0];\n    });\n  }\n\n  return _.toUpper(initials);\n}\nexport function getBackgroundColor(name, avatarColors, hashFunction, defaultColor) {\n  if (!name || !avatarColors || !hashFunction) {\n    return defaultColor;\n  }\n\n  const hash = hashFunction(name);\n  const index = Math.abs(hash % avatarColors.length);\n  return avatarColors[index];\n}\nexport function isGravatarUrl(url) {\n  const {\n    hostname,\n    pathname\n  } = new URL(url);\n  return _.split(hostname, '.').includes('gravatar') && pathname.startsWith('/avatar/');\n}\nexport function isBlankGravatarUrl(url) {\n  return isGravatarUrl(url) && _.endsWith(url, '?d=blank');\n}\nexport function patchGravatarUrl(gravatarUrl) {\n  const url = new URL(gravatarUrl, true);\n  const {\n    query\n  } = url;\n  query.d = '404';\n  delete query.default;\n  url.set('query', query);\n  return url.toString();\n}"]},"metadata":{},"sourceType":"module"}