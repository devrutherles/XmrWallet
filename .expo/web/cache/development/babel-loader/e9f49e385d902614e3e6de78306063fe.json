{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _pt from \"prop-types\";\nimport React from 'react';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nvar NativeHighlighterView = requireNativeComponent('HighlighterView');\nvar DefaultOverlayColor = 'rgba(0, 0, 0, 0.5)';\n\nvar HighlighterOverlayView = function HighlighterOverlayView(props) {\n  var overlayColor = props.overlayColor,\n      borderRadius = props.borderRadius,\n      strokeColor = props.strokeColor,\n      strokeWidth = props.strokeWidth,\n      visible = props.visible,\n      _onRequestClose = props.onRequestClose,\n      highlightFrame = props.highlightFrame,\n      style = props.style,\n      children = props.children,\n      highlightViewTag = props.highlightViewTag,\n      highlightViewTagParams = props.highlightViewTagParams,\n      minimumRectSize = props.minimumRectSize,\n      innerPadding = props.innerPadding;\n  var overlayColorToUse = overlayColor || DefaultOverlayColor;\n  var strokeColorToUse = strokeColor;\n\n  if (Platform.OS === 'android') {\n    overlayColorToUse = processColor(overlayColorToUse);\n    strokeColorToUse = processColor(strokeColorToUse);\n  }\n\n  return React.createElement(Modal, {\n    visible: !!visible,\n    animationType: 'fade',\n    transparent: true,\n    onRequestClose: function onRequestClose() {\n      return _onRequestClose == null ? void 0 : _onRequestClose();\n    }\n  }, React.createElement(NativeHighlighterView, {\n    highlightFrame: highlightFrame,\n    style: [style, _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n      backgroundColor: 'transparent'\n    })],\n    overlayColor: overlayColorToUse,\n    borderRadius: borderRadius,\n    strokeColor: strokeColorToUse,\n    strokeWidth: strokeWidth,\n    highlightViewTag: highlightViewTag,\n    highlightViewTagParams: highlightViewTagParams,\n    minimumRectSize: minimumRectSize,\n    innerPadding: innerPadding\n  }), children);\n};\n\nHighlighterOverlayView.propTypes = {\n  visible: _pt.bool.isRequired,\n  overlayColor: _pt.string,\n  borderRadius: _pt.number,\n  strokeColor: _pt.string,\n  strokeWidth: _pt.number,\n  onRequestClose: _pt.func,\n  highlightFrame: _pt.shape({\n    x: _pt.number.isRequired,\n    y: _pt.number.isRequired,\n    width: _pt.number.isRequired,\n    height: _pt.number.isRequired\n  }),\n  highlightViewTag: _pt.oneOfType([_pt.number, _pt.oneOf([null])]),\n  children: _pt.oneOfType([_pt.arrayOf(_pt.element), _pt.element]),\n  highlightViewTagParams: _pt.shape({}),\n  innerPadding: _pt.number,\n  accessible: _pt.bool,\n  testID: _pt.string\n};\nHighlighterOverlayView.displayName = 'IGNORE';\nexport default HighlighterOverlayView;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/HighlighterOverlayView.js"],"names":["_pt","React","requireNativeComponent","NativeHighlighterView","DefaultOverlayColor","HighlighterOverlayView","props","overlayColor","borderRadius","strokeColor","strokeWidth","visible","onRequestClose","highlightFrame","style","children","highlightViewTag","highlightViewTagParams","minimumRectSize","innerPadding","overlayColorToUse","strokeColorToUse","Platform","OS","processColor","StyleSheet","absoluteFillObject","backgroundColor","propTypes","bool","isRequired","string","number","func","shape","x","y","width","height","oneOfType","oneOf","arrayOf","element","accessible","testID","displayName"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React from 'react';\nimport { requireNativeComponent, processColor, Platform, StyleSheet, Modal } from 'react-native';\nconst NativeHighlighterView = requireNativeComponent('HighlighterView');\nconst DefaultOverlayColor = 'rgba(0, 0, 0, 0.5)';\n\nconst HighlighterOverlayView = props => {\n  const {\n    overlayColor,\n    borderRadius,\n    strokeColor,\n    strokeWidth,\n    visible,\n    onRequestClose,\n    highlightFrame,\n    style,\n    children,\n    highlightViewTag,\n    highlightViewTagParams,\n    minimumRectSize,\n    innerPadding\n  } = props;\n  let overlayColorToUse = overlayColor || DefaultOverlayColor;\n  let strokeColorToUse = strokeColor;\n\n  if (Platform.OS === 'android') {\n    // @ts-ignore\n    overlayColorToUse = processColor(overlayColorToUse); // @ts-ignore\n\n    strokeColorToUse = processColor(strokeColorToUse);\n  }\n\n  return <Modal visible={!!visible} animationType={'fade'} transparent onRequestClose={() => onRequestClose?.()}>\n      <NativeHighlighterView // @ts-ignore, this became private, not sure if I should remove it \n    highlightFrame={highlightFrame} style={[style, { ...StyleSheet.absoluteFillObject,\n      backgroundColor: 'transparent'\n    }]} overlayColor={overlayColorToUse} borderRadius={borderRadius} strokeColor={strokeColorToUse} strokeWidth={strokeWidth} highlightViewTag={highlightViewTag} highlightViewTagParams={highlightViewTagParams} minimumRectSize={minimumRectSize} innerPadding={innerPadding} />\n      {children}\n    </Modal>;\n};\n\nHighlighterOverlayView.propTypes = {\n  visible: _pt.bool.isRequired,\n  overlayColor: _pt.string,\n  borderRadius: _pt.number,\n  strokeColor: _pt.string,\n  strokeWidth: _pt.number,\n  onRequestClose: _pt.func,\n  highlightFrame: _pt.shape({\n    x: _pt.number.isRequired,\n    y: _pt.number.isRequired,\n    width: _pt.number.isRequired,\n    height: _pt.number.isRequired\n  }),\n  highlightViewTag: _pt.oneOfType([_pt.number, _pt.oneOf([null])]),\n  children: _pt.oneOfType([_pt.arrayOf(_pt.element), _pt.element]),\n  highlightViewTagParams: _pt.shape({}),\n  innerPadding: _pt.number,\n  accessible: _pt.bool,\n  testID: _pt.string\n};\nHighlighterOverlayView.displayName = 'IGNORE';\nexport default HighlighterOverlayView;"]},"metadata":{},"sourceType":"module"}