{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _ from 'lodash';\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { useScrollTo } from \"../../hooks\";\nexport var OffsetType;\n\n(function (OffsetType) {\n  OffsetType[\"CENTER\"] = \"CENTER\";\n  OffsetType[\"DYNAMIC\"] = \"DYNAMIC\";\n  OffsetType[\"LEFT\"] = \"LEFT\";\n  OffsetType[\"RIGHT\"] = \"RIGHT\";\n})(OffsetType || (OffsetType = {}));\n\nvar useScrollToItem = function useScrollToItem(props) {\n  var propsScrollViewRef = props.scrollViewRef,\n      itemsCount = props.itemsCount,\n      selectedIndex = props.selectedIndex,\n      containerWidth = props.containerWidth,\n      _props$offsetType = props.offsetType,\n      offsetType = _props$offsetType === void 0 ? OffsetType.CENTER : _props$offsetType,\n      _props$addOffsetMargi = props.addOffsetMargin,\n      addOffsetMargin = _props$addOffsetMargi === void 0 ? true : _props$addOffsetMargi,\n      _props$outerSpacing = props.outerSpacing,\n      outerSpacing = _props$outerSpacing === void 0 ? 0 : _props$outerSpacing,\n      _props$innerSpacing = props.innerSpacing,\n      innerSpacing = _props$innerSpacing === void 0 ? 0 : _props$innerSpacing;\n  var itemsWidths = useRef(_.times(itemsCount, function () {\n    return null;\n  }));\n  var itemsWidthsAnimated = useSharedValue(_.times(itemsCount, function () {\n    return 0;\n  }));\n  var itemsOffsetsAnimated = useSharedValue(_.times(itemsCount, function () {\n    return 0;\n  }));\n  var currentIndex = useRef(selectedIndex || 0);\n\n  var _useState = useState({\n    CENTER: [],\n    LEFT: [],\n    RIGHT: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      offsets = _useState2[0],\n      setOffsets = _useState2[1];\n\n  var _useScrollTo = useScrollTo({\n    scrollViewRef: propsScrollViewRef\n  }),\n      scrollViewRef = _useScrollTo.scrollViewRef,\n      scrollTo = _useScrollTo.scrollTo,\n      onContentSizeChange = _useScrollTo.onContentSizeChange,\n      onLayout = _useScrollTo.onLayout;\n\n  var setSnapBreakpoints = useCallback(function (widths) {\n    if (_.isEmpty(widths)) {\n      return;\n    }\n\n    var screenCenter = containerWidth / 2;\n    var index = 0;\n    var centeredOffsets = [];\n    var currentCenterOffset = outerSpacing;\n    var leftOffsets = [];\n    leftOffsets.push(outerSpacing - innerSpacing);\n    var rightOffsets = [];\n    rightOffsets.push(-containerWidth + widths[0] + outerSpacing + innerSpacing);\n\n    while (index < itemsCount) {\n      itemsWidthsAnimated.value[index] = widths[index];\n\n      if (index > 0) {\n        itemsOffsetsAnimated.value[index] = itemsOffsetsAnimated.value[index - 1] + itemsWidthsAnimated.value[index - 1];\n      }\n\n      centeredOffsets[index] = currentCenterOffset - screenCenter + widths[index] / 2;\n      ++index;\n      currentCenterOffset += widths[index - 1] + innerSpacing;\n      leftOffsets[index] = leftOffsets[index - 1] + widths[index - 1] + innerSpacing;\n      rightOffsets[index] = rightOffsets[index - 1] + widths[index] + innerSpacing;\n    }\n\n    if (addOffsetMargin) {\n      index = 1;\n\n      while (index < itemsCount - 1) {\n        leftOffsets[index] -= widths[index - 1];\n        rightOffsets[index] += widths[index + 1] + innerSpacing;\n        ++index;\n      }\n    }\n\n    setOffsets({\n      CENTER: centeredOffsets,\n      LEFT: leftOffsets,\n      RIGHT: rightOffsets\n    });\n    itemsWidthsAnimated.value = _toConsumableArray(itemsWidthsAnimated.value);\n    itemsOffsetsAnimated.value = _toConsumableArray(itemsOffsetsAnimated.value);\n  }, [itemsCount, outerSpacing, innerSpacing, addOffsetMargin, containerWidth]);\n  var onItemLayout = useCallback(function (event, index) {\n    var width = event.nativeEvent.layout.width;\n    itemsWidths.current[index] = width;\n\n    if (!_.includes(itemsWidths.current, null)) {\n      setSnapBreakpoints(itemsWidths.current);\n    }\n  }, [setSnapBreakpoints]);\n  var focusIndex = useCallback(function (index) {\n    var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (index >= 0 && offsets.CENTER.length > index) {\n      if (offsetType !== OffsetType.DYNAMIC) {\n        scrollTo(offsets[offsetType][index], animated);\n      } else {\n        var movingLeft = index < currentIndex.current;\n        currentIndex.current = index;\n        scrollTo(movingLeft ? offsets[OffsetType.RIGHT][index] : offsets[OffsetType.LEFT][index], animated);\n      }\n    }\n  }, [offsets, offsetType, scrollTo]);\n  useEffect(function () {\n    if (!_.isUndefined(selectedIndex)) {\n      focusIndex(selectedIndex, false);\n    }\n  }, [selectedIndex, focusIndex]);\n  var reset = useCallback(function () {\n    for (var i = 0; i < itemsCount; ++i) {\n      itemsWidths.current[i] = null;\n      itemsWidthsAnimated.value[i] = 0;\n      itemsOffsetsAnimated.value[i] = 0;\n    }\n\n    setOffsets({\n      CENTER: [],\n      LEFT: [],\n      RIGHT: []\n    });\n  }, [itemsCount]);\n  return {\n    scrollViewRef: scrollViewRef,\n    onItemLayout: onItemLayout,\n    itemsWidthsAnimated: itemsWidthsAnimated,\n    itemsOffsetsAnimated: itemsOffsetsAnimated,\n    focusIndex: focusIndex,\n    reset: reset,\n    onContentSizeChange: onContentSizeChange,\n    onLayout: onLayout\n  };\n};\n\nuseScrollToItem.offsetType = OffsetType;\nexport default useScrollToItem;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/tabController/useScrollToItem.js"],"names":["_","React","useState","useCallback","useEffect","useRef","useSharedValue","useScrollTo","OffsetType","useScrollToItem","props","propsScrollViewRef","scrollViewRef","itemsCount","selectedIndex","containerWidth","offsetType","CENTER","addOffsetMargin","outerSpacing","innerSpacing","itemsWidths","times","itemsWidthsAnimated","itemsOffsetsAnimated","currentIndex","LEFT","RIGHT","offsets","setOffsets","scrollTo","onContentSizeChange","onLayout","setSnapBreakpoints","widths","isEmpty","screenCenter","index","centeredOffsets","currentCenterOffset","leftOffsets","push","rightOffsets","value","onItemLayout","event","width","nativeEvent","layout","current","includes","focusIndex","animated","length","DYNAMIC","movingLeft","isUndefined","reset","i"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { useScrollTo } from \"../../hooks\";\nexport let OffsetType;\n\n(function (OffsetType) {\n  OffsetType[\"CENTER\"] = \"CENTER\";\n  OffsetType[\"DYNAMIC\"] = \"DYNAMIC\";\n  OffsetType[\"LEFT\"] = \"LEFT\";\n  OffsetType[\"RIGHT\"] = \"RIGHT\";\n})(OffsetType || (OffsetType = {}));\n\nconst useScrollToItem = props => {\n  const {\n    scrollViewRef: propsScrollViewRef,\n    itemsCount,\n    selectedIndex,\n    containerWidth,\n    offsetType = OffsetType.CENTER,\n    addOffsetMargin = true,\n    outerSpacing = 0,\n    innerSpacing = 0\n  } = props;\n  const itemsWidths = useRef(_.times(itemsCount, () => null));\n  const itemsWidthsAnimated = useSharedValue(_.times(itemsCount, () => 0));\n  const itemsOffsetsAnimated = useSharedValue(_.times(itemsCount, () => 0));\n  const currentIndex = useRef(selectedIndex || 0);\n  const [offsets, setOffsets] = useState({\n    CENTER: [],\n    LEFT: [],\n    RIGHT: []\n  });\n  const {\n    scrollViewRef,\n    scrollTo,\n    onContentSizeChange,\n    onLayout\n  } = useScrollTo({\n    scrollViewRef: propsScrollViewRef\n  }); // TODO: reset?\n  //   useEffect(() => {\n  //     itemsWidths.current = _.times(itemsCount, () => null);\n  //   }, [itemsCount]);\n  // const contentWidth = _.sum(itemsWidths);\n  // TODO: const scrollEnabled = contentWidth.current > containerWidth;\n\n  const setSnapBreakpoints = useCallback(widths => {\n    if (_.isEmpty(widths)) {\n      return;\n    }\n\n    const screenCenter = containerWidth / 2;\n    let index = 0;\n    const centeredOffsets = [];\n    let currentCenterOffset = outerSpacing;\n    const leftOffsets = [];\n    leftOffsets.push(outerSpacing - innerSpacing);\n    const rightOffsets = [];\n    rightOffsets.push(-containerWidth + widths[0] + outerSpacing + innerSpacing);\n\n    while (index < itemsCount) {\n      /* map animated widths and offsets */\n      itemsWidthsAnimated.value[index] = widths[index];\n\n      if (index > 0) {\n        itemsOffsetsAnimated.value[index] = itemsOffsetsAnimated.value[index - 1] + itemsWidthsAnimated.value[index - 1];\n      }\n      /* calc center, left and right offsets */\n\n\n      centeredOffsets[index] = currentCenterOffset - screenCenter + widths[index] / 2;\n      ++index;\n      currentCenterOffset += widths[index - 1] + innerSpacing;\n      leftOffsets[index] = leftOffsets[index - 1] + widths[index - 1] + innerSpacing;\n      rightOffsets[index] = rightOffsets[index - 1] + widths[index] + innerSpacing;\n    }\n\n    if (addOffsetMargin) {\n      index = 1;\n\n      while (index < itemsCount - 1) {\n        leftOffsets[index] -= widths[index - 1];\n        rightOffsets[index] += widths[index + 1] + innerSpacing;\n        ++index;\n      }\n    }\n\n    setOffsets({\n      CENTER: centeredOffsets,\n      LEFT: leftOffsets,\n      RIGHT: rightOffsets\n    }); // default for DYNAMIC is CENTER\n    // trigger value change\n\n    itemsWidthsAnimated.value = [...itemsWidthsAnimated.value];\n    itemsOffsetsAnimated.value = [...itemsOffsetsAnimated.value];\n  }, [itemsCount, outerSpacing, innerSpacing, addOffsetMargin, containerWidth]);\n  const onItemLayout = useCallback((event, index) => {\n    const {\n      width\n    } = event.nativeEvent.layout;\n    itemsWidths.current[index] = width;\n\n    if (!_.includes(itemsWidths.current, null)) {\n      setSnapBreakpoints(itemsWidths.current);\n    }\n  }, [setSnapBreakpoints]);\n  const focusIndex = useCallback((index, animated = true) => {\n    if (index >= 0 && offsets.CENTER.length > index) {\n      if (offsetType !== OffsetType.DYNAMIC) {\n        scrollTo(offsets[offsetType][index], animated);\n      } else {\n        const movingLeft = index < currentIndex.current;\n        currentIndex.current = index;\n        scrollTo(movingLeft ? offsets[OffsetType.RIGHT][index] : offsets[OffsetType.LEFT][index], animated);\n      }\n    }\n  }, [offsets, offsetType, scrollTo]);\n  useEffect(() => {\n    if (!_.isUndefined(selectedIndex)) {\n      focusIndex(selectedIndex, false);\n    }\n  }, [selectedIndex, focusIndex]);\n  const reset = useCallback(() => {\n    for (let i = 0; i < itemsCount; ++i) {\n      itemsWidths.current[i] = null;\n      itemsWidthsAnimated.value[i] = 0;\n      itemsOffsetsAnimated.value[i] = 0;\n    }\n\n    setOffsets({\n      CENTER: [],\n      LEFT: [],\n      RIGHT: []\n    });\n  }, [itemsCount]);\n  return {\n    scrollViewRef,\n    onItemLayout,\n    itemsWidthsAnimated,\n    itemsOffsetsAnimated,\n    focusIndex,\n    reset,\n    onContentSizeChange,\n    onLayout\n  };\n};\n\nuseScrollToItem.offsetType = OffsetType;\nexport default useScrollToItem;"]},"metadata":{},"sourceType":"module"}