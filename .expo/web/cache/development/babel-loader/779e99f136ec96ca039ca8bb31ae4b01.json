{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"modifiers\", \"style\", \"center\", \"uppercase\", \"children\", \"forwardedRef\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport _ from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport { Colors } from \"../../style\";\n\nvar Text = function (_PureComponent) {\n  _inherits(Text, _PureComponent);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.TextContainer = _this.props.animated ? Animated.createAnimatedComponent(RNText) : RNText;\n    return _this;\n  }\n\n  _createClass(Text, [{\n    key: \"getPartsByHighlight\",\n    value: function getPartsByHighlight() {\n      var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var highlightString = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (typeof highlightString === 'string') {\n        if (_.isEmpty(highlightString.trim())) {\n          return [{\n            string: targetString,\n            shouldHighlight: false\n          }];\n        }\n\n        return this.getTextPartsByHighlight(targetString, highlightString);\n      } else {\n        return this.getArrayPartsByHighlight(targetString, highlightString);\n      }\n    }\n  }, {\n    key: \"getTextPartsByHighlight\",\n    value: function getTextPartsByHighlight() {\n      var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var highlightString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (highlightString === '') {\n        return [{\n          string: targetString,\n          shouldHighlight: false\n        }];\n      }\n\n      var textParts = [];\n      var highlightIndex;\n\n      do {\n        highlightIndex = targetString.toLowerCase().indexOf(highlightString.toLowerCase());\n\n        if (highlightIndex !== -1) {\n          if (highlightIndex > 0) {\n            textParts.push({\n              string: targetString.substring(0, highlightIndex),\n              shouldHighlight: false\n            });\n          }\n\n          textParts.push({\n            string: targetString.substr(highlightIndex, highlightString.length),\n            shouldHighlight: true\n          });\n          targetString = targetString.substr(highlightIndex + highlightString.length);\n        } else {\n          textParts.push({\n            string: targetString,\n            shouldHighlight: false\n          });\n        }\n      } while (highlightIndex !== -1);\n\n      return textParts;\n    }\n  }, {\n    key: \"getArrayPartsByHighlight\",\n    value: function getArrayPartsByHighlight() {\n      var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var highlightString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [''];\n\n      var target = _.toLower(targetString);\n\n      var indices = [];\n      var index = 0;\n      var lastWordLength = 0;\n\n      for (var j = 0; j < highlightString.length; j++) {\n        var word = _.toLower(highlightString[j]);\n\n        var targetSuffix = target.substring(index + lastWordLength);\n        var i = targetSuffix.indexOf(word);\n\n        if (i >= 0) {\n          var newIndex = index + lastWordLength + i;\n          indices.push({\n            start: index + lastWordLength + i,\n            end: index + lastWordLength + i + word.length\n          });\n          index = newIndex;\n          lastWordLength = word.length;\n        } else {\n          break;\n        }\n      }\n\n      var parts = [];\n\n      for (var k = 0; k < indices.length; k++) {\n        if (k === 0 && indices[k].start !== 0) {\n          parts.push({\n            string: targetString.substring(0, indices[k].start),\n            shouldHighlight: false\n          });\n        }\n\n        parts.push({\n          string: targetString.substring(indices[k].start, indices[k].end),\n          shouldHighlight: true\n        });\n\n        if (k === indices.length - 1) {\n          parts.push({\n            string: targetString.substring(indices[k].end),\n            shouldHighlight: false\n          });\n        } else {\n          parts.push({\n            string: targetString.substring(indices[k].end, indices[k + 1].start),\n            shouldHighlight: false\n          });\n        }\n      }\n\n      return parts;\n    }\n  }, {\n    key: \"renderText\",\n    value: function renderText(children) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          highlightString = _this$props.highlightString,\n          highlightStyle = _this$props.highlightStyle;\n\n      if (!_.isEmpty(highlightString)) {\n        if (_.isArray(children)) {\n          return _.map(children, function (child) {\n            return _this2.renderText(child);\n          });\n        }\n\n        if (_.isString(children)) {\n          var textParts = highlightString && this.getPartsByHighlight(children, highlightString);\n          return textParts && _.map(textParts, function (text, index) {\n            return React.createElement(RNText, {\n              key: index,\n              style: text.shouldHighlight ? [styles.highlight, highlightStyle] : styles.notHighlight\n            }, text.string);\n          });\n        }\n      }\n\n      return children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          modifiers = _this$props2.modifiers,\n          style = _this$props2.style,\n          center = _this$props2.center,\n          uppercase = _this$props2.uppercase,\n          children = _this$props2.children,\n          forwardedRef = _this$props2.forwardedRef,\n          others = _objectWithoutProperties(_this$props2, _excluded);\n\n      var color = this.props.color || modifiers.color;\n      var margins = modifiers.margins,\n          typography = modifiers.typography,\n          backgroundColor = modifiers.backgroundColor,\n          flexStyle = modifiers.flexStyle;\n      var textStyle = [styles.container, typography, color && {\n        color: color\n      }, backgroundColor && {\n        backgroundColor: backgroundColor\n      }, flexStyle, margins, center && styles.centered, uppercase && styles.uppercase, style];\n      var TextContainer = this.TextContainer;\n      return React.createElement(TextContainer, _extends({}, others, {\n        style: textStyle,\n        ref: forwardedRef\n      }), this.renderText(children));\n    }\n  }]);\n\n  return Text;\n}(PureComponent);\n\nText.propTypes = {\n  color: _pt.string,\n  center: _pt.bool,\n  uppercase: _pt.bool,\n  highlightString: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  animated: _pt.bool,\n  textAlign: _pt.string\n};\nText.displayName = 'Text';\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    textAlign: 'left'\n  },\n  centered: {\n    textAlign: 'center'\n  },\n  uppercase: {\n    textTransform: 'uppercase'\n  },\n  highlight: {\n    color: Colors.grey30\n  },\n  notHighlight: {\n    color: undefined\n  }\n});\nexport { Text };\nexport default asBaseComponent(forwardRef(Text));","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/text/index.js"],"names":["_pt","React","PureComponent","_","asBaseComponent","forwardRef","Colors","Text","TextContainer","props","animated","Animated","createAnimatedComponent","RNText","targetString","highlightString","isEmpty","trim","string","shouldHighlight","getTextPartsByHighlight","getArrayPartsByHighlight","textParts","highlightIndex","toLowerCase","indexOf","push","substring","substr","length","target","toLower","indices","index","lastWordLength","j","word","targetSuffix","i","newIndex","start","end","parts","k","children","highlightStyle","isArray","map","child","renderText","isString","getPartsByHighlight","text","styles","highlight","notHighlight","modifiers","style","center","uppercase","forwardedRef","others","color","margins","typography","backgroundColor","flexStyle","textStyle","container","centered","propTypes","bool","oneOfType","arrayOf","textAlign","displayName","StyleSheet","create","textTransform","grey30","undefined"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nimport { Text as RNText, StyleSheet, Animated } from 'react-native';\nimport _ from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport { Colors } from \"../../style\";\n\n/**\n * @description: A wrapper for Text component with extra functionality like modifiers support\n * @extends: Text\n * @extendsLink: https://reactnative.dev/docs/text\n * @modifiers: margins, color, typography\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextScreen.js\n * @image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Modifiers.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Transformation.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Highlights.png?raw=true\n */\nclass Text extends PureComponent {\n  static propTypes = {\n    /**\n         * color of the text\n         */\n    color: _pt.string,\n\n    /**\n         * whether to center the text (using textAlign)\n         */\n    center: _pt.bool,\n\n    /**\n         * whether to change the text to uppercase\n         */\n    uppercase: _pt.bool,\n\n    /**\n         * Substring to highlight\n         */\n    highlightString: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n\n    /**\n         * Use Animated.Text as a container\n         */\n    animated: _pt.bool,\n    textAlign: _pt.string\n  };\n  static displayName = 'Text';\n  TextContainer = this.props.animated ? Animated.createAnimatedComponent(RNText) : RNText; // setNativeProps(nativeProps) {\n  //   this._root.setNativeProps(nativeProps); // eslint-disable-line\n  // }\n\n  getPartsByHighlight(targetString = '', highlightString) {\n    if (typeof highlightString === 'string') {\n      if (_.isEmpty(highlightString.trim())) {\n        return [{\n          string: targetString,\n          shouldHighlight: false\n        }];\n      }\n\n      return this.getTextPartsByHighlight(targetString, highlightString);\n    } else {\n      return this.getArrayPartsByHighlight(targetString, highlightString);\n    }\n  }\n\n  getTextPartsByHighlight(targetString = '', highlightString = '') {\n    if (highlightString === '') {\n      return [{\n        string: targetString,\n        shouldHighlight: false\n      }];\n    }\n\n    const textParts = [];\n    let highlightIndex;\n\n    do {\n      highlightIndex = targetString.toLowerCase().indexOf(highlightString.toLowerCase());\n\n      if (highlightIndex !== -1) {\n        if (highlightIndex > 0) {\n          textParts.push({\n            string: targetString.substring(0, highlightIndex),\n            shouldHighlight: false\n          });\n        }\n\n        textParts.push({\n          string: targetString.substr(highlightIndex, highlightString.length),\n          shouldHighlight: true\n        });\n        targetString = targetString.substr(highlightIndex + highlightString.length);\n      } else {\n        textParts.push({\n          string: targetString,\n          shouldHighlight: false\n        });\n      }\n    } while (highlightIndex !== -1);\n\n    return textParts;\n  }\n\n  getArrayPartsByHighlight(targetString = '', highlightString = ['']) {\n    const target = _.toLower(targetString);\n\n    const indices = [];\n    let index = 0;\n    let lastWordLength = 0;\n\n    for (let j = 0; j < highlightString.length; j++) {\n      const word = _.toLower(highlightString[j]);\n\n      const targetSuffix = target.substring(index + lastWordLength);\n      const i = targetSuffix.indexOf(word);\n\n      if (i >= 0) {\n        const newIndex = index + lastWordLength + i;\n        indices.push({\n          start: index + lastWordLength + i,\n          end: index + lastWordLength + i + word.length\n        });\n        index = newIndex;\n        lastWordLength = word.length;\n      } else {\n        break;\n      }\n    }\n\n    const parts = [];\n\n    for (let k = 0; k < indices.length; k++) {\n      if (k === 0 && indices[k].start !== 0) {\n        parts.push({\n          string: targetString.substring(0, indices[k].start),\n          shouldHighlight: false\n        });\n      }\n\n      parts.push({\n        string: targetString.substring(indices[k].start, indices[k].end),\n        shouldHighlight: true\n      });\n\n      if (k === indices.length - 1) {\n        parts.push({\n          string: targetString.substring(indices[k].end),\n          shouldHighlight: false\n        });\n      } else {\n        parts.push({\n          string: targetString.substring(indices[k].end, indices[k + 1].start),\n          shouldHighlight: false\n        });\n      }\n    }\n\n    return parts;\n  }\n\n  renderText(children) {\n    const {\n      highlightString,\n      highlightStyle\n    } = this.props;\n\n    if (!_.isEmpty(highlightString)) {\n      if (_.isArray(children)) {\n        return _.map(children, child => {\n          return this.renderText(child);\n        });\n      }\n\n      if (_.isString(children)) {\n        const textParts = highlightString && this.getPartsByHighlight(children, highlightString);\n        return textParts && _.map(textParts, (text, index) => {\n          return <RNText key={index} style={text.shouldHighlight ? [styles.highlight, highlightStyle] : styles.notHighlight}>\n                {text.string}\n              </RNText>;\n        });\n      }\n    }\n\n    return children;\n  }\n\n  render() {\n    const {\n      modifiers,\n      style,\n      center,\n      uppercase,\n      children,\n      forwardedRef,\n      ...others\n    } = this.props;\n    const color = this.props.color || modifiers.color;\n    const {\n      margins,\n      typography,\n      backgroundColor,\n      flexStyle\n    } = modifiers;\n    const textStyle = [styles.container, typography, color && {\n      color\n    }, backgroundColor && {\n      backgroundColor\n    }, flexStyle, margins, center && styles.centered, uppercase && styles.uppercase, style];\n    const TextContainer = this.TextContainer;\n    return <TextContainer {...others} style={textStyle} ref={forwardedRef}>\n        {this.renderText(children)}\n      </TextContainer>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    textAlign: 'left'\n  },\n  centered: {\n    textAlign: 'center'\n  },\n  uppercase: {\n    textTransform: 'uppercase'\n  },\n  highlight: {\n    color: Colors.grey30\n  },\n  notHighlight: {\n    color: undefined\n  }\n});\nexport { Text }; // For tests\n\nexport default asBaseComponent(forwardRef(Text));"]},"metadata":{},"sourceType":"module"}