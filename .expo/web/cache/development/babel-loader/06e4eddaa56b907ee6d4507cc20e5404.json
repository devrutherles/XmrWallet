{"ast":null,"code":"import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useEffect, useRef, useCallback, useContext } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Constants } from \"../../helpers\";\nimport View from \"../view\";\nimport PanningContext from \"../panningViews/panningContext\";\nimport PanningProvider from \"../panningViews/panningProvider\";\nimport PanResponderView from \"../panningViews/panResponderView\";\nvar MAXIMUM_DRAGS_AFTER_SWIPE = 2;\nvar DEFAULT_DIRECTION = PanningProvider.Directions.DOWN;\n\nvar DialogDismissibleView = function DialogDismissibleView(props) {\n  var _props$direction = props.direction,\n      direction = _props$direction === void 0 ? DEFAULT_DIRECTION : _props$direction,\n      propsVisible = props.visible,\n      containerStyle = props.containerStyle,\n      style = props.style,\n      children = props.children,\n      onDismiss = props.onDismiss;\n\n  var _useContext = useContext(PanningContext),\n      isPanning = _useContext.isPanning,\n      dragDeltas = _useContext.dragDeltas,\n      swipeDirections = _useContext.swipeDirections;\n\n  var width = useRef(Constants.screenWidth);\n  var height = useRef(Constants.screenHeight);\n  var TOP_INSET = useRef(Constants.isIphoneX ? Constants.getSafeAreaInsets().top : Constants.isIOS ? 20 : 0);\n  var BOTTOM_INSET = useRef(Constants.isIphoneX ? Constants.getSafeAreaInsets().bottom : Constants.isIOS ? 20 : 0);\n  var thresholdX = useRef(0);\n  var thresholdY = useRef(0);\n  var dragsCounter = useRef(0);\n  var containerRef = useRef();\n  var animatedValue = useRef(new Animated.Value(0));\n  var mutableSwipeDirections = useRef({});\n  var prevDragDeltas = useRef();\n  var prevSwipeDirections = useRef();\n  var visible = useRef(Boolean(propsVisible));\n  var getHiddenLocation = useCallback(function (left, top) {\n    var result = {\n      left: 0,\n      top: 0\n    };\n\n    switch (direction) {\n      case PanningProvider.Directions.LEFT:\n        result.left = -left - width.current;\n        break;\n\n      case PanningProvider.Directions.RIGHT:\n        result.left = Constants.screenWidth - left;\n        break;\n\n      case PanningProvider.Directions.UP:\n        result.top = -top - height.current - TOP_INSET.current;\n        break;\n\n      case PanningProvider.Directions.DOWN:\n      default:\n        result.top = Constants.screenHeight - top + BOTTOM_INSET.current;\n        break;\n    }\n\n    return result;\n  }, [direction]);\n  var hiddenLocation = useRef(getHiddenLocation(0, 0));\n  var animateTo = useCallback(function (toValue, animationEndCallback) {\n    Animated.timing(animatedValue.current, {\n      toValue: toValue,\n      duration: 300,\n      easing: Easing.bezier(0.2, 0, 0.35, 1),\n      useNativeDriver: true\n    }).start(animationEndCallback);\n  }, []);\n  var isSwiping = useCallback(function () {\n    return !_.isUndefined(mutableSwipeDirections.current.x) || !_.isUndefined(mutableSwipeDirections.current.y);\n  }, []);\n  var resetSwipe = useCallback(function () {\n    dragsCounter.current = 0;\n    mutableSwipeDirections.current = {};\n  }, []);\n  var onDrag = useCallback(function () {\n    if (isSwiping()) {\n      if (dragsCounter.current < MAXIMUM_DRAGS_AFTER_SWIPE) {\n        dragsCounter.current += 1;\n      } else {\n        resetSwipe();\n      }\n    }\n  }, [isSwiping, resetSwipe]);\n  var hide = useCallback(function () {\n    animateTo(0, function () {\n      visible.current = false;\n      onDismiss == null ? void 0 : onDismiss();\n    });\n  }, [animateTo, onDismiss]);\n  useEffect(function () {\n    var _prevDragDeltas$curre, _prevDragDeltas$curre2;\n\n    if (isPanning && (dragDeltas.x || dragDeltas.y) && (dragDeltas.x !== ((_prevDragDeltas$curre = prevDragDeltas.current) == null ? void 0 : _prevDragDeltas$curre.x) || dragDeltas.y !== ((_prevDragDeltas$curre2 = prevDragDeltas.current) == null ? void 0 : _prevDragDeltas$curre2.y))) {\n      onDrag();\n      prevDragDeltas.current = dragDeltas;\n    }\n  }, [isPanning, dragDeltas, onDrag, hide]);\n  useEffect(function () {\n    var _prevSwipeDirections$, _prevSwipeDirections$2;\n\n    if (isPanning && (swipeDirections.x || swipeDirections.y) && (swipeDirections.x !== ((_prevSwipeDirections$ = prevSwipeDirections.current) == null ? void 0 : _prevSwipeDirections$.x) || swipeDirections.y !== ((_prevSwipeDirections$2 = prevSwipeDirections.current) == null ? void 0 : _prevSwipeDirections$2.y))) {\n      mutableSwipeDirections.current = swipeDirections;\n    }\n  }, [isPanning, swipeDirections, hide]);\n  useEffect(function () {\n    if (visible.current && !propsVisible) {\n      hide();\n    }\n  }, [propsVisible, hide]);\n  var onLayout = useCallback(function (event) {\n    var layout = event.nativeEvent.layout;\n    width.current = layout.width;\n    height.current = layout.height;\n    thresholdX.current = width.current / 2;\n    thresholdY.current = height.current / 2;\n\n    if (containerRef.current) {\n      containerRef.current.measureInWindow(function (x, y) {\n        hiddenLocation.current = getHiddenLocation(x, y);\n        animateTo(1);\n      });\n    }\n  }, [getHiddenLocation, animateTo]);\n  var getAnimationStyle = useCallback(function () {\n    return {\n      transform: [{\n        translateX: animatedValue.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [hiddenLocation.current.left, 0]\n        })\n      }, {\n        translateY: animatedValue.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [hiddenLocation.current.top, 0]\n        })\n      }]\n    };\n  }, []);\n  var resetToShown = useCallback(function (left, top, direction) {\n    var toValue = [PanningProvider.Directions.LEFT, PanningProvider.Directions.RIGHT].includes(direction) ? 1 + left / hiddenLocation.current.left : 1 + top / hiddenLocation.current.top;\n    animateTo(toValue);\n  }, [animateTo]);\n  var onPanLocationChanged = useCallback(function (_ref) {\n    var _ref$left = _ref.left,\n        left = _ref$left === void 0 ? 0 : _ref$left,\n        _ref$top = _ref.top,\n        top = _ref$top === void 0 ? 0 : _ref$top;\n    var endValue = {\n      x: Math.round(left),\n      y: Math.round(top)\n    };\n\n    if (isSwiping()) {\n      hide();\n    } else {\n      resetSwipe();\n\n      if (direction === PanningProvider.Directions.LEFT && endValue.x <= -thresholdX.current || direction === PanningProvider.Directions.RIGHT && endValue.x >= thresholdX.current || direction === PanningProvider.Directions.UP && endValue.y <= -thresholdY.current || direction === PanningProvider.Directions.DOWN && endValue.y >= thresholdY.current) {\n        hide();\n      } else {\n        resetToShown(left, top, direction);\n      }\n    }\n  }, [isSwiping, hide, resetSwipe, direction, resetToShown]);\n  return React.createElement(View, {\n    ref: containerRef,\n    style: containerStyle,\n    onLayout: onLayout\n  }, React.createElement(PanResponderView, {\n    style: [style, getAnimationStyle(), !visible.current && styles.hidden],\n    isAnimated: true,\n    onPanLocationChanged: onPanLocationChanged\n  }, children));\n};\n\nDialogDismissibleView.propTypes = {\n  onDismiss: _pt.func,\n  visible: _pt.bool,\n  children: _pt.oneOfType([_pt.node, _pt.arrayOf(_pt.node)])\n};\nDialogDismissibleView.displayName = 'IGNORE';\nDialogDismissibleView.defaultProps = {\n  direction: DEFAULT_DIRECTION,\n  onDismiss: function onDismiss() {}\n};\nexport default DialogDismissibleView;\nvar styles = StyleSheet.create({\n  hidden: {\n    opacity: 0\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/dialog/DialogDismissibleView.js"],"names":["_pt","_","React","useEffect","useRef","useCallback","useContext","Constants","View","PanningContext","PanningProvider","PanResponderView","MAXIMUM_DRAGS_AFTER_SWIPE","DEFAULT_DIRECTION","Directions","DOWN","DialogDismissibleView","props","direction","propsVisible","visible","containerStyle","style","children","onDismiss","isPanning","dragDeltas","swipeDirections","width","screenWidth","height","screenHeight","TOP_INSET","isIphoneX","getSafeAreaInsets","top","isIOS","BOTTOM_INSET","bottom","thresholdX","thresholdY","dragsCounter","containerRef","animatedValue","Animated","Value","mutableSwipeDirections","prevDragDeltas","prevSwipeDirections","Boolean","getHiddenLocation","left","result","LEFT","current","RIGHT","UP","hiddenLocation","animateTo","toValue","animationEndCallback","timing","duration","easing","Easing","bezier","useNativeDriver","start","isSwiping","isUndefined","x","y","resetSwipe","onDrag","hide","onLayout","event","layout","nativeEvent","measureInWindow","getAnimationStyle","transform","translateX","interpolate","inputRange","outputRange","translateY","resetToShown","includes","onPanLocationChanged","endValue","Math","round","styles","hidden","propTypes","func","bool","oneOfType","node","arrayOf","displayName","defaultProps","StyleSheet","create","opacity"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,WAAnC,EAAgDC,UAAhD,QAAkE,OAAlE;;;;AAEA,SAASC,SAAT;AACA,OAAOC,IAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AACA,OAAOC,gBAAP;AACA,IAAMC,yBAAyB,GAAG,CAAlC;AAEA,IAAMC,iBAAiB,GAAGH,eAAe,CAACI,UAAhB,CAA2BC,IAArD;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,KAAK,EAAI;AACrC,yBAOIA,KAPJ,CACEC,SADF;AAAA,MACEA,SADF,iCACcL,iBADd;AAAA,MAEWM,YAFX,GAOIF,KAPJ,CAEEG,OAFF;AAAA,MAGEC,cAHF,GAOIJ,KAPJ,CAGEI,cAHF;AAAA,MAIEC,KAJF,GAOIL,KAPJ,CAIEK,KAJF;AAAA,MAKEC,QALF,GAOIN,KAPJ,CAKEM,QALF;AAAA,MAMEC,SANF,GAOIP,KAPJ,CAMEO,SANF;;AASA,oBAIIlB,UAAU,CAACG,cAAD,CAJd;AAAA,MACEgB,SADF,eACEA,SADF;AAAA,MAEEC,UAFF,eAEEA,UAFF;AAAA,MAGEC,eAHF,eAGEA,eAHF;;AAKA,MAAMC,KAAK,GAAGxB,MAAM,CAACG,SAAS,CAACsB,WAAX,CAApB;AACA,MAAMC,MAAM,GAAG1B,MAAM,CAACG,SAAS,CAACwB,YAAX,CAArB;AACA,MAAMC,SAAS,GAAG5B,MAAM,CAACG,SAAS,CAAC0B,SAAV,GAAsB1B,SAAS,CAAC2B,iBAAV,GAA8BC,GAApD,GAA0D5B,SAAS,CAAC6B,KAAV,GAAkB,EAAlB,GAAuB,CAAlF,CAAxB;AACA,MAAMC,YAAY,GAAGjC,MAAM,CAACG,SAAS,CAAC0B,SAAV,GAAsB1B,SAAS,CAAC2B,iBAAV,GAA8BI,MAApD,GAA6D/B,SAAS,CAAC6B,KAAV,GAAkB,EAAlB,GAAuB,CAArF,CAA3B;AACA,MAAMG,UAAU,GAAGnC,MAAM,CAAC,CAAD,CAAzB;AACA,MAAMoC,UAAU,GAAGpC,MAAM,CAAC,CAAD,CAAzB;AACA,MAAMqC,YAAY,GAAGrC,MAAM,CAAC,CAAD,CAA3B;AACA,MAAMsC,YAAY,GAAGtC,MAAM,EAA3B;AACA,MAAMuC,aAAa,GAAGvC,MAAM,CAAC,IAAIwC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAA5B;AACA,MAAMC,sBAAsB,GAAG1C,MAAM,CAAC,EAAD,CAArC;AACA,MAAM2C,cAAc,GAAG3C,MAAM,EAA7B;AACA,MAAM4C,mBAAmB,GAAG5C,MAAM,EAAlC;AACA,MAAMgB,OAAO,GAAGhB,MAAM,CAAC6C,OAAO,CAAC9B,YAAD,CAAR,CAAtB;AACA,MAAM+B,iBAAiB,GAAG7C,WAAW,CAAC,UAAC8C,IAAD,EAAOhB,GAAP,EAAe;AACnD,QAAMiB,MAAM,GAAG;AACbD,MAAAA,IAAI,EAAE,CADO;AAEbhB,MAAAA,GAAG,EAAE;AAFQ,KAAf;;AAKA,YAAQjB,SAAR;AACE,WAAKR,eAAe,CAACI,UAAhB,CAA2BuC,IAAhC;AACED,QAAAA,MAAM,CAACD,IAAP,GAAc,CAACA,IAAD,GAAQvB,KAAK,CAAC0B,OAA5B;AACA;;AAEF,WAAK5C,eAAe,CAACI,UAAhB,CAA2ByC,KAAhC;AACEH,QAAAA,MAAM,CAACD,IAAP,GAAc5C,SAAS,CAACsB,WAAV,GAAwBsB,IAAtC;AACA;;AAEF,WAAKzC,eAAe,CAACI,UAAhB,CAA2B0C,EAAhC;AACEJ,QAAAA,MAAM,CAACjB,GAAP,GAAa,CAACA,GAAD,GAAOL,MAAM,CAACwB,OAAd,GAAwBtB,SAAS,CAACsB,OAA/C;AACA;;AAEF,WAAK5C,eAAe,CAACI,UAAhB,CAA2BC,IAAhC;AACA;AACEqC,QAAAA,MAAM,CAACjB,GAAP,GAAa5B,SAAS,CAACwB,YAAV,GAAyBI,GAAzB,GAA+BE,YAAY,CAACiB,OAAzD;AACA;AAhBJ;;AAmBA,WAAOF,MAAP;AACD,GA1BoC,EA0BlC,CAAClC,SAAD,CA1BkC,CAArC;AA2BA,MAAMuC,cAAc,GAAGrD,MAAM,CAAC8C,iBAAiB,CAAC,CAAD,EAAI,CAAJ,CAAlB,CAA7B;AACA,MAAMQ,SAAS,GAAGrD,WAAW,CAAC,UAACsD,OAAD,EAAUC,oBAAV,EAAmC;AAC/DhB,IAAAA,QAAQ,CAACiB,MAAT,CAAgBlB,aAAa,CAACW,OAA9B,EAAuC;AACrCK,MAAAA,OAAO,EAAPA,OADqC;AAErCG,MAAAA,QAAQ,EAAE,GAF2B;AAGrCC,MAAAA,MAAM,EAAEC,MAAM,CAACC,MAAP,CAAc,GAAd,EAAmB,CAAnB,EAAsB,IAAtB,EAA4B,CAA5B,CAH6B;AAIrCC,MAAAA,eAAe,EAAE;AAJoB,KAAvC,EAKGC,KALH,CAKSP,oBALT;AAMD,GAP4B,EAO1B,EAP0B,CAA7B;AAQA,MAAMQ,SAAS,GAAG/D,WAAW,CAAC,YAAM;AAClC,WAAO,CAACJ,CAAC,CAACoE,WAAF,CAAcvB,sBAAsB,CAACQ,OAAvB,CAA+BgB,CAA7C,CAAD,IAAoD,CAACrE,CAAC,CAACoE,WAAF,CAAcvB,sBAAsB,CAACQ,OAAvB,CAA+BiB,CAA7C,CAA5D;AACD,GAF4B,EAE1B,EAF0B,CAA7B;AAGA,MAAMC,UAAU,GAAGnE,WAAW,CAAC,YAAM;AACnCoC,IAAAA,YAAY,CAACa,OAAb,GAAuB,CAAvB;AACAR,IAAAA,sBAAsB,CAACQ,OAAvB,GAAiC,EAAjC;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAIA,MAAMmB,MAAM,GAAGpE,WAAW,CAAC,YAAM;AAC/B,QAAI+D,SAAS,EAAb,EAAiB;AACf,UAAI3B,YAAY,CAACa,OAAb,GAAuB1C,yBAA3B,EAAsD;AACpD6B,QAAAA,YAAY,CAACa,OAAb,IAAwB,CAAxB;AACD,OAFD,MAEO;AACLkB,QAAAA,UAAU;AACX;AACF;AACF,GARyB,EAQvB,CAACJ,SAAD,EAAYI,UAAZ,CARuB,CAA1B;AASA,MAAME,IAAI,GAAGrE,WAAW,CAAC,YAAM;AAE7BqD,IAAAA,SAAS,CAAC,CAAD,EAAI,YAAM;AACjBtC,MAAAA,OAAO,CAACkC,OAAR,GAAkB,KAAlB;AACA9B,MAAAA,SAAS,QAAT,YAAAA,SAAS;AACV,KAHQ,CAAT;AAID,GANuB,EAMrB,CAACkC,SAAD,EAAYlC,SAAZ,CANqB,CAAxB;AAOArB,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAIsB,SAAS,KAAKC,UAAU,CAAC4C,CAAX,IAAgB5C,UAAU,CAAC6C,CAAhC,CAAT,KAAgD7C,UAAU,CAAC4C,CAAX,+BAAiBvB,cAAc,CAACO,OAAhC,qBAAiB,sBAAwBgB,CAAzC,KAA8C5C,UAAU,CAAC6C,CAAX,gCAAiBxB,cAAc,CAACO,OAAhC,qBAAiB,uBAAwBiB,CAAzC,CAA9F,CAAJ,EAA+I;AAC7IE,MAAAA,MAAM;AACN1B,MAAAA,cAAc,CAACO,OAAf,GAAyB5B,UAAzB;AACD;AACF,GALQ,EAKN,CAACD,SAAD,EAAYC,UAAZ,EAAwB+C,MAAxB,EAAgCC,IAAhC,CALM,CAAT;AAMAvE,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAIsB,SAAS,KAAKE,eAAe,CAAC2C,CAAhB,IAAqB3C,eAAe,CAAC4C,CAA1C,CAAT,KAA0D5C,eAAe,CAAC2C,CAAhB,+BAAsBtB,mBAAmB,CAACM,OAA1C,qBAAsB,sBAA6BgB,CAAnD,KAAwD3C,eAAe,CAAC4C,CAAhB,gCAAsBvB,mBAAmB,CAACM,OAA1C,qBAAsB,uBAA6BiB,CAAnD,CAAlH,CAAJ,EAA6K;AAC3KzB,MAAAA,sBAAsB,CAACQ,OAAvB,GAAiC3B,eAAjC;AACD;AACF,GAJQ,EAIN,CAACF,SAAD,EAAYE,eAAZ,EAA6B+C,IAA7B,CAJM,CAAT;AAKAvE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIiB,OAAO,CAACkC,OAAR,IAAmB,CAACnC,YAAxB,EAAsC;AACpCuD,MAAAA,IAAI;AACL;AACF,GAJQ,EAIN,CAACvD,YAAD,EAAeuD,IAAf,CAJM,CAAT;AAKA,MAAMC,QAAQ,GAAGtE,WAAW,CAAC,UAAAuE,KAAK,EAAI;AAEpC,QAAMC,MAAM,GAAGD,KAAK,CAACE,WAAN,CAAkBD,MAAjC;AACAjD,IAAAA,KAAK,CAAC0B,OAAN,GAAgBuB,MAAM,CAACjD,KAAvB;AACAE,IAAAA,MAAM,CAACwB,OAAP,GAAiBuB,MAAM,CAAC/C,MAAxB;AACAS,IAAAA,UAAU,CAACe,OAAX,GAAqB1B,KAAK,CAAC0B,OAAN,GAAgB,CAArC;AACAd,IAAAA,UAAU,CAACc,OAAX,GAAqBxB,MAAM,CAACwB,OAAP,GAAiB,CAAtC;;AAEA,QAAIZ,YAAY,CAACY,OAAjB,EAA0B;AAExBZ,MAAAA,YAAY,CAACY,OAAb,CAAqByB,eAArB,CAAqC,UAACT,CAAD,EAAIC,CAAJ,EAAU;AAC7Cd,QAAAA,cAAc,CAACH,OAAf,GAAyBJ,iBAAiB,CAACoB,CAAD,EAAIC,CAAJ,CAA1C;AACAb,QAAAA,SAAS,CAAC,CAAD,CAAT;AACD,OAHD;AAID;AACF,GAf2B,EAezB,CAACR,iBAAD,EAAoBQ,SAApB,CAfyB,CAA5B;AAgBA,MAAMsB,iBAAiB,GAAG3E,WAAW,CAAC,YAAM;AAC1C,WAAO;AACL4E,MAAAA,SAAS,EAAE,CAAC;AACVC,QAAAA,UAAU,EAAEvC,aAAa,CAACW,OAAd,CAAsB6B,WAAtB,CAAkC;AAC5CC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADgC;AAE5CC,UAAAA,WAAW,EAAE,CAAC5B,cAAc,CAACH,OAAf,CAAuBH,IAAxB,EAA8B,CAA9B;AAF+B,SAAlC;AADF,OAAD,EAKR;AACDmC,QAAAA,UAAU,EAAE3C,aAAa,CAACW,OAAd,CAAsB6B,WAAtB,CAAkC;AAC5CC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADgC;AAE5CC,UAAAA,WAAW,EAAE,CAAC5B,cAAc,CAACH,OAAf,CAAuBnB,GAAxB,EAA6B,CAA7B;AAF+B,SAAlC;AADX,OALQ;AADN,KAAP;AAaD,GAdoC,EAclC,EAdkC,CAArC;AAeA,MAAMoD,YAAY,GAAGlF,WAAW,CAAC,UAAC8C,IAAD,EAAOhB,GAAP,EAAYjB,SAAZ,EAA0B;AACzD,QAAMyC,OAAO,GACb,CAACjD,eAAe,CAACI,UAAhB,CAA2BuC,IAA5B,EAAkC3C,eAAe,CAACI,UAAhB,CAA2ByC,KAA7D,EAAoEiC,QAApE,CAA6EtE,SAA7E,IAA0F,IAAIiC,IAAI,GAAGM,cAAc,CAACH,OAAf,CAAuBH,IAA5H,GAAmI,IAAIhB,GAAG,GAAGsB,cAAc,CAACH,OAAf,CAAuBnB,GADpK;AAEAuB,IAAAA,SAAS,CAACC,OAAD,CAAT;AACD,GAJ+B,EAI7B,CAACD,SAAD,CAJ6B,CAAhC;AAKA,MAAM+B,oBAAoB,GAAGpF,WAAW,CAAC,gBAGnC;AAAA,yBAFJ8C,IAEI;AAAA,QAFJA,IAEI,0BAFG,CAEH;AAAA,wBADJhB,GACI;AAAA,QADJA,GACI,yBADE,CACF;AACJ,QAAMuD,QAAQ,GAAG;AACfpB,MAAAA,CAAC,EAAEqB,IAAI,CAACC,KAAL,CAAWzC,IAAX,CADY;AAEfoB,MAAAA,CAAC,EAAEoB,IAAI,CAACC,KAAL,CAAWzD,GAAX;AAFY,KAAjB;;AAKA,QAAIiC,SAAS,EAAb,EAAiB;AACfM,MAAAA,IAAI;AACL,KAFD,MAEO;AACLF,MAAAA,UAAU;;AAEV,UAAItD,SAAS,KAAKR,eAAe,CAACI,UAAhB,CAA2BuC,IAAzC,IAAiDqC,QAAQ,CAACpB,CAAT,IAAc,CAAC/B,UAAU,CAACe,OAA3E,IAAsFpC,SAAS,KAAKR,eAAe,CAACI,UAAhB,CAA2ByC,KAAzC,IAAkDmC,QAAQ,CAACpB,CAAT,IAAc/B,UAAU,CAACe,OAAjK,IAA4KpC,SAAS,KAAKR,eAAe,CAACI,UAAhB,CAA2B0C,EAAzC,IAA+CkC,QAAQ,CAACnB,CAAT,IAAc,CAAC/B,UAAU,CAACc,OAArP,IAAgQpC,SAAS,KAAKR,eAAe,CAACI,UAAhB,CAA2BC,IAAzC,IAAiD2E,QAAQ,CAACnB,CAAT,IAAc/B,UAAU,CAACc,OAA9U,EAAuV;AACrVoB,QAAAA,IAAI;AACL,OAFD,MAEO;AACLa,QAAAA,YAAY,CAACpC,IAAD,EAAOhB,GAAP,EAAYjB,SAAZ,CAAZ;AACD;AACF;AACF,GApBuC,EAoBrC,CAACkD,SAAD,EAAYM,IAAZ,EAAkBF,UAAlB,EAA8BtD,SAA9B,EAAyCqE,YAAzC,CApBqC,CAAxC;AAqBA,SACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAE7C,YAAX;AAAyB,IAAA,KAAK,EAAErB,cAAhC;AAAgD,IAAA,QAAQ,EAAEsD;AAA1D,KACE,oBAAC,gBAAD;AACA,IAAA,KAAK,EAAE,CAACrD,KAAD,EAAQ0D,iBAAiB,EAAzB,EAA6B,CAAC5D,OAAO,CAACkC,OAAT,IAAoBuC,MAAM,CAACC,MAAxD,CADP;AACwE,IAAA,UAAU,MADlF;AACmF,IAAA,oBAAoB,EAAEL;AADzG,KAEGlE,QAFH,CADF,CADF;AAQD,CAxKD;;AA0KAP,qBAAqB,CAAC+E,SAAtB,GAAkC;AAIhCvE,EAAAA,SAAS,EAAExB,GAAG,CAACgG,IAJiB;AAShC5E,EAAAA,OAAO,EAAEpB,GAAG,CAACiG,IATmB;AAUhC1E,EAAAA,QAAQ,EAAEvB,GAAG,CAACkG,SAAJ,CAAc,CAAClG,GAAG,CAACmG,IAAL,EAAWnG,GAAG,CAACoG,OAAJ,CAAYpG,GAAG,CAACmG,IAAhB,CAAX,CAAd;AAVsB,CAAlC;AAYAnF,qBAAqB,CAACqF,WAAtB,GAAoC,QAApC;AACArF,qBAAqB,CAACsF,YAAtB,GAAqC;AACnCpF,EAAAA,SAAS,EAAEL,iBADwB;AAEnCW,EAAAA,SAAS,EAAE,qBAAM,CAAE;AAFgB,CAArC;AAIA,eAAeR,qBAAf;AACA,IAAM6E,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC/BV,EAAAA,MAAM,EAAE;AACNW,IAAAA,OAAO,EAAE;AADH;AADuB,CAAlB,CAAf","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useEffect, useRef, useCallback, useContext } from 'react';\nimport { Animated, Easing, StyleSheet } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport View from \"../view\";\nimport PanningContext from \"../panningViews/panningContext\";\nimport PanningProvider from \"../panningViews/panningProvider\";\nimport PanResponderView from \"../panningViews/panResponderView\";\nconst MAXIMUM_DRAGS_AFTER_SWIPE = 2; // TODO: move this to panningContext\n\nconst DEFAULT_DIRECTION = PanningProvider.Directions.DOWN;\n\nconst DialogDismissibleView = props => {\n  const {\n    direction = DEFAULT_DIRECTION,\n    visible: propsVisible,\n    containerStyle,\n    style,\n    children,\n    onDismiss\n  } = props; // @ts-expect-error\n\n  const {\n    isPanning,\n    dragDeltas,\n    swipeDirections\n  } = useContext(PanningContext);\n  const width = useRef(Constants.screenWidth);\n  const height = useRef(Constants.screenHeight);\n  const TOP_INSET = useRef(Constants.isIphoneX ? Constants.getSafeAreaInsets().top : Constants.isIOS ? 20 : 0);\n  const BOTTOM_INSET = useRef(Constants.isIphoneX ? Constants.getSafeAreaInsets().bottom : Constants.isIOS ? 20 : 0);\n  const thresholdX = useRef(0);\n  const thresholdY = useRef(0);\n  const dragsCounter = useRef(0);\n  const containerRef = useRef();\n  const animatedValue = useRef(new Animated.Value(0));\n  const mutableSwipeDirections = useRef({});\n  const prevDragDeltas = useRef();\n  const prevSwipeDirections = useRef();\n  const visible = useRef(Boolean(propsVisible));\n  const getHiddenLocation = useCallback((left, top) => {\n    const result = {\n      left: 0,\n      top: 0\n    };\n\n    switch (direction) {\n      case PanningProvider.Directions.LEFT:\n        result.left = -left - width.current;\n        break;\n\n      case PanningProvider.Directions.RIGHT:\n        result.left = Constants.screenWidth - left;\n        break;\n\n      case PanningProvider.Directions.UP:\n        result.top = -top - height.current - TOP_INSET.current;\n        break;\n\n      case PanningProvider.Directions.DOWN:\n      default:\n        result.top = Constants.screenHeight - top + BOTTOM_INSET.current;\n        break;\n    }\n\n    return result;\n  }, [direction]);\n  const hiddenLocation = useRef(getHiddenLocation(0, 0));\n  const animateTo = useCallback((toValue, animationEndCallback) => {\n    Animated.timing(animatedValue.current, {\n      toValue,\n      duration: 300,\n      easing: Easing.bezier(0.2, 0, 0.35, 1),\n      useNativeDriver: true\n    }).start(animationEndCallback);\n  }, []);\n  const isSwiping = useCallback(() => {\n    return !_.isUndefined(mutableSwipeDirections.current.x) || !_.isUndefined(mutableSwipeDirections.current.y);\n  }, []);\n  const resetSwipe = useCallback(() => {\n    dragsCounter.current = 0;\n    mutableSwipeDirections.current = {};\n  }, []);\n  const onDrag = useCallback(() => {\n    if (isSwiping()) {\n      if (dragsCounter.current < MAXIMUM_DRAGS_AFTER_SWIPE) {\n        dragsCounter.current += 1;\n      } else {\n        resetSwipe();\n      }\n    }\n  }, [isSwiping, resetSwipe]);\n  const hide = useCallback(() => {\n    // TODO: test we're not animating?\n    animateTo(0, () => {\n      visible.current = false;\n      onDismiss?.();\n    });\n  }, [animateTo, onDismiss]);\n  useEffect(() => {\n    if (isPanning && (dragDeltas.x || dragDeltas.y) && (dragDeltas.x !== prevDragDeltas.current?.x || dragDeltas.y !== prevDragDeltas.current?.y)) {\n      onDrag();\n      prevDragDeltas.current = dragDeltas;\n    }\n  }, [isPanning, dragDeltas, onDrag, hide]);\n  useEffect(() => {\n    if (isPanning && (swipeDirections.x || swipeDirections.y) && (swipeDirections.x !== prevSwipeDirections.current?.x || swipeDirections.y !== prevSwipeDirections.current?.y)) {\n      mutableSwipeDirections.current = swipeDirections;\n    }\n  }, [isPanning, swipeDirections, hide]);\n  useEffect(() => {\n    if (visible.current && !propsVisible) {\n      hide();\n    }\n  }, [propsVisible, hide]);\n  const onLayout = useCallback(event => {\n    // DO NOT move the width\\height into the measureInWindow - it causes errors with orientation change\n    const layout = event.nativeEvent.layout;\n    width.current = layout.width;\n    height.current = layout.height;\n    thresholdX.current = width.current / 2;\n    thresholdY.current = height.current / 2;\n\n    if (containerRef.current) {\n      // @ts-ignore TODO: can we fix this on ViewProps \\ View?\n      containerRef.current.measureInWindow((x, y) => {\n        hiddenLocation.current = getHiddenLocation(x, y);\n        animateTo(1);\n      });\n    }\n  }, [getHiddenLocation, animateTo]);\n  const getAnimationStyle = useCallback(() => {\n    return {\n      transform: [{\n        translateX: animatedValue.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [hiddenLocation.current.left, 0]\n        })\n      }, {\n        translateY: animatedValue.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [hiddenLocation.current.top, 0]\n        })\n      }]\n    };\n  }, []);\n  const resetToShown = useCallback((left, top, direction) => {\n    const toValue = //@ts-expect-error\n    [PanningProvider.Directions.LEFT, PanningProvider.Directions.RIGHT].includes(direction) ? 1 + left / hiddenLocation.current.left : 1 + top / hiddenLocation.current.top;\n    animateTo(toValue);\n  }, [animateTo]);\n  const onPanLocationChanged = useCallback(({\n    left = 0,\n    top = 0\n  }) => {\n    const endValue = {\n      x: Math.round(left),\n      y: Math.round(top)\n    };\n\n    if (isSwiping()) {\n      hide();\n    } else {\n      resetSwipe();\n\n      if (direction === PanningProvider.Directions.LEFT && endValue.x <= -thresholdX.current || direction === PanningProvider.Directions.RIGHT && endValue.x >= thresholdX.current || direction === PanningProvider.Directions.UP && endValue.y <= -thresholdY.current || direction === PanningProvider.Directions.DOWN && endValue.y >= thresholdY.current) {\n        hide();\n      } else {\n        resetToShown(left, top, direction);\n      }\n    }\n  }, [isSwiping, hide, resetSwipe, direction, resetToShown]);\n  return (// @ts-ignore\n    <View ref={containerRef} style={containerStyle} onLayout={onLayout}>\n      <PanResponderView // !visible.current && styles.hidden is done to fix a bug is iOS\n      style={[style, getAnimationStyle(), !visible.current && styles.hidden]} isAnimated onPanLocationChanged={onPanLocationChanged}>\n        {children}\n      </PanResponderView>\n    </View>\n  );\n};\n\nDialogDismissibleView.propTypes = {\n  /**\n     * onDismiss callback\n     */\n  onDismiss: _pt.func,\n\n  /**\n     * Whether to show the dialog or not\n     */\n  visible: _pt.bool,\n  children: _pt.oneOfType([_pt.node, _pt.arrayOf(_pt.node)])\n};\nDialogDismissibleView.displayName = 'IGNORE';\nDialogDismissibleView.defaultProps = {\n  direction: DEFAULT_DIRECTION,\n  onDismiss: () => {}\n};\nexport default DialogDismissibleView;\nconst styles = StyleSheet.create({\n  hidden: {\n    opacity: 0\n  }\n});"]},"metadata":{},"sourceType":"module"}