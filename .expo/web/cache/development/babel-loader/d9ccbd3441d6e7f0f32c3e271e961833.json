{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback } from 'react';\nimport { Constants } from \"../../helpers\";\nvar DEFAULT_THRESHOLD = Constants.isAndroid ? 1 : 0;\n\nvar useScrollReached = function useScrollReached() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$horizontal = props.horizontal,\n      horizontal = _props$horizontal === void 0 ? false : _props$horizontal,\n      _props$threshold = props.threshold,\n      threshold = _props$threshold === void 0 ? DEFAULT_THRESHOLD : _props$threshold;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isScrollAtStart = _useState2[0],\n      setScrollAtStart = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isScrollAtEnd = _useState4[0],\n      setScrollAtEnd = _useState4[1];\n\n  var onScroll = useCallback(function (event) {\n    var _event$nativeEvent = event.nativeEvent,\n        _event$nativeEvent$la = _event$nativeEvent.layoutMeasurement,\n        layoutWidth = _event$nativeEvent$la.width,\n        layoutHeight = _event$nativeEvent$la.height,\n        _event$nativeEvent$co = _event$nativeEvent.contentOffset,\n        offsetX = _event$nativeEvent$co.x,\n        offsetY = _event$nativeEvent$co.y,\n        _event$nativeEvent$co2 = _event$nativeEvent.contentSize,\n        contentWidth = _event$nativeEvent$co2.width,\n        contentHeight = _event$nativeEvent$co2.height;\n    var layoutSize = horizontal ? layoutWidth : layoutHeight;\n    var offset = horizontal ? offsetX : offsetY;\n    var contentSize = horizontal ? contentWidth : contentHeight;\n\n    if (horizontal && Constants.isRTL && Constants.isAndroid) {\n      var scrollingWidth = Math.max(0, contentSize - layoutSize);\n      offset = scrollingWidth - offset;\n    }\n\n    var closeToStart = offset <= threshold;\n\n    if (closeToStart !== isScrollAtStart) {\n      setScrollAtStart(closeToStart);\n    }\n\n    var closeToEnd = layoutSize + offset >= contentSize - threshold;\n\n    if (closeToEnd !== isScrollAtEnd) {\n      setScrollAtEnd(closeToEnd);\n    }\n  }, [horizontal, threshold, isScrollAtStart, isScrollAtEnd]);\n  return {\n    onScroll: onScroll,\n    isScrollAtStart: isScrollAtStart,\n    isScrollAtEnd: isScrollAtEnd\n  };\n};\n\nexport default useScrollReached;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/hooks/useScrollReached/index.js"],"names":["React","useState","useCallback","Constants","DEFAULT_THRESHOLD","isAndroid","useScrollReached","props","horizontal","threshold","isScrollAtStart","setScrollAtStart","isScrollAtEnd","setScrollAtEnd","onScroll","event","nativeEvent","layoutMeasurement","layoutWidth","width","layoutHeight","height","contentOffset","offsetX","x","offsetY","y","contentSize","contentWidth","contentHeight","layoutSize","offset","isRTL","scrollingWidth","Math","max","closeToStart","closeToEnd"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,SAAT;AACA,IAAMC,iBAAiB,GAAGD,SAAS,CAACE,SAAV,GAAsB,CAAtB,GAA0B,CAApD;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACvC,0BAGIA,KAHJ,CACEC,UADF;AAAA,MACEA,UADF,kCACe,KADf;AAAA,yBAGID,KAHJ,CAEEE,SAFF;AAAA,MAEEA,SAFF,iCAEcL,iBAFd;;AAIA,kBAA4CH,QAAQ,CAAC,IAAD,CAApD;AAAA;AAAA,MAAOS,eAAP;AAAA,MAAwBC,gBAAxB;;AACA,mBAAwCV,QAAQ,CAAC,KAAD,CAAhD;AAAA;AAAA,MAAOW,aAAP;AAAA,MAAsBC,cAAtB;;AACA,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,UAAAa,KAAK,EAAI;AACpC,6BAeIA,KAfJ,CACEC,WADF;AAAA,mDAEIC,iBAFJ;AAAA,QAGaC,WAHb,yBAGMC,KAHN;AAAA,QAIcC,YAJd,yBAIMC,MAJN;AAAA,mDAMIC,aANJ;AAAA,QAOSC,OAPT,yBAOMC,CAPN;AAAA,QAQSC,OART,yBAQMC,CARN;AAAA,oDAUIC,WAVJ;AAAA,QAWaC,YAXb,0BAWMT,KAXN;AAAA,QAYcU,aAZd,0BAYMR,MAZN;AAgBA,QAAMS,UAAU,GAAGtB,UAAU,GAAGU,WAAH,GAAiBE,YAA9C;AACA,QAAIW,MAAM,GAAGvB,UAAU,GAAGe,OAAH,GAAaE,OAApC;AACA,QAAME,WAAW,GAAGnB,UAAU,GAAGoB,YAAH,GAAkBC,aAAhD;;AAEA,QAAIrB,UAAU,IAAIL,SAAS,CAAC6B,KAAxB,IAAiC7B,SAAS,CAACE,SAA/C,EAA0D;AACxD,UAAM4B,cAAc,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYR,WAAW,GAAGG,UAA1B,CAAvB;AACAC,MAAAA,MAAM,GAAGE,cAAc,GAAGF,MAA1B;AACD;;AAED,QAAMK,YAAY,GAAGL,MAAM,IAAItB,SAA/B;;AAEA,QAAI2B,YAAY,KAAK1B,eAArB,EAAsC;AACpCC,MAAAA,gBAAgB,CAACyB,YAAD,CAAhB;AACD;;AAED,QAAMC,UAAU,GAAGP,UAAU,GAAGC,MAAb,IAAuBJ,WAAW,GAAGlB,SAAxD;;AAEA,QAAI4B,UAAU,KAAKzB,aAAnB,EAAkC;AAChCC,MAAAA,cAAc,CAACwB,UAAD,CAAd;AACD;AACF,GArC2B,EAqCzB,CAAC7B,UAAD,EAAaC,SAAb,EAAwBC,eAAxB,EAAyCE,aAAzC,CArCyB,CAA5B;AAsCA,SAAO;AACLE,IAAAA,QAAQ,EAARA,QADK;AAELJ,IAAAA,eAAe,EAAfA,eAFK;AAGLE,IAAAA,aAAa,EAAbA;AAHK,GAAP;AAKD,CAlDD;;AAoDA,eAAeN,gBAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Constants } from \"../../helpers\";\nconst DEFAULT_THRESHOLD = Constants.isAndroid ? 1 : 0;\n\nconst useScrollReached = (props = {}) => {\n  const {\n    horizontal = false,\n    threshold = DEFAULT_THRESHOLD\n  } = props;\n  const [isScrollAtStart, setScrollAtStart] = useState(true);\n  const [isScrollAtEnd, setScrollAtEnd] = useState(false);\n  const onScroll = useCallback(event => {\n    const {\n      nativeEvent: {\n        layoutMeasurement: {\n          width: layoutWidth,\n          height: layoutHeight\n        },\n        contentOffset: {\n          x: offsetX,\n          y: offsetY\n        },\n        contentSize: {\n          width: contentWidth,\n          height: contentHeight\n        }\n      }\n    } = event;\n    const layoutSize = horizontal ? layoutWidth : layoutHeight;\n    let offset = horizontal ? offsetX : offsetY;\n    const contentSize = horizontal ? contentWidth : contentHeight;\n\n    if (horizontal && Constants.isRTL && Constants.isAndroid) {\n      const scrollingWidth = Math.max(0, contentSize - layoutSize);\n      offset = scrollingWidth - offset;\n    }\n\n    const closeToStart = offset <= threshold;\n\n    if (closeToStart !== isScrollAtStart) {\n      setScrollAtStart(closeToStart);\n    }\n\n    const closeToEnd = layoutSize + offset >= contentSize - threshold;\n\n    if (closeToEnd !== isScrollAtEnd) {\n      setScrollAtEnd(closeToEnd);\n    }\n  }, [horizontal, threshold, isScrollAtStart, isScrollAtEnd]);\n  return {\n    onScroll,\n    isScrollAtStart,\n    isScrollAtEnd\n  };\n};\n\nexport default useScrollReached;"]},"metadata":{},"sourceType":"module"}