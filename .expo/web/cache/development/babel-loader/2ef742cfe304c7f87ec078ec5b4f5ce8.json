{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Colors, BorderRadiuses, View, Image, ListItem, Text } from 'react-native-ui-lib';\nimport orders, { OrderType } from \"../../assets/data/orders\";\nimport * as Clipboard from 'expo-clipboard';\n\nvar BasicListScreen = function (_Component) {\n  _inherits(BasicListScreen, _Component);\n\n  var _super = _createSuper(BasicListScreen);\n\n  function BasicListScreen() {\n    var _this;\n\n    _classCallCheck(this, BasicListScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.keyExtractor = function (item) {\n      return item.name;\n    };\n\n    return _this;\n  }\n\n  _createClass(BasicListScreen, [{\n    key: \"renderRow\",\n    value: function renderRow(row, id) {\n      var statusColor = row.inventory.status === 'Paid' ? Colors.green30 : Colors.red30;\n\n      var copyToClipboard = function copyToClipboard() {\n        Clipboard.setString('ronin:e61bdb6ce91e91fefe19a7db315bd1887ddf50b9');\n        alert('key successfully copied to deposit');\n      };\n\n      return React.createElement(View, null, React.createElement(ListItem, {\n        height: '100%p',\n        style: {\n          backgroundColor: '#f7f9fc',\n          padding: 5,\n          borderRadius: 12,\n          paddingBottom: 5,\n          marginBottom: 8\n        },\n        activeBackgroundColor: '#f7f9fc',\n        activeOpacity: 89,\n        height: 90.5,\n        onPress: copyToClipboard\n      }, React.createElement(ListItem.Part, {\n        left: true\n      }, React.createElement(Image, {\n        source: {\n          uri: row.mediaUrl\n        },\n        style: styles.image\n      })), React.createElement(ListItem.Part, {\n        middle: true,\n        column: true,\n        containerStyle: [styles.border, {\n          paddingRight: 17\n        }]\n      }, React.createElement(ListItem.Part, {\n        containerStyle: {\n          marginBottom: 3\n        }\n      }, React.createElement(Text, {\n        grey10: true,\n        text70: true,\n        style: {\n          flex: 1,\n          marginRight: 10\n        },\n        numberOfLines: 1\n      }, row.name), React.createElement(Text, {\n        grey10: true,\n        text70: true,\n        style: {\n          marginTop: 2\n        }\n      }, row.formattedPrice)))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(FlatList, {\n        data: orders,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item,\n              index = _ref.index;\n          return _this2.renderRow(item, index);\n        },\n        keyExtractor: this.keyExtractor,\n        nestedScrollEnabled: true\n      });\n    }\n  }]);\n\n  return BasicListScreen;\n}(Component);\n\nexport { BasicListScreen as default };\nvar styles = StyleSheet.create({\n  image: {\n    width: 54,\n    height: 54,\n    borderRadius: BorderRadiuses.br20,\n    marginHorizontal: 14\n  },\n  border: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: Colors.grey70\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/screen/component/ListCripto.js"],"names":["React","Component","Colors","BorderRadiuses","View","Image","ListItem","Text","orders","OrderType","Clipboard","BasicListScreen","keyExtractor","item","name","row","id","statusColor","inventory","status","green30","red30","copyToClipboard","setString","alert","backgroundColor","padding","borderRadius","paddingBottom","marginBottom","uri","mediaUrl","styles","image","border","paddingRight","flex","marginRight","marginTop","formattedPrice","index","renderRow","StyleSheet","create","width","height","br20","marginHorizontal","borderBottomWidth","hairlineWidth","borderColor","grey70"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {StyleSheet, Alert, FlatList} from 'react-native';\nimport {Colors, BorderRadiuses, View, Image, ListItem, Text} from 'react-native-ui-lib';\nimport orders, {OrderType} from '../../assets/data/orders';\nimport * as Clipboard from 'expo-clipboard';\n\n\nexport default class BasicListScreen extends Component {\n\n  keyExtractor = (item: OrderType) => item.name;\n\n  renderRow(row: OrderType, id: number) {\n    const statusColor = row.inventory.status === 'Paid' ? Colors.green30 : Colors.red30;\n    const copyToClipboard = () => {\n      Clipboard.setString('ronin:e61bdb6ce91e91fefe19a7db315bd1887ddf50b9');\n      alert('key successfully copied to deposit');\n  };\n\n    return (\n      <View>\n        <ListItem \n        height={'100%p'}\n\n\n\nstyle={{backgroundColor:'#f7f9fc', padding:5,borderRadius:12,paddingBottom:5,marginBottom:8}}\n          // @ts-expect-error\n          activeBackgroundColor={'#f7f9fc'}\n          activeOpacity={89}\n          height={90.5}\n          onPress={copyToClipboard}\n        >\n          <ListItem.Part left>\n            <Image source={{uri: row.mediaUrl}} style={styles.image}/>\n          </ListItem.Part>\n          <ListItem.Part middle column containerStyle={[styles.border, {paddingRight: 17}]}>\n            <ListItem.Part containerStyle={{marginBottom: 3}}>\n              <Text grey10 text70 style={{flex: 1, marginRight: 10}} numberOfLines={1}>\n                {row.name}\n              </Text>\n              <Text grey10 text70 style={{marginTop: 2}}>\n                {row.formattedPrice}\n              </Text>\n            </ListItem.Part>\n            \n          </ListItem.Part>\n        </ListItem>\n      </View>\n    );\n  }\n\n  render() {\n    return (\n      <FlatList\n        data={orders}\n        renderItem={({item, index}) => this.renderRow(item, index)}\n        keyExtractor={this.keyExtractor}\n        nestedScrollEnabled\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 54,\n    height: 54,\n    borderRadius: BorderRadiuses.br20,\n    marginHorizontal: 14\n  },\n  border: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: Colors.grey70\n  }\n});"]},"metadata":{},"sourceType":"module"}