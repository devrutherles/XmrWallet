{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from 'lodash';\nimport React, { useCallback, useRef } from 'react';\nimport { Constants } from \"../../helpers\";\n\nvar useScrollTo = function useScrollTo(props) {\n  var propsScrollViewRef = props.scrollViewRef,\n      _props$horizontal = props.horizontal,\n      horizontal = _props$horizontal === void 0 ? true : _props$horizontal;\n  var newScrollViewRef = useRef(null);\n  var scrollViewRef = propsScrollViewRef || newScrollViewRef;\n  var contentSize = useRef(undefined);\n  var containerSize = useRef(undefined);\n  var onContentSizeChange = useCallback(function (contentWidth, contentHeight) {\n    contentSize.current = horizontal ? contentWidth : contentHeight;\n  }, [horizontal]);\n  var onLayout = useCallback(function (event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    containerSize.current = horizontal ? width : height;\n  }, [horizontal]);\n  var scrollTo = useCallback(function (offset) {\n    var _scrollViewRef$curren, _scrollViewRef$curren2;\n\n    var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (horizontal && Constants.isRTL && Constants.isAndroid && !_.isUndefined(contentSize.current) && !_.isUndefined(containerSize.current)) {\n      var scrollingWidth = Math.max(0, contentSize.current - containerSize.current);\n      offset = scrollingWidth - offset;\n    }\n\n    if (_.isFunction((_scrollViewRef$curren = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren.scrollToOffset)) {\n      scrollViewRef.current.scrollToOffset({\n        offset: offset,\n        animated: animated\n      });\n    } else if (_.isFunction((_scrollViewRef$curren2 = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren2.scrollTo)) {\n      var scrollToXY = horizontal ? {\n        x: offset\n      } : {\n        y: offset\n      };\n      scrollViewRef.current.scrollTo(_objectSpread(_objectSpread({}, scrollToXY), {}, {\n        animated: animated\n      }));\n    }\n  }, [scrollViewRef, horizontal]);\n  return {\n    scrollViewRef: scrollViewRef,\n    scrollTo: scrollTo,\n    onContentSizeChange: onContentSizeChange,\n    onLayout: onLayout\n  };\n};\n\nexport default useScrollTo;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/hooks/useScrollTo/index.js"],"names":["_","React","useCallback","useRef","Constants","useScrollTo","props","propsScrollViewRef","scrollViewRef","horizontal","newScrollViewRef","contentSize","undefined","containerSize","onContentSizeChange","contentWidth","contentHeight","current","onLayout","event","nativeEvent","layout","width","height","scrollTo","offset","animated","isRTL","isAndroid","isUndefined","scrollingWidth","Math","max","isFunction","scrollToOffset","scrollToXY","x","y"],"mappings":";;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,SAAT;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,MACiBC,kBADjB,GAGID,KAHJ,CACEE,aADF;AAAA,0BAGIF,KAHJ,CAEEG,UAFF;AAAA,MAEEA,UAFF,kCAEe,IAFf;AAIA,MAAMC,gBAAgB,GAAGP,MAAM,CAAC,IAAD,CAA/B;AACA,MAAMK,aAAa,GAAGD,kBAAkB,IAAIG,gBAA5C;AACA,MAAMC,WAAW,GAAGR,MAAM,CAACS,SAAD,CAA1B;AACA,MAAMC,aAAa,GAAGV,MAAM,CAACS,SAAD,CAA5B;AACA,MAAME,mBAAmB,GAAGZ,WAAW,CAAC,UAACa,YAAD,EAAeC,aAAf,EAAiC;AACvEL,IAAAA,WAAW,CAACM,OAAZ,GAAsBR,UAAU,GAAGM,YAAH,GAAkBC,aAAlD;AACD,GAFsC,EAEpC,CAACP,UAAD,CAFoC,CAAvC;AAGA,MAAMS,QAAQ,GAAGhB,WAAW,CAAC,UAAAiB,KAAK,EAAI;AACpC,gCAOIA,KAPJ,CACEC,WADF,CAEIC,MAFJ;AAAA,QAGMC,KAHN,yBAGMA,KAHN;AAAA,QAIMC,MAJN,yBAIMA,MAJN;AAQAV,IAAAA,aAAa,CAACI,OAAd,GAAwBR,UAAU,GAAGa,KAAH,GAAWC,MAA7C;AACD,GAV2B,EAUzB,CAACd,UAAD,CAVyB,CAA5B;AAWA,MAAMe,QAAQ,GAAGtB,WAAW,CAAC,UAACuB,MAAD,EAA6B;AAAA;;AAAA,QAApBC,QAAoB,uEAAT,IAAS;;AACxD,QAAIjB,UAAU,IAAIL,SAAS,CAACuB,KAAxB,IAAiCvB,SAAS,CAACwB,SAA3C,IAAwD,CAAC5B,CAAC,CAAC6B,WAAF,CAAclB,WAAW,CAACM,OAA1B,CAAzD,IAA+F,CAACjB,CAAC,CAAC6B,WAAF,CAAchB,aAAa,CAACI,OAA5B,CAApG,EAA0I;AACxI,UAAMa,cAAc,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrB,WAAW,CAACM,OAAZ,GAAsBJ,aAAa,CAACI,OAAhD,CAAvB;AACAQ,MAAAA,MAAM,GAAGK,cAAc,GAAGL,MAA1B;AACD;;AAGD,QAAIzB,CAAC,CAACiC,UAAF,0BAAazB,aAAa,CAACS,OAA3B,qBAAa,sBAAuBiB,cAApC,CAAJ,EAAyD;AAEvD1B,MAAAA,aAAa,CAACS,OAAd,CAAsBiB,cAAtB,CAAqC;AACnCT,QAAAA,MAAM,EAANA,MADmC;AAEnCC,QAAAA,QAAQ,EAARA;AAFmC,OAArC;AAID,KAND,MAMO,IAAI1B,CAAC,CAACiC,UAAF,2BAAazB,aAAa,CAACS,OAA3B,qBAAa,uBAAuBO,QAApC,CAAJ,EAAmD;AACxD,UAAMW,UAAU,GAAG1B,UAAU,GAAG;AAC9B2B,QAAAA,CAAC,EAAEX;AAD2B,OAAH,GAEzB;AACFY,QAAAA,CAAC,EAAEZ;AADD,OAFJ;AAMAjB,MAAAA,aAAa,CAACS,OAAd,CAAsBO,QAAtB,iCAAoCW,UAApC;AACET,QAAAA,QAAQ,EAARA;AADF;AAGD;AACF,GAxB2B,EAwBzB,CAAClB,aAAD,EAAgBC,UAAhB,CAxByB,CAA5B;AAyBA,SAAO;AACLD,IAAAA,aAAa,EAAbA,aADK;AAELgB,IAAAA,QAAQ,EAARA,QAFK;AAGLV,IAAAA,mBAAmB,EAAnBA,mBAHK;AAILI,IAAAA,QAAQ,EAARA;AAJK,GAAP;AAMD,CAtDD;;AAwDA,eAAeb,WAAf","sourcesContent":["import _ from 'lodash';\nimport React, { useCallback, useRef } from 'react';\nimport { Constants } from \"../../helpers\";\n\nconst useScrollTo = props => {\n  const {\n    scrollViewRef: propsScrollViewRef,\n    horizontal = true\n  } = props;\n  const newScrollViewRef = useRef(null);\n  const scrollViewRef = propsScrollViewRef || newScrollViewRef;\n  const contentSize = useRef(undefined);\n  const containerSize = useRef(undefined);\n  const onContentSizeChange = useCallback((contentWidth, contentHeight) => {\n    contentSize.current = horizontal ? contentWidth : contentHeight;\n  }, [horizontal]);\n  const onLayout = useCallback(event => {\n    const {\n      nativeEvent: {\n        layout: {\n          width,\n          height\n        }\n      }\n    } = event;\n    containerSize.current = horizontal ? width : height;\n  }, [horizontal]);\n  const scrollTo = useCallback((offset, animated = true) => {\n    if (horizontal && Constants.isRTL && Constants.isAndroid && !_.isUndefined(contentSize.current) && !_.isUndefined(containerSize.current)) {\n      const scrollingWidth = Math.max(0, contentSize.current - containerSize.current);\n      offset = scrollingWidth - offset;\n    } // @ts-ignore\n\n\n    if (_.isFunction(scrollViewRef.current?.scrollToOffset)) {\n      // @ts-ignore\n      scrollViewRef.current.scrollToOffset({\n        offset,\n        animated\n      }); // @ts-ignore\n    } else if (_.isFunction(scrollViewRef.current?.scrollTo)) {\n      const scrollToXY = horizontal ? {\n        x: offset\n      } : {\n        y: offset\n      }; // @ts-ignore\n\n      scrollViewRef.current.scrollTo({ ...scrollToXY,\n        animated\n      });\n    }\n  }, [scrollViewRef, horizontal]);\n  return {\n    scrollViewRef,\n    scrollTo,\n    onContentSizeChange,\n    onLayout\n  };\n};\n\nexport default useScrollTo;"]},"metadata":{},"sourceType":"module"}