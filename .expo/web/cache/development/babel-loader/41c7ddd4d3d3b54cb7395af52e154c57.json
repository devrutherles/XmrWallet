{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _ from 'lodash';\nimport Colors from \"./colors\";\nexport var ThemeManager = function () {\n  function ThemeManager() {\n    _classCallCheck(this, ThemeManager);\n\n    this.theme = {\n      primaryColor: Colors.primary,\n      CTA: {\n        textColor: Colors.white,\n        disabledColor: Colors.grey60,\n        backgroundColor: Colors.primary\n      },\n      titleColor: Colors.grey10,\n      subtitleColor: Colors.grey40,\n      dividerColor: Colors.grey70,\n      components: {}\n    };\n    this.forcedTheme = {\n      components: {}\n    };\n  }\n\n  _createClass(ThemeManager, [{\n    key: \"getTheme\",\n    value: function getTheme() {\n      return this.theme;\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      if (key === 'components') {\n        throw new Error('Overriding the \"components\" key is not possible.');\n      }\n\n      _.set(this.theme, key, value);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return _.get(this.theme, key);\n    }\n  }, {\n    key: \"setComponentTheme\",\n    value: function setComponentTheme(componentName, overrides) {\n      if (_.isFunction(overrides)) {\n        this.theme.components[componentName] = overrides;\n      } else {\n        this.theme.components[componentName] = _.cloneDeep(overrides);\n      }\n    }\n  }, {\n    key: \"setComponentForcedTheme\",\n    value: function setComponentForcedTheme(componentName, overrides) {\n      if (_.isFunction(overrides)) {\n        this.forcedTheme.components[componentName] = overrides;\n      } else {\n        this.forcedTheme.components[componentName] = _.cloneDeep(overrides);\n      }\n    }\n  }, {\n    key: \"components\",\n    get: function get() {\n      return this.theme.components;\n    }\n  }, {\n    key: \"forcedThemeComponents\",\n    get: function get() {\n      return this.forcedTheme.components;\n    }\n  }, {\n    key: \"primaryColor\",\n    get: function get() {\n      return this.theme.primaryColor;\n    }\n  }, {\n    key: \"CTATextColor\",\n    get: function get() {\n      return this.theme.CTA.textColor;\n    }\n  }, {\n    key: \"CTADisabledColor\",\n    get: function get() {\n      return this.theme.CTA.disabledColor;\n    }\n  }, {\n    key: \"CTABackgroundColor\",\n    get: function get() {\n      return this.theme.CTA.backgroundColor;\n    }\n  }, {\n    key: \"titleColor\",\n    get: function get() {\n      return this.theme.titleColor;\n    }\n  }, {\n    key: \"subtitleColor\",\n    get: function get() {\n      return this.theme.subtitleColor;\n    }\n  }, {\n    key: \"dividerColor\",\n    get: function get() {\n      return this.theme.dividerColor;\n    }\n  }]);\n\n  return ThemeManager;\n}();\nexport default new ThemeManager();","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/style/themeManager.js"],"names":["_","Colors","ThemeManager","theme","primaryColor","primary","CTA","textColor","white","disabledColor","grey60","backgroundColor","titleColor","grey10","subtitleColor","grey40","dividerColor","grey70","components","forcedTheme","key","value","Error","set","get","componentName","overrides","isFunction","cloneDeep"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP;AACA,WAAaC,YAAb;AAAA;AAAA;;AAAA,SACEC,KADF,GACU;AACNC,MAAAA,YAAY,EAAEH,MAAM,CAACI,OADf;AAENC,MAAAA,GAAG,EAAE;AACHC,QAAAA,SAAS,EAAEN,MAAM,CAACO,KADf;AAEHC,QAAAA,aAAa,EAAER,MAAM,CAACS,MAFnB;AAGHC,QAAAA,eAAe,EAAEV,MAAM,CAACI;AAHrB,OAFC;AAONO,MAAAA,UAAU,EAAEX,MAAM,CAACY,MAPb;AAQNC,MAAAA,aAAa,EAAEb,MAAM,CAACc,MARhB;AASNC,MAAAA,YAAY,EAAEf,MAAM,CAACgB,MATf;AAUNC,MAAAA,UAAU,EAAE;AAVN,KADV;AAAA,SAcEC,WAdF,GAcgB;AACZD,MAAAA,UAAU,EAAE;AADA,KAdhB;AAAA;;AAAA;AAAA;AAAA,WAkBE,oBAAW;AACT,aAAO,KAAKf,KAAZ;AACD;AApBH;AAAA;AAAA,WAsBE,iBAAQiB,GAAR,EAAaC,KAAb,EAAoB;AAClB,UAAID,GAAG,KAAK,YAAZ,EAA0B;AACxB,cAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAGDtB,MAAAA,CAAC,CAACuB,GAAF,CAAM,KAAKpB,KAAX,EAAkBiB,GAAlB,EAAuBC,KAAvB;AACD;AA7BH;AAAA;AAAA,WA+BE,iBAAQD,GAAR,EAAa;AAEX,aAAOpB,CAAC,CAACwB,GAAF,CAAM,KAAKrB,KAAX,EAAkBiB,GAAlB,CAAP;AACD;AAlCH;AAAA;AAAA,WAoCE,2BAAkBK,aAAlB,EAAiCC,SAAjC,EAA4C;AAC1C,UAAI1B,CAAC,CAAC2B,UAAF,CAAaD,SAAb,CAAJ,EAA6B;AAC3B,aAAKvB,KAAL,CAAWe,UAAX,CAAsBO,aAAtB,IAAuCC,SAAvC;AACD,OAFD,MAEO;AACL,aAAKvB,KAAL,CAAWe,UAAX,CAAsBO,aAAtB,IAAuCzB,CAAC,CAAC4B,SAAF,CAAYF,SAAZ,CAAvC;AACD;AACF;AA1CH;AAAA;AAAA,WA4CE,iCAAwBD,aAAxB,EAAuCC,SAAvC,EAAkD;AAChD,UAAI1B,CAAC,CAAC2B,UAAF,CAAaD,SAAb,CAAJ,EAA6B;AAC3B,aAAKP,WAAL,CAAiBD,UAAjB,CAA4BO,aAA5B,IAA6CC,SAA7C;AACD,OAFD,MAEO;AACL,aAAKP,WAAL,CAAiBD,UAAjB,CAA4BO,aAA5B,IAA6CzB,CAAC,CAAC4B,SAAF,CAAYF,SAAZ,CAA7C;AACD;AACF;AAlDH;AAAA;AAAA,SAoDE,eAAiB;AACf,aAAO,KAAKvB,KAAL,CAAWe,UAAlB;AACD;AAtDH;AAAA;AAAA,SAwDE,eAA4B;AAC1B,aAAO,KAAKC,WAAL,CAAiBD,UAAxB;AACD;AA1DH;AAAA;AAAA,SA6DE,eAAmB;AACjB,aAAO,KAAKf,KAAL,CAAWC,YAAlB;AACD;AA/DH;AAAA;AAAA,SAiEE,eAAmB;AACjB,aAAO,KAAKD,KAAL,CAAWG,GAAX,CAAeC,SAAtB;AACD;AAnEH;AAAA;AAAA,SAqEE,eAAuB;AACrB,aAAO,KAAKJ,KAAL,CAAWG,GAAX,CAAeG,aAAtB;AACD;AAvEH;AAAA;AAAA,SAyEE,eAAyB;AACvB,aAAO,KAAKN,KAAL,CAAWG,GAAX,CAAeK,eAAtB;AACD;AA3EH;AAAA;AAAA,SA6EE,eAAiB;AACf,aAAO,KAAKR,KAAL,CAAWS,UAAlB;AACD;AA/EH;AAAA;AAAA,SAiFE,eAAoB;AAClB,aAAO,KAAKT,KAAL,CAAWW,aAAlB;AACD;AAnFH;AAAA;AAAA,SAqFE,eAAmB;AACjB,aAAO,KAAKX,KAAL,CAAWa,YAAlB;AACD;AAvFH;;AAAA;AAAA;AA0FA,eAAe,IAAId,YAAJ,EAAf","sourcesContent":["import _ from 'lodash';\nimport Colors from \"./colors\";\nexport class ThemeManager {\n  theme = {\n    primaryColor: Colors.primary,\n    CTA: {\n      textColor: Colors.white,\n      disabledColor: Colors.grey60,\n      backgroundColor: Colors.primary\n    },\n    titleColor: Colors.grey10,\n    subtitleColor: Colors.grey40,\n    dividerColor: Colors.grey70,\n    components: {} // leave this key and delete the rest on V6\n\n  };\n  forcedTheme = {\n    components: {}\n  };\n\n  getTheme() {\n    return this.theme;\n  }\n\n  setItem(key, value) {\n    if (key === 'components') {\n      throw new Error('Overriding the \"components\" key is not possible.');\n    } // this.theme[key] = value;\n\n\n    _.set(this.theme, key, value);\n  }\n\n  getItem(key) {\n    // return this.theme[key];\n    return _.get(this.theme, key);\n  }\n\n  setComponentTheme(componentName, overrides) {\n    if (_.isFunction(overrides)) {\n      this.theme.components[componentName] = overrides;\n    } else {\n      this.theme.components[componentName] = _.cloneDeep(overrides);\n    }\n  }\n\n  setComponentForcedTheme(componentName, overrides) {\n    if (_.isFunction(overrides)) {\n      this.forcedTheme.components[componentName] = overrides;\n    } else {\n      this.forcedTheme.components[componentName] = _.cloneDeep(overrides);\n    }\n  }\n\n  get components() {\n    return this.theme.components;\n  }\n\n  get forcedThemeComponents() {\n    return this.forcedTheme.components;\n  } // TODO: remove getters below\n\n\n  get primaryColor() {\n    return this.theme.primaryColor;\n  }\n\n  get CTATextColor() {\n    return this.theme.CTA.textColor;\n  }\n\n  get CTADisabledColor() {\n    return this.theme.CTA.disabledColor;\n  }\n\n  get CTABackgroundColor() {\n    return this.theme.CTA.backgroundColor;\n  }\n\n  get titleColor() {\n    return this.theme.titleColor;\n  }\n\n  get subtitleColor() {\n    return this.theme.subtitleColor;\n  }\n\n  get dividerColor() {\n    return this.theme.dividerColor;\n  }\n\n}\nexport default new ThemeManager();"]},"metadata":{},"sourceType":"module"}