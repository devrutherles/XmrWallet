{"ast":null,"code":"import _ from 'lodash';\nimport { EmailValidator } from 'commons-validator-js';\nvar urlRegEx = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\nvar decimalNumberRegEx = /^-?\\d+[.,]?\\d+$/;\nvar integerRegEx = /^-?\\d*$/;\nvar priceRegEx = /^[0-9]{1,9}([.][0-9]{1,2})?$/;\nvar validators = {\n  required: function required(value) {\n    return !_.isEmpty(value);\n  },\n  email: function email(value) {\n    return new EmailValidator().isValid(value);\n  },\n  url: function url(value) {\n    return urlRegEx.test(value);\n  },\n  number: function number(value) {\n    return integerRegEx.test(value) || decimalNumberRegEx.test(value);\n  },\n  price: function price(value) {\n    return priceRegEx.test(value);\n  }\n};\nexport default validators;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/baseInput/Validators.js"],"names":["_","EmailValidator","urlRegEx","decimalNumberRegEx","integerRegEx","priceRegEx","validators","required","value","isEmpty","email","isValid","url","test","number","price"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAAQC,cAAR,QAA6B,sBAA7B;AAGA,IAAMC,QAAQ,GAAG,yaAAjB;AACA,IAAMC,kBAAkB,GAAG,iBAA3B;AACA,IAAMC,YAAY,GAAG,SAArB;AACA,IAAMC,UAAU,GAAG,8BAAnB;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,WAAI,CAACR,CAAC,CAACS,OAAF,CAAUD,KAAV,CAAL;AAAA,GADE;AAEjBE,EAAAA,KAAK,EAAE,eAAAF,KAAK;AAAA,WAAI,IAAIP,cAAJ,GAAqBU,OAArB,CAA6BH,KAA7B,CAAJ;AAAA,GAFK;AAGjBI,EAAAA,GAAG,EAAE,aAAAJ,KAAK;AAAA,WAAIN,QAAQ,CAACW,IAAT,CAAcL,KAAd,CAAJ;AAAA,GAHO;AAIjBM,EAAAA,MAAM,EAAE,gBAAAN,KAAK;AAAA,WAAIJ,YAAY,CAACS,IAAb,CAAkBL,KAAlB,KAA4BL,kBAAkB,CAACU,IAAnB,CAAwBL,KAAxB,CAAhC;AAAA,GAJI;AAKjBO,EAAAA,KAAK,EAAE,eAAAP,KAAK;AAAA,WAAIH,UAAU,CAACQ,IAAX,CAAgBL,KAAhB,CAAJ;AAAA;AALK,CAAnB;AAQA,eAAeF,UAAf","sourcesContent":["import _ from 'lodash';\nimport {EmailValidator} from 'commons-validator-js';\n\n\nconst urlRegEx = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i; //eslint-disable-line\nconst decimalNumberRegEx = /^-?\\d+[.,]?\\d+$/;\nconst integerRegEx = /^-?\\d*$/; // allows empty string\nconst priceRegEx = /^[0-9]{1,9}([.][0-9]{1,2})?$/;\n\nconst validators = {\n  required: value => !_.isEmpty(value),\n  email: value => new EmailValidator().isValid(value),\n  url: value => urlRegEx.test(value),\n  number: value => integerRegEx.test(value) || decimalNumberRegEx.test(value),\n  price: value => priceRegEx.test(value)\n};\n\nexport default validators;\n"]},"metadata":{},"sourceType":"module"}