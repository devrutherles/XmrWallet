{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _Typography$text;\n\nvar _excluded = [\"inputStyle\", \"selectionColor\", \"title\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Constants } from \"../../helpers\";\nimport { Colors, BorderRadiuses, ThemeManager, Typography, Spacings } from \"../../style\";\nimport Assets from \"../../assets\";\nimport { LogService } from \"../../services\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { TextField } from \"../inputs\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Chip from \"../chip\";\nimport { getValidationBasedColor, getCounterTextColor, getCounterText, getChipDismissColor, isDisabled } from \"./Presenter\";\nvar GUTTER_SPACING = 8;\n\nvar ChipsInput = function (_Component) {\n  _inherits(ChipsInput, _Component);\n\n  var _super = _createSuper(ChipsInput);\n\n  function ChipsInput(props) {\n    var _this$input$current;\n\n    var _this;\n\n    _classCallCheck(this, ChipsInput);\n\n    _this = _super.call(this, props);\n    _this.input = React.createRef();\n    _this.scrollRef = React.createRef();\n\n    _this.addTag = function () {\n      var _this$scrollRef, _this$scrollRef$curre;\n\n      var _this$props = _this.props,\n          onCreateTag = _this$props.onCreateTag,\n          disableTagAdding = _this$props.disableTagAdding,\n          maxLength = _this$props.maxLength,\n          chipsProps = _this$props.chips;\n      var _this$state = _this.state,\n          value = _this$state.value,\n          chips = _this$state.chips;\n\n      if ((_this$scrollRef = _this.scrollRef) != null && (_this$scrollRef$curre = _this$scrollRef.current) != null && _this$scrollRef$curre.scrollToEnd) {\n        var _this$scrollRef2, _this$scrollRef2$curr;\n\n        (_this$scrollRef2 = _this.scrollRef) == null ? void 0 : (_this$scrollRef2$curr = _this$scrollRef2.current) == null ? void 0 : _this$scrollRef2$curr.scrollToEnd();\n      }\n\n      if (disableTagAdding) {\n        return;\n      }\n\n      if (_.isNil(value) || _.isEmpty(value.trim())) {\n        return;\n      }\n\n      if (maxLength && _this.state.chips.length >= maxLength) {\n        _this.setState({\n          value: ''\n        });\n\n        return;\n      }\n\n      var newChip = _.isFunction(onCreateTag) ? onCreateTag(value) : chipsProps ? {\n        label: value\n      } : value;\n      var newChips = [].concat(_toConsumableArray(chips), [newChip]);\n\n      _this.setState({\n        value: '',\n        chips: newChips\n      });\n\n      _.invoke(_this.props, 'onChangeTags', newChips, ChipsInput.onChangeTagsActions.ADDED, newChip);\n\n      _this.clear();\n    };\n\n    _this.markTagIndex = function (chipIndex) {\n      _this.setState({\n        chipIndexToRemove: chipIndex\n      });\n    };\n\n    _this.onChangeText = _.debounce(function (value) {\n      _this.setState({\n        value: value,\n        chipIndexToRemove: undefined\n      });\n\n      _.invoke(_this.props, 'onChangeText', value);\n    }, 0);\n\n    _this.removeTag = function () {\n      var _this$state2 = _this.state,\n          value = _this$state2.value,\n          chips = _this$state2.chips,\n          chipIndexToRemove = _this$state2.chipIndexToRemove;\n\n      var tagsCount = _.size(chips);\n\n      var hasNoValue = _.isEmpty(value);\n\n      var hasTags = tagsCount > 0;\n      var disableTagRemoval = _this.props.disableTagRemoval;\n\n      if (disableTagRemoval) {\n        return;\n      }\n\n      if (hasNoValue && hasTags && _.isUndefined(chipIndexToRemove)) {\n        _this.setState({\n          chipIndexToRemove: tagsCount - 1\n        });\n      } else if (!_.isUndefined(chipIndexToRemove)) {\n        _this.removeMarkedTag();\n      }\n    };\n\n    _this.onKeyPress = function (event) {\n      _.invoke(_this.props, 'onKeyPress', event);\n\n      var keyCode = _.get(event, 'nativeEvent.key');\n\n      var pressedBackspace = keyCode === Constants.backspaceKey;\n\n      if (pressedBackspace) {\n        _this.removeTag();\n      }\n    };\n\n    _this.getLabel = function (item) {\n      var getLabel = _this.props.getLabel;\n\n      if (getLabel) {\n        return getLabel(item);\n      }\n\n      if (_.isString(item)) {\n        return item;\n      }\n\n      return _.get(item, 'label');\n    };\n\n    _this.onFocus = function () {\n      _this.setState({\n        isFocused: true\n      });\n    };\n\n    _this.onBlur = function () {\n      _this.setState({\n        isFocused: false\n      });\n    };\n\n    _this.renderTag = function (tag, index) {\n      var _this$props2 = _this.props,\n          tagStyle = _this$props2.tagStyle,\n          renderTag = _this$props2.renderTag;\n      var chipIndexToRemove = _this.state.chipIndexToRemove;\n      var shouldMarkTag = chipIndexToRemove === index;\n      var markedTagStyle = tag.invalid ? styles.invalidMarkedTag : styles.tagMarked;\n      var defaultTagStyle = tag.invalid ? styles.invalidTag : styles.tag;\n\n      if (_.isFunction(renderTag)) {\n        return renderTag(tag, index, shouldMarkTag, _this.getLabel(tag));\n      }\n\n      return React.createElement(View, {\n        key: index,\n        style: [defaultTagStyle, tagStyle, basicTagStyle, shouldMarkTag && markedTagStyle]\n      }, _this.renderLabel(tag, shouldMarkTag));\n    };\n\n    _this.renderTagWrapper = function (tag, index) {\n      return React.createElement(TouchableOpacity, {\n        key: index,\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return _this.onTagPress(index);\n        },\n        accessibilityHint: !_this.props.disableTagRemoval ? 'tap twice for remove tag mode' : undefined\n      }, _this.renderTag(tag, index));\n    };\n\n    _this.renderNewChip = function () {\n      var defaultChipProps = _this.props.defaultChipProps;\n      var _this$state3 = _this.state,\n          chipIndexToRemove = _this$state3.chipIndexToRemove,\n          chips = _this$state3.chips;\n      var disabled = isDisabled(_this.props);\n      return _.map(chips, function (chip, index) {\n        var selected = chipIndexToRemove === index;\n        var dismissColor = getChipDismissColor(chip, selected, defaultChipProps);\n        return React.createElement(View, {\n          center: true,\n          flexS: true,\n          \"marginT-2\": true,\n          \"marginB-2\": true\n        }, React.createElement(Chip, _extends({\n          key: index,\n          containerStyle: [styles.tag, chip.invalid && styles.invalidTag],\n          labelStyle: [styles.tagLabel, chip.invalid && styles.errorMessage, selected && !!chip.invalid && styles.errorMessageWhileMarked]\n        }, chip, defaultChipProps, {\n          disabled: disabled,\n          \"marginR-s2\": true,\n          \"marginT-2\": true,\n          left: Assets.icons.x,\n          onPress: function onPress(_) {\n            return _this.onTagPress(index);\n          },\n          onDismiss: selected ? function () {\n            return _this.onTagPress(index);\n          } : undefined,\n          dismissColor: dismissColor,\n          dismissIcon: Assets.icons.xSmall,\n          dismissIconStyle: styles.dismissIconStyle\n        })));\n      });\n    };\n\n    _this.renderTitleText = function () {\n      var _this$props3 = _this.props,\n          title = _this$props3.title,\n          defaultChipProps = _this$props3.defaultChipProps;\n      var color = _this.state.isFocused ? getValidationBasedColor(_this.state.chips, defaultChipProps) : Colors.grey30;\n      return title && React.createElement(Text, {\n        text70L: true,\n        color: color\n      }, title);\n    };\n\n    _this.renderChips = function () {\n      var _this$props4 = _this.props,\n          disableTagRemoval = _this$props4.disableTagRemoval,\n          chipsProps = _this$props4.chips;\n      var chips = _this.state.chips;\n      var renderFunction = disableTagRemoval ? _this.renderTag : _this.renderTagWrapper;\n\n      if (chipsProps) {\n        return _this.renderNewChip();\n      } else {\n        return _.map(chips, function (tag, index) {\n          return React.createElement(View, null, renderFunction(tag, index));\n        });\n      }\n    };\n\n    _this.renderUnderline = function () {\n      var _this$state4 = _this.state,\n          isFocused = _this$state4.isFocused,\n          chips = _this$state4.chips;\n      var defaultChipProps = _this.props.defaultChipProps;\n      var color = getValidationBasedColor(chips, defaultChipProps);\n      return React.createElement(View, {\n        height: 1,\n        \"marginT-10\": true,\n        backgroundColor: isFocused ? color : Colors.grey50\n      });\n    };\n\n    _this.renderChipsContainer = function () {\n      var _this$props5 = _this.props,\n          maxHeight = _this$props5.maxHeight,\n          scrollViewProps = _this$props5.scrollViewProps;\n      var Container = maxHeight ? ScrollView : View;\n      return React.createElement(Container, _extends({\n        ref: _this.scrollRef,\n        showsVerticalScrollIndicator: false,\n        style: !maxHeight && styles.tagsList,\n        contentContainerStyle: styles.tagsList\n      }, scrollViewProps), _this.renderChips(), _this.renderTextInput());\n    };\n\n    _this.state = {\n      value: props.value,\n      chips: _.cloneDeep(props.tags || props.chips) || [],\n      chipIndexToRemove: undefined,\n      initialChips: props.tags || props.chips,\n      isFocused: ((_this$input$current = _this.input.current) == null ? void 0 : _this$input$current.isFocused()) || false\n    };\n\n    if (props.tags) {\n      LogService.deprecationWarn({\n        component: 'ChipsInput',\n        oldProp: 'tags',\n        newProp: 'chips'\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(ChipsInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Constants.isAndroid) {\n        var textInputHandle = findNodeHandle(this.input.current);\n\n        if (textInputHandle && NativeModules.TextInputDelKeyHandler) {\n          NativeModules.TextInputDelKeyHandler.register(textInputHandle);\n        }\n      }\n    }\n  }, {\n    key: \"removeMarkedTag\",\n    value: function removeMarkedTag() {\n      var _this$state5 = this.state,\n          chips = _this$state5.chips,\n          chipIndexToRemove = _this$state5.chipIndexToRemove;\n\n      if (!_.isUndefined(chipIndexToRemove)) {\n        var removedTag = chips[chipIndexToRemove];\n        chips.splice(chipIndexToRemove, 1);\n        this.setState({\n          chips: chips,\n          chipIndexToRemove: undefined\n        });\n\n        _.invoke(this.props, 'onChangeTags', chips, ChipsInput.onChangeTagsActions.REMOVED, removedTag);\n      }\n    }\n  }, {\n    key: \"onTagPress\",\n    value: function onTagPress(index) {\n      var onTagPress = this.props.onTagPress;\n      var chipIndexToRemove = this.state.chipIndexToRemove;\n\n      if (onTagPress) {\n        onTagPress(index, chipIndexToRemove);\n        return;\n      }\n\n      if (chipIndexToRemove === index) {\n        this.removeMarkedTag();\n      } else {\n        this.markTagIndex(index);\n      }\n    }\n  }, {\n    key: \"isLastTagMarked\",\n    value: function isLastTagMarked() {\n      var _this$state6 = this.state,\n          chips = _this$state6.chips,\n          chipIndexToRemove = _this$state6.chipIndexToRemove;\n\n      var tagsCount = _.size(chips);\n\n      var isLastTagMarked = chipIndexToRemove === tagsCount - 1;\n      return isLastTagMarked;\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel(tag, shouldMarkTag) {\n      var typography = this.props.modifiers.typography;\n      var label = this.getLabel(tag);\n      return React.createElement(View, {\n        row: true,\n        centerV: true\n      }, shouldMarkTag && React.createElement(Image, {\n        style: [styles.removeIcon, tag.invalid && styles.basicTagStyle && styles.invalidTagRemoveIcon],\n        source: Assets.icons.x\n      }), React.createElement(Text, {\n        style: [tag.invalid ? shouldMarkTag ? styles.errorMessageWhileMarked : styles.errorMessage : styles.tagLabel, typography],\n        accessibilityLabel: label + \" tag\"\n      }, !tag.invalid && shouldMarkTag ? 'Remove' : label));\n    }\n  }, {\n    key: \"renderCharCounter\",\n    value: function renderCharCounter() {\n      var maxLength = this.props.maxLength;\n      var counter = this.state.chips.length;\n\n      if (maxLength) {\n        var color = getCounterTextColor(this.state.chips, this.props);\n        var counterText = getCounterText(counter, maxLength);\n        return React.createElement(Text, {\n          color: color,\n          style: styles.label,\n          accessibilityLabel: counter + \" out of \" + maxLength + \" max chips\"\n        }, counterText);\n      }\n    }\n  }, {\n    key: \"renderTextInput\",\n    value: function renderTextInput() {\n      var _this$props6 = this.props,\n          inputStyle = _this$props6.inputStyle,\n          selectionColor = _this$props6.selectionColor,\n          title = _this$props6.title,\n          others = _objectWithoutProperties(_this$props6, _excluded);\n\n      var value = this.state.value;\n      var isLastTagMarked = this.isLastTagMarked();\n      return React.createElement(View, {\n        style: styles.inputWrapper\n      }, React.createElement(TextField, _extends({\n        ref: this.input,\n        text80: true,\n        blurOnSubmit: false\n      }, others, {\n        maxLength: undefined,\n        title: this.props.chips ? undefined : title,\n        value: value,\n        onSubmitEditing: this.addTag,\n        onChangeText: this.onChangeText,\n        onKeyPress: this.onKeyPress,\n        enableErrors: false,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        hideUnderline: true,\n        selectionColor: isLastTagMarked ? 'transparent' : selectionColor,\n        style: [inputStyle, styles.alignTextCenter],\n        containerStyle: {\n          flexGrow: 0\n        },\n        collapsable: false,\n        accessibilityHint: !this.props.disableTagRemoval ? 'press keyboard delete button to remove last tag' : undefined\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          containerStyle = _this$props7.containerStyle,\n          hideUnderline = _this$props7.hideUnderline,\n          validationErrorMessage = _this$props7.validationErrorMessage,\n          leftElement = _this$props7.leftElement,\n          maxHeight = _this$props7.maxHeight,\n          chips = _this$props7.chips;\n      var chipIndexToRemove = this.state.chipIndexToRemove;\n      return React.createElement(View, {\n        style: [!hideUnderline && styles.withUnderline, containerStyle]\n      }, !!chips && this.renderTitleText(), React.createElement(View, {\n        style: [styles.tagListContainer, {\n          maxHeight: maxHeight\n        }]\n      }, leftElement, this.renderChipsContainer()), !hideUnderline && this.renderUnderline(), this.renderCharCounter(), validationErrorMessage ? React.createElement(View, null, React.createElement(Text, {\n        style: [styles.errorMessage, !!chipIndexToRemove && styles.errorMessageWhileMarked]\n      }, validationErrorMessage)) : null);\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      var _this$input$current2;\n\n      (_this$input$current2 = this.input.current) == null ? void 0 : _this$input$current2.blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var _this$input$current3;\n\n      (_this$input$current3 = this.input.current) == null ? void 0 : _this$input$current3.focus();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this$input$current4;\n\n      (_this$input$current4 = this.input.current) == null ? void 0 : _this$input$current4.clear();\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var tags = nextProps.tags,\n          chips = nextProps.chips;\n\n      if (tags && tags !== prevState.initialChips || chips && chips !== prevState.initialChips) {\n        return {\n          initialChips: nextProps.tags || nextProps.chips,\n          chips: nextProps.tags || nextProps.chips\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ChipsInput;\n}(Component);\n\nChipsInput.propTypes = {\n  tags: _pt.arrayOf(_pt.any),\n  chips: _pt.array,\n  getLabel: _pt.func,\n  renderTag: _pt.func,\n  onChangeTags: _pt.func,\n  onCreateTag: _pt.func,\n  onTagPress: _pt.func,\n  validationErrorMessage: _pt.string,\n  disableTagRemoval: _pt.bool,\n  disableTagAdding: _pt.bool,\n  hideUnderline: _pt.bool,\n  maxLength: _pt.number,\n  maxHeight: _pt.number,\n  leftElement: _pt.oneOfType([_pt.element, _pt.arrayOf(_pt.element)]),\n  value: _pt.any,\n  selectionColor: _pt.oneOfType([_pt.string, _pt.number])\n};\nChipsInput.displayName = 'ChipsInput';\nChipsInput.onChangeTagsActions = {\n  ADDED: 'added',\n  REMOVED: 'removed'\n};\nexport { ChipsInput };\nexport default asBaseComponent(ChipsInput);\nvar basicTagStyle = {\n  borderRadius: BorderRadiuses.br100,\n  paddingVertical: 4.5,\n  paddingHorizontal: 12,\n  marginRight: GUTTER_SPACING,\n  marginVertical: GUTTER_SPACING / 2\n};\nvar styles = StyleSheet.create({\n  withUnderline: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: ThemeManager.dividerColor\n  },\n  tagsList: {\n    minHeight: 38,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  tagListContainer: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  inputWrapper: {\n    flexGrow: 1,\n    minWidth: 120,\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  },\n  tag: {\n    borderWidth: 0,\n    paddingVertical: 5,\n    backgroundColor: Colors.primary\n  },\n  invalidTag: {\n    borderWidth: 1,\n    borderColor: Colors.red30,\n    backgroundColor: 'transparent'\n  },\n  basicTagStyle: _objectSpread({}, basicTagStyle),\n  invalidMarkedTag: {\n    borderColor: Colors.red10\n  },\n  tagMarked: {\n    backgroundColor: Colors.grey10\n  },\n  dismissIconStyle: {\n    width: 10,\n    height: 10,\n    marginRight: Spacings.s1\n  },\n  removeIcon: {\n    tintColor: Colors.white,\n    width: 10,\n    height: 10,\n    marginRight: 6\n  },\n  invalidTagRemoveIcon: {\n    tintColor: Colors.red10\n  },\n  tagLabel: _objectSpread(_objectSpread({}, Typography.text80), {}, {\n    color: Colors.white\n  }),\n  errorMessage: _objectSpread(_objectSpread({}, Typography.text80), {}, {\n    color: Colors.red30\n  }),\n  errorMessageWhileMarked: {\n    color: Colors.red10\n  },\n  label: _objectSpread({\n    marginTop: Spacings.s1,\n    alignSelf: 'flex-end',\n    height: (_Typography$text = Typography.text80) == null ? void 0 : _Typography$text.lineHeight\n  }, Typography.text80),\n  alignTextCenter: {\n    textAlignVertical: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/chipsInput/index.js"],"names":["_pt","_","React","Component","Constants","Colors","BorderRadiuses","ThemeManager","Typography","Spacings","Assets","LogService","asBaseComponent","TextField","View","TouchableOpacity","Text","Chip","getValidationBasedColor","getCounterTextColor","getCounterText","getChipDismissColor","isDisabled","GUTTER_SPACING","ChipsInput","props","input","createRef","scrollRef","addTag","onCreateTag","disableTagAdding","maxLength","chipsProps","chips","state","value","current","scrollToEnd","isNil","isEmpty","trim","length","setState","newChip","isFunction","label","newChips","invoke","onChangeTagsActions","ADDED","clear","markTagIndex","chipIndex","chipIndexToRemove","onChangeText","debounce","undefined","removeTag","tagsCount","size","hasNoValue","hasTags","disableTagRemoval","isUndefined","removeMarkedTag","onKeyPress","event","keyCode","get","pressedBackspace","backspaceKey","getLabel","item","isString","onFocus","isFocused","onBlur","renderTag","tag","index","tagStyle","shouldMarkTag","markedTagStyle","invalid","styles","invalidMarkedTag","tagMarked","defaultTagStyle","invalidTag","basicTagStyle","renderLabel","renderTagWrapper","onTagPress","renderNewChip","defaultChipProps","disabled","map","chip","selected","dismissColor","tagLabel","errorMessage","errorMessageWhileMarked","icons","x","xSmall","dismissIconStyle","renderTitleText","title","color","grey30","renderChips","renderFunction","renderUnderline","grey50","renderChipsContainer","maxHeight","scrollViewProps","Container","ScrollView","tagsList","renderTextInput","cloneDeep","tags","initialChips","deprecationWarn","component","oldProp","newProp","isAndroid","textInputHandle","findNodeHandle","NativeModules","TextInputDelKeyHandler","register","removedTag","splice","REMOVED","isLastTagMarked","typography","modifiers","removeIcon","invalidTagRemoveIcon","counter","counterText","inputStyle","selectionColor","others","inputWrapper","alignTextCenter","flexGrow","containerStyle","hideUnderline","validationErrorMessage","leftElement","withUnderline","tagListContainer","renderCharCounter","blur","focus","nextProps","prevState","propTypes","arrayOf","any","array","func","onChangeTags","string","bool","number","oneOfType","element","displayName","borderRadius","br100","paddingVertical","paddingHorizontal","marginRight","marginVertical","StyleSheet","create","borderBottomWidth","hairlineWidth","borderColor","dividerColor","minHeight","backgroundColor","flexDirection","flexWrap","minWidth","justifyContent","borderWidth","primary","red30","red10","grey10","width","height","s1","tintColor","white","text80","marginTop","alignSelf","lineHeight","textAlignVertical"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { NativeModules, StyleSheet, Image, findNodeHandle, ScrollView } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport { Colors, BorderRadiuses, ThemeManager, Typography, Spacings } from \"../../style\";\nimport Assets from \"../../assets\";\nimport { LogService } from \"../../services\";\nimport { asBaseComponent } from \"../../commons/new\"; // @ts-expect-error\n\nimport { TextField } from \"../inputs\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport Chip from \"../chip\";\nimport { getValidationBasedColor, getCounterTextColor, getCounterText, getChipDismissColor, isDisabled } from \"./Presenter\";\nconst GUTTER_SPACING = 8;\n\n/**\n * @description: Chips input component\n * @modifiers: Typography\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ChipsInput/ChipsInput.gif?raw=true\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n * @extends: TextField\n */\nclass ChipsInput extends Component {\n  static propTypes = {\n    /**\n      * DEPRECATED: use chips instead. list of tags. can be string boolean or custom object when implementing getLabel\n      */\n    tags: _pt.arrayOf(_pt.any),\n\n    /**\n      * list of tags. can be string boolean or custom object when implementing getLabel\n      */\n    chips: _pt.array,\n\n    /**\n       * callback for extracting the label out of the tag item\n       */\n    getLabel: _pt.func,\n\n    /**\n       * DEPRECATED: use chips instead. callback for custom rendering tag item\n       */\n    renderTag: _pt.func,\n\n    /**\n       * callback for onChangeTags event\n       */\n    onChangeTags: _pt.func,\n\n    /**\n       * DEPRECATED: use chips instead. callback for creating new tag out of input value (good for composing tag object)\n       */\n    onCreateTag: _pt.func,\n\n    /**\n       * DEPRECATED: use chips instead. callback for when pressing a tag in the following format (tagIndex, markedTagIndex) => {...}\n       */\n    onTagPress: _pt.func,\n\n    /**\n       * validation message error appears when tag isn't validate\n       */\n    validationErrorMessage: _pt.string,\n\n    /**\n       * if true, tags *removal* Ux won't be available\n       */\n    disableTagRemoval: _pt.bool,\n\n    /**\n       * if true, tags *adding* Ux (i.e. by 'submitting' the input text) won't be available\n       */\n    disableTagAdding: _pt.bool,\n\n    /**\n       * should hide input underline\n       */\n    hideUnderline: _pt.bool,\n\n    /**\n       *  Maximum numbers of chips \n       */\n    maxLength: _pt.number,\n\n    /** \n       * Chips inside a ScrollView \n       */\n    maxHeight: _pt.number,\n\n    /**\n       * Custom element before the chips, for example 'search' icon, 'To:' label etc' \n       */\n    leftElement: _pt.oneOfType([_pt.element, _pt.arrayOf(_pt.element)]),\n    value: _pt.any,\n    selectionColor: _pt.oneOfType([_pt.string, _pt.number])\n  };\n  static displayName = 'ChipsInput';\n  static onChangeTagsActions = {\n    ADDED: 'added',\n    REMOVED: 'removed'\n  };\n  input = React.createRef();\n  scrollRef = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n      chips: _.cloneDeep(props.tags || props.chips) || [],\n      chipIndexToRemove: undefined,\n      initialChips: props.tags || props.chips,\n      isFocused: this.input.current?.isFocused() || false\n    };\n\n    if (props.tags) {\n      LogService.deprecationWarn({\n        component: 'ChipsInput',\n        oldProp: 'tags',\n        newProp: 'chips'\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (Constants.isAndroid) {\n      const textInputHandle = findNodeHandle(this.input.current);\n\n      if (textInputHandle && NativeModules.TextInputDelKeyHandler) {\n        NativeModules.TextInputDelKeyHandler.register(textInputHandle);\n      }\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      tags,\n      chips\n    } = nextProps;\n\n    if (tags && tags !== prevState.initialChips || chips && chips !== prevState.initialChips) {\n      return {\n        initialChips: nextProps.tags || nextProps.chips,\n        chips: nextProps.tags || nextProps.chips\n      };\n    }\n\n    return null;\n  }\n\n  addTag = () => {\n    const {\n      onCreateTag,\n      disableTagAdding,\n      maxLength,\n      chips: chipsProps\n    } = this.props;\n    const {\n      value,\n      chips\n    } = this.state;\n\n    if (this.scrollRef?.current?.scrollToEnd) {\n      this.scrollRef?.current?.scrollToEnd();\n    }\n\n    if (disableTagAdding) {\n      return;\n    }\n\n    if (_.isNil(value) || _.isEmpty(value.trim())) {\n      return;\n    }\n\n    if (maxLength && this.state.chips.length >= maxLength) {\n      this.setState({\n        value: ''\n      });\n      return;\n    }\n\n    const newChip = _.isFunction(onCreateTag) ? onCreateTag(value) : chipsProps ? {\n      label: value\n    } : value;\n    const newChips = [...chips, newChip];\n    this.setState({\n      value: '',\n      chips: newChips\n    });\n\n    _.invoke(this.props, 'onChangeTags', newChips, ChipsInput.onChangeTagsActions.ADDED, newChip);\n\n    this.clear();\n  };\n\n  removeMarkedTag() {\n    const {\n      chips,\n      chipIndexToRemove\n    } = this.state;\n\n    if (!_.isUndefined(chipIndexToRemove)) {\n      const removedTag = chips[chipIndexToRemove];\n      chips.splice(chipIndexToRemove, 1);\n      this.setState({\n        chips,\n        chipIndexToRemove: undefined\n      });\n\n      _.invoke(this.props, 'onChangeTags', chips, ChipsInput.onChangeTagsActions.REMOVED, removedTag);\n    }\n  }\n\n  markTagIndex = chipIndex => {\n    this.setState({\n      chipIndexToRemove: chipIndex\n    });\n  };\n  onChangeText = _.debounce(value => {\n    this.setState({\n      value,\n      chipIndexToRemove: undefined\n    });\n\n    _.invoke(this.props, 'onChangeText', value);\n  }, 0);\n\n  onTagPress(index) {\n    const {\n      onTagPress\n    } = this.props;\n    const {\n      chipIndexToRemove\n    } = this.state; // custom press handler\n\n    if (onTagPress) {\n      onTagPress(index, chipIndexToRemove);\n      return;\n    } // default press handler\n\n\n    if (chipIndexToRemove === index) {\n      this.removeMarkedTag();\n    } else {\n      this.markTagIndex(index);\n    }\n  }\n\n  isLastTagMarked() {\n    const {\n      chips,\n      chipIndexToRemove\n    } = this.state;\n\n    const tagsCount = _.size(chips);\n\n    const isLastTagMarked = chipIndexToRemove === tagsCount - 1;\n    return isLastTagMarked;\n  }\n\n  removeTag = () => {\n    const {\n      value,\n      chips,\n      chipIndexToRemove\n    } = this.state;\n\n    const tagsCount = _.size(chips);\n\n    const hasNoValue = _.isEmpty(value);\n\n    const hasTags = tagsCount > 0;\n    const {\n      disableTagRemoval\n    } = this.props;\n\n    if (disableTagRemoval) {\n      return;\n    }\n\n    if (hasNoValue && hasTags && _.isUndefined(chipIndexToRemove)) {\n      this.setState({\n        chipIndexToRemove: tagsCount - 1\n      });\n    } else if (!_.isUndefined(chipIndexToRemove)) {\n      this.removeMarkedTag();\n    }\n  };\n  onKeyPress = event => {\n    _.invoke(this.props, 'onKeyPress', event);\n\n    const keyCode = _.get(event, 'nativeEvent.key');\n\n    const pressedBackspace = keyCode === Constants.backspaceKey;\n\n    if (pressedBackspace) {\n      this.removeTag();\n    }\n  };\n  getLabel = item => {\n    const {\n      getLabel\n    } = this.props;\n\n    if (getLabel) {\n      return getLabel(item);\n    }\n\n    if (_.isString(item)) {\n      return item;\n    }\n\n    return _.get(item, 'label');\n  };\n  onFocus = () => {\n    this.setState({\n      isFocused: true\n    });\n  };\n  onBlur = () => {\n    this.setState({\n      isFocused: false\n    });\n  };\n\n  renderLabel(tag, shouldMarkTag) {\n    const {\n      typography\n    } = this.props.modifiers;\n    const label = this.getLabel(tag);\n    return <View row centerV>\n        {shouldMarkTag && <Image style={[styles.removeIcon, tag.invalid && styles.basicTagStyle && styles.invalidTagRemoveIcon]} source={Assets.icons.x} />}\n        <Text style={[tag.invalid ? shouldMarkTag ? styles.errorMessageWhileMarked : styles.errorMessage : styles.tagLabel, typography]} accessibilityLabel={`${label} tag`}>\n          {!tag.invalid && shouldMarkTag ? 'Remove' : label}\n        </Text>\n      </View>;\n  }\n\n  renderTag = (tag, index) => {\n    const {\n      tagStyle,\n      renderTag\n    } = this.props;\n    const {\n      chipIndexToRemove\n    } = this.state;\n    const shouldMarkTag = chipIndexToRemove === index;\n    const markedTagStyle = tag.invalid ? styles.invalidMarkedTag : styles.tagMarked;\n    const defaultTagStyle = tag.invalid ? styles.invalidTag : styles.tag;\n\n    if (_.isFunction(renderTag)) {\n      return renderTag(tag, index, shouldMarkTag, this.getLabel(tag));\n    }\n\n    return <View key={index} style={[defaultTagStyle, tagStyle, basicTagStyle, shouldMarkTag && markedTagStyle]}>\n        {this.renderLabel(tag, shouldMarkTag)}\n      </View>;\n  };\n  renderTagWrapper = (tag, index) => {\n    return <TouchableOpacity key={index} activeOpacity={1} onPress={() => this.onTagPress(index)} accessibilityHint={!this.props.disableTagRemoval ? 'tap twice for remove tag mode' : undefined}>\n        {this.renderTag(tag, index)}\n      </TouchableOpacity>;\n  };\n  renderNewChip = () => {\n    const {\n      defaultChipProps\n    } = this.props;\n    const {\n      chipIndexToRemove,\n      chips\n    } = this.state;\n    const disabled = isDisabled(this.props);\n    return _.map(chips, (chip, index) => {\n      const selected = chipIndexToRemove === index;\n      const dismissColor = getChipDismissColor(chip, selected, defaultChipProps);\n      return <View center flexS marginT-2 marginB-2>\n          <Chip key={index} containerStyle={[styles.tag, chip.invalid && styles.invalidTag]} labelStyle={[styles.tagLabel, chip.invalid && styles.errorMessage, selected && !!chip.invalid && styles.errorMessageWhileMarked]} {...chip} {...defaultChipProps} disabled={disabled} marginR-s2 marginT-2 left={Assets.icons.x} onPress={_ => this.onTagPress(index)} onDismiss={selected ? () => this.onTagPress(index) : undefined} dismissColor={dismissColor} dismissIcon={Assets.icons.xSmall} dismissIconStyle={styles.dismissIconStyle} />\n        </View>;\n    });\n  };\n  renderTitleText = () => {\n    const {\n      title,\n      defaultChipProps\n    } = this.props;\n    const color = this.state.isFocused ? getValidationBasedColor(this.state.chips, defaultChipProps) : Colors.grey30;\n    return title && <Text text70L color={color}>{title}</Text>;\n  };\n  renderChips = () => {\n    const {\n      disableTagRemoval,\n      chips: chipsProps\n    } = this.props;\n    const {\n      chips\n    } = this.state;\n    const renderFunction = disableTagRemoval ? this.renderTag : this.renderTagWrapper;\n\n    if (chipsProps) {\n      return this.renderNewChip();\n    } else {\n      // The old way of creating the 'Chip' internally \n      return _.map(chips, (tag, index) => {\n        return <View>\n            {renderFunction(tag, index)}\n          </View>;\n      });\n    }\n  };\n\n  renderCharCounter() {\n    const {\n      maxLength\n    } = this.props;\n    const counter = this.state.chips.length;\n\n    if (maxLength) {\n      const color = getCounterTextColor(this.state.chips, this.props);\n      const counterText = getCounterText(counter, maxLength);\n      return <Text color={color} style={styles.label} accessibilityLabel={`${counter} out of ${maxLength} max chips`}>\n          {counterText}\n        </Text>;\n    }\n  }\n\n  renderUnderline = () => {\n    const {\n      isFocused,\n      chips\n    } = this.state;\n    const {\n      defaultChipProps\n    } = this.props;\n    const color = getValidationBasedColor(chips, defaultChipProps);\n    return <View height={1} marginT-10 backgroundColor={isFocused ? color : Colors.grey50} />;\n  };\n\n  renderTextInput() {\n    const {\n      inputStyle,\n      selectionColor,\n      title,\n      ...others\n    } = this.props;\n    const {\n      value\n    } = this.state;\n    const isLastTagMarked = this.isLastTagMarked();\n    return <View style={styles.inputWrapper}>\n        <TextField ref={this.input} text80 blurOnSubmit={false} {...others} maxLength={undefined} title={this.props.chips ? undefined : title} value={value} onSubmitEditing={this.addTag} onChangeText={this.onChangeText} onKeyPress={this.onKeyPress} enableErrors={false} onFocus={this.onFocus} onBlur={this.onBlur} hideUnderline selectionColor={isLastTagMarked ? 'transparent' : selectionColor} style={[inputStyle, styles.alignTextCenter]} containerStyle={{\n        flexGrow: 0\n      }} collapsable={false} accessibilityHint={!this.props.disableTagRemoval ? 'press keyboard delete button to remove last tag' : undefined} />\n      </View>;\n  }\n\n  renderChipsContainer = () => {\n    const {\n      maxHeight,\n      scrollViewProps\n    } = this.props;\n    const Container = maxHeight ? ScrollView : View;\n    return <Container ref={this.scrollRef} showsVerticalScrollIndicator={false} style={!maxHeight && styles.tagsList} contentContainerStyle={styles.tagsList} {...scrollViewProps}>\n        {this.renderChips()}\n        {this.renderTextInput()}\n      </Container>;\n  };\n\n  render() {\n    const {\n      containerStyle,\n      hideUnderline,\n      validationErrorMessage,\n      leftElement,\n      maxHeight,\n      chips\n    } = this.props;\n    const {\n      chipIndexToRemove\n    } = this.state;\n    return <View style={[!hideUnderline && styles.withUnderline, containerStyle]}>\n        {!!chips && this.renderTitleText()}\n        <View style={[styles.tagListContainer, {\n        maxHeight\n      }]}>\n          {leftElement}\n          {this.renderChipsContainer()}\n        </View>\n        {!hideUnderline && this.renderUnderline()}\n        {this.renderCharCounter()}\n        {validationErrorMessage ? <View>\n              <Text style={[styles.errorMessage, !!chipIndexToRemove && styles.errorMessageWhileMarked]}>\n                {validationErrorMessage}\n              </Text>\n            </View> : null}\n      </View>;\n  }\n\n  blur() {\n    this.input.current?.blur();\n  }\n\n  focus() {\n    this.input.current?.focus();\n  }\n\n  clear() {\n    this.input.current?.clear();\n  }\n\n}\n\nexport { ChipsInput }; // For tests\n\nexport default asBaseComponent(ChipsInput);\nconst basicTagStyle = {\n  borderRadius: BorderRadiuses.br100,\n  paddingVertical: 4.5,\n  paddingHorizontal: 12,\n  marginRight: GUTTER_SPACING,\n  marginVertical: GUTTER_SPACING / 2\n};\nconst styles = StyleSheet.create({\n  withUnderline: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderColor: ThemeManager.dividerColor\n  },\n  tagsList: {\n    minHeight: 38,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  tagListContainer: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  inputWrapper: {\n    flexGrow: 1,\n    minWidth: 120,\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  },\n  tag: {\n    borderWidth: 0,\n    paddingVertical: 5,\n    backgroundColor: Colors.primary\n  },\n  invalidTag: {\n    borderWidth: 1,\n    borderColor: Colors.red30,\n    backgroundColor: 'transparent'\n  },\n  basicTagStyle: { ...basicTagStyle\n  },\n  invalidMarkedTag: {\n    borderColor: Colors.red10\n  },\n  tagMarked: {\n    backgroundColor: Colors.grey10\n  },\n  dismissIconStyle: {\n    width: 10,\n    height: 10,\n    marginRight: Spacings.s1\n  },\n  removeIcon: {\n    tintColor: Colors.white,\n    width: 10,\n    height: 10,\n    marginRight: 6\n  },\n  invalidTagRemoveIcon: {\n    tintColor: Colors.red10\n  },\n  tagLabel: { ...Typography.text80,\n    color: Colors.white\n  },\n  errorMessage: { ...Typography.text80,\n    color: Colors.red30\n  },\n  errorMessageWhileMarked: {\n    color: Colors.red10\n  },\n  label: {\n    marginTop: Spacings.s1,\n    alignSelf: 'flex-end',\n    height: Typography.text80?.lineHeight,\n    ...Typography.text80\n  },\n  alignTextCenter: {\n    textAlignVertical: 'center'\n  }\n});"]},"metadata":{},"sourceType":"module"}