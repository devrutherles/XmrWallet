{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../../style\";\nimport Text from \"../../components/text\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport FieldContext from \"./FieldContext\";\n\nvar Label = function Label(_ref) {\n  var label = _ref.label,\n      _ref$labelColor = _ref.labelColor,\n      labelColor = _ref$labelColor === void 0 ? Colors.grey10 : _ref$labelColor,\n      labelStyle = _ref.labelStyle,\n      labelProps = _ref.labelProps,\n      validationMessagePosition = _ref.validationMessagePosition,\n      floatingPlaceholder = _ref.floatingPlaceholder;\n  var context = useContext(FieldContext);\n  var forceHidingLabel = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n\n  if ((label || floatingPlaceholder) && !forceHidingLabel) {\n    return React.createElement(Text, _extends({\n      color: getColorByState(labelColor, context),\n      style: [styles.label, labelStyle, floatingPlaceholder && styles.dummyPlaceholder]\n    }, labelProps), label);\n  }\n\n  return null;\n};\n\nLabel.propTypes = {\n  label: _pt.string,\n  floatingPlaceholder: _pt.bool\n};\nvar styles = StyleSheet.create({\n  label: {\n    minHeight: 20\n  },\n  dummyPlaceholder: {\n    opacity: 0\n  }\n});\nLabel.displayName = 'Incubator.TextField';\nexport default Label;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/incubator/TextField/Label.js"],"names":["_pt","React","useContext","Colors","Text","ValidationMessagePosition","getColorByState","FieldContext","Label","label","labelColor","grey10","labelStyle","labelProps","validationMessagePosition","floatingPlaceholder","context","forceHidingLabel","isValid","TOP","styles","dummyPlaceholder","propTypes","string","bool","StyleSheet","create","minHeight","opacity","displayName"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,SAASC,MAAT;AACA,OAAOC,IAAP;AACA,SAASC,yBAAT;AACA,SAASC,eAAT;AACA,OAAOC,YAAP;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOR;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,6BALJC,UAKI;AAAA,MALJA,UAKI,gCALSP,MAAM,CAACQ,MAKhB;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,UAGI,QAHJA,UAGI;AAAA,MAFJC,yBAEI,QAFJA,yBAEI;AAAA,MADJC,mBACI,QADJA,mBACI;AACJ,MAAMC,OAAO,GAAGd,UAAU,CAACK,YAAD,CAA1B;AACA,MAAMU,gBAAgB,GAAG,CAACD,OAAO,CAACE,OAAT,IAAoBJ,yBAAyB,KAAKT,yBAAyB,CAACc,GAArG;;AAEA,MAAI,CAACV,KAAK,IAAIM,mBAAV,KAAkC,CAACE,gBAAvC,EAAyD;AACvD,WAAO,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEX,eAAe,CAACI,UAAD,EAAaM,OAAb,CAA5B;AAAmD,MAAA,KAAK,EAAE,CAACI,MAAM,CAACX,KAAR,EAAeG,UAAf,EAA2BG,mBAAmB,IAAIK,MAAM,CAACC,gBAAzD;AAA1D,OAA0IR,UAA1I,GACFJ,KADE,CAAP;AAGD;;AAED,SAAO,IAAP;AACD,CAlBD;;AAoBAD,KAAK,CAACc,SAAN,GAAkB;AAIhBb,EAAAA,KAAK,EAAET,GAAG,CAACuB,MAJK;AAKhBR,EAAAA,mBAAmB,EAAEf,GAAG,CAACwB;AALT,CAAlB;AAOA,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BjB,EAAAA,KAAK,EAAE;AACLkB,IAAAA,SAAS,EAAE;AADN,GADwB;AAI/BN,EAAAA,gBAAgB,EAAE;AAChBO,IAAAA,OAAO,EAAE;AADO;AAJa,CAAlB,CAAf;AAQApB,KAAK,CAACqB,WAAN,GAAoB,qBAApB;AACA,eAAerB,KAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors } from \"../../style\";\nimport Text from \"../../components/text\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport FieldContext from \"./FieldContext\";\n\nconst Label = ({\n  label,\n  labelColor = Colors.grey10,\n  labelStyle,\n  labelProps,\n  validationMessagePosition,\n  floatingPlaceholder\n}) => {\n  const context = useContext(FieldContext);\n  const forceHidingLabel = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n\n  if ((label || floatingPlaceholder) && !forceHidingLabel) {\n    return <Text color={getColorByState(labelColor, context)} style={[styles.label, labelStyle, floatingPlaceholder && styles.dummyPlaceholder]} {...labelProps}>\n        {label}\n      </Text>;\n  }\n\n  return null;\n};\n\nLabel.propTypes = {\n  /**\n     * Field label\n     */\n  label: _pt.string,\n  floatingPlaceholder: _pt.bool\n};\nconst styles = StyleSheet.create({\n  label: {\n    minHeight: 20\n  },\n  dummyPlaceholder: {\n    opacity: 0\n  }\n});\nLabel.displayName = 'Incubator.TextField';\nexport default Label;"]},"metadata":{},"sourceType":"module"}