{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"useNative\", \"style\", \"modifiers\", \"forwardedRef\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport RNTouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport IncubatorTouchableOpacity from \"../../incubator/TouchableOpacity\";\n\nvar TouchableOpacity = function (_PureComponent) {\n  _inherits(TouchableOpacity, _PureComponent);\n\n  var _super = _createSuper(TouchableOpacity);\n\n  function TouchableOpacity(props) {\n    var _this;\n\n    _classCallCheck(this, TouchableOpacity);\n\n    _this = _super.call(this, props);\n\n    _this.onPressIn = function () {\n      var _this$props;\n\n      _this.setState({\n        active: true\n      });\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.props.onPressIn == null ? void 0 : (_this$props = _this.props).onPressIn.apply(_this$props, args);\n    };\n\n    _this.onPressOut = function () {\n      var _this$props2;\n\n      _this.setState({\n        active: false\n      });\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.props.onPressOut == null ? void 0 : (_this$props2 = _this.props).onPressOut.apply(_this$props2, args);\n    };\n\n    _this.state = {\n      active: false\n    };\n    var _props$throttleTime = props.throttleTime,\n        throttleTime = _props$throttleTime === void 0 ? 0 : _props$throttleTime,\n        _props$throttleOption = props.throttleOptions,\n        throttleOptions = _props$throttleOption === void 0 ? {\n      leading: true,\n      trailing: false\n    } : _props$throttleOption;\n    _this.onPress = _.throttle(_this.onPress.bind(_assertThisInitialized(_this)), throttleTime, throttleOptions);\n    return _this;\n  }\n\n  _createClass(TouchableOpacity, [{\n    key: \"getAccessibilityInfo\",\n    value: function getAccessibilityInfo() {\n      var disabled = this.props.disabled;\n      return {\n        accessibilityRole: 'button',\n        accessibilityStates: disabled ? ['disabled'] : []\n      };\n    }\n  }, {\n    key: \"backgroundColorStyle\",\n    get: function get() {\n      var _this$props3 = this.props,\n          propsBackgroundColor = _this$props3.backgroundColor,\n          modifiers = _this$props3.modifiers;\n      var backgroundColor = propsBackgroundColor || modifiers.backgroundColor;\n\n      if (backgroundColor) {\n        return {\n          backgroundColor: backgroundColor\n        };\n      }\n    }\n  }, {\n    key: \"activeBackgroundStyle\",\n    get: function get() {\n      var active = this.state.active;\n      var activeBackgroundColor = this.props.activeBackgroundColor;\n\n      if (active && activeBackgroundColor) {\n        return {\n          backgroundColor: activeBackgroundColor\n        };\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          useNative = _this$props4.useNative,\n          style = _this$props4.style,\n          modifiers = _this$props4.modifiers,\n          forwardedRef = _this$props4.forwardedRef,\n          others = _objectWithoutProperties(_this$props4, _excluded);\n\n      var borderRadius = modifiers.borderRadius,\n          paddings = modifiers.paddings,\n          margins = modifiers.margins,\n          alignments = modifiers.alignments,\n          flexStyle = modifiers.flexStyle;\n\n      if (useNative) {\n        return React.createElement(IncubatorTouchableOpacity, this.props);\n      }\n\n      return React.createElement(RNTouchableOpacity, _extends({}, this.getAccessibilityInfo(), others, {\n        onPress: this.onPress,\n        onPressIn: this.onPressIn,\n        onPressOut: this.onPressOut,\n        style: [this.backgroundColorStyle, borderRadius && {\n          borderRadius: borderRadius\n        }, flexStyle, paddings, margins, alignments, style, this.activeBackgroundStyle],\n        ref: forwardedRef\n      }));\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress() {\n      var _this$props$onPress, _this$props5;\n\n      (_this$props$onPress = (_this$props5 = this.props).onPress) == null ? void 0 : _this$props$onPress.call(_this$props5, this.props);\n    }\n  }]);\n\n  return TouchableOpacity;\n}(PureComponent);\n\nTouchableOpacity.propTypes = {\n  backgroundColor: _pt.string,\n  throttleTime: _pt.number,\n  throttleOptions: _pt.shape({\n    leading: _pt.bool.isRequired,\n    trailing: _pt.bool.isRequired\n  }),\n  activeBackgroundColor: _pt.string,\n  useNative: _pt.bool,\n  customValue: _pt.any,\n  onPress: _pt.func\n};\nTouchableOpacity.displayName = 'TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/touchableOpacity/index.js"],"names":["_pt","_","React","PureComponent","asBaseComponent","forwardRef","IncubatorTouchableOpacity","TouchableOpacity","props","onPressIn","setState","active","args","onPressOut","state","throttleTime","throttleOptions","leading","trailing","onPress","throttle","bind","disabled","accessibilityRole","accessibilityStates","propsBackgroundColor","backgroundColor","modifiers","activeBackgroundColor","useNative","style","forwardedRef","others","borderRadius","paddings","margins","alignments","flexStyle","getAccessibilityInfo","backgroundColorStyle","activeBackgroundStyle","propTypes","string","number","shape","bool","isRequired","customValue","any","func","displayName"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { TouchableOpacity as RNTouchableOpacity } from 'react-native';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport IncubatorTouchableOpacity from \"../../incubator/TouchableOpacity\";\n\n/**\n * @description: A wrapper for TouchableOpacity component. Support onPress, throttling and activeBackgroundColor\n * @modifiers: margins, paddings, alignments, background, borderRadius\n * @extends: TouchableOpacity\n * @extendsLink: https://reactnative.dev/docs/touchableopacity\n * @gif: https://media.giphy.com/media/xULW8AMIgw7l31zjm8/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/src/components/touchableOpacity/index.tsx\n */\nclass TouchableOpacity extends PureComponent {\n  static propTypes = {\n    /**\n         * background color for TouchableOpacity\n         */\n    backgroundColor: _pt.string,\n\n    /**\n         * throttle time in MS for onPress callback\n         */\n    throttleTime: _pt.number,\n\n    /**\n         * throttle options {leading, trailing}\n         */\n    throttleOptions: _pt.shape({\n      leading: _pt.bool.isRequired,\n      trailing: _pt.bool.isRequired\n    }),\n\n    /**\n         * Apply background color on TouchableOpacity when active (press is on)\n         */\n    activeBackgroundColor: _pt.string,\n\n    /**\n         * Should use a more native touchable opacity component\n         */\n    useNative: _pt.bool,\n\n    /**\n         * Custom value of any type to pass on to TouchableOpacity and receive back in onPress callback\n         */\n    customValue: _pt.any,\n    onPress: _pt.func\n  };\n  static displayName = 'TouchableOpacity';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false\n    };\n    const {\n      throttleTime = 0,\n      throttleOptions = {\n        leading: true,\n        trailing: false\n      }\n    } = props;\n    this.onPress = _.throttle(this.onPress.bind(this), throttleTime, throttleOptions);\n  }\n\n  getAccessibilityInfo() {\n    const {\n      disabled\n    } = this.props;\n    return {\n      accessibilityRole: 'button',\n      accessibilityStates: disabled ? ['disabled'] : []\n    };\n  }\n\n  onPressIn = (...args) => {\n    this.setState({\n      active: true\n    }); //@ts-expect-error\n\n    this.props.onPressIn?.(...args);\n  };\n  onPressOut = (...args) => {\n    this.setState({\n      active: false\n    }); //@ts-expect-error\n\n    this.props.onPressOut?.(...args);\n  };\n\n  get backgroundColorStyle() {\n    const {\n      backgroundColor: propsBackgroundColor,\n      modifiers\n    } = this.props;\n    const backgroundColor = propsBackgroundColor || modifiers.backgroundColor;\n\n    if (backgroundColor) {\n      return {\n        backgroundColor\n      };\n    }\n  }\n\n  get activeBackgroundStyle() {\n    const {\n      active\n    } = this.state;\n    const {\n      activeBackgroundColor\n    } = this.props;\n\n    if (active && activeBackgroundColor) {\n      return {\n        backgroundColor: activeBackgroundColor\n      };\n    }\n  }\n\n  render() {\n    const {\n      useNative,\n      style,\n      modifiers,\n      forwardedRef,\n      ...others\n    } = this.props;\n    const {\n      borderRadius,\n      paddings,\n      margins,\n      alignments,\n      flexStyle\n    } = modifiers;\n\n    if (useNative) {\n      // @ts-ignore\n      return <IncubatorTouchableOpacity {...this.props} />;\n    }\n\n    return (// @ts-ignore\n      <RNTouchableOpacity {...this.getAccessibilityInfo()} {...others} onPress={this.onPress} onPressIn={this.onPressIn} onPressOut={this.onPressOut} style={[this.backgroundColorStyle, borderRadius && {\n        borderRadius\n      }, flexStyle, paddings, margins, alignments, style, this.activeBackgroundStyle]} ref={forwardedRef} />\n    );\n  }\n\n  onPress() {\n    this.props.onPress?.(this.props);\n  }\n\n}\n\nexport default asBaseComponent(forwardRef(TouchableOpacity));"]},"metadata":{},"sourceType":"module"}