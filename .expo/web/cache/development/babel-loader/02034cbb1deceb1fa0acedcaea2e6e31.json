{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { Constants } from \"../../helpers\";\nimport { Colors, BorderRadiuses } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nvar INNER_PADDING = 2;\nvar DEFAULT_WIDTH = 42;\nvar DEFAULT_HEIGHT = 24;\nvar DEFAULT_THUMB_SIZE = 20;\n\nvar Switch = function (_Component) {\n  _inherits(Switch, _Component);\n\n  var _super = _createSuper(Switch);\n\n  function Switch() {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      thumbPosition: new Animated.Value(_this.props.value ? 1 : 0)\n    };\n    _this.styles = createStyles(_this.props);\n\n    _this.onPress = function () {\n      var disabled = _this.props.disabled;\n\n      if (!disabled) {\n        _this.props.onValueChange == null ? void 0 : _this.props.onValueChange(!_this.props.value);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var value = this.props.value;\n\n      if (prevProps.value !== value) {\n        this.toggle(value);\n      }\n    }\n  }, {\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          value = _this$props.value;\n      return {\n        accessible: true,\n        accessibilityRole: 'switch',\n        accessibilityStates: disabled ? ['disabled'] : value ? ['checked'] : ['unchecked'],\n        accessibilityValue: {\n          text: value ? '1' : '0'\n        }\n      };\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      var thumbPosition = this.state.thumbPosition;\n      Animated.timing(thumbPosition, {\n        toValue: value ? 1 : 0,\n        duration: 200,\n        easing: Easing.bezier(0.77, 0.0, 0.175, 1.0),\n        useNativeDriver: true\n      }).start();\n    }\n  }, {\n    key: \"calcThumbOnPosition\",\n    value: function calcThumbOnPosition() {\n      var props = this.props;\n      var width = props.width || DEFAULT_WIDTH;\n      var thumbSize = props.thumbSize || DEFAULT_THUMB_SIZE;\n      var position = width - (2 * INNER_PADDING + thumbSize);\n      position *= Constants.isRTL ? -1 : 1;\n      return position;\n    }\n  }, {\n    key: \"getSwitchStyle\",\n    value: function getSwitchStyle() {\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          onColor = _this$props2.onColor,\n          offColor = _this$props2.offColor,\n          propsStyle = _this$props2.style,\n          disabled = _this$props2.disabled,\n          disabledColor = _this$props2.disabledColor;\n      var style = [this.styles.switch];\n\n      if (disabled) {\n        style.push(disabledColor ? {\n          backgroundColor: disabledColor\n        } : this.styles.switchDisabled);\n      } else if (value) {\n        style.push(onColor ? {\n          backgroundColor: onColor\n        } : this.styles.switchOn);\n      } else {\n        style.push(offColor ? {\n          backgroundColor: offColor\n        } : this.styles.switchOff);\n      }\n\n      style.push(propsStyle);\n      return style;\n    }\n  }, {\n    key: \"renderThumb\",\n    value: function renderThumb() {\n      var thumbStyle = this.props.thumbStyle;\n      var thumbPosition = this.state.thumbPosition;\n      var interpolatedTranslateX = thumbPosition.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, this.calcThumbOnPosition()]\n      });\n      var thumbPositionStyle = {\n        transform: [{\n          translateX: interpolatedTranslateX\n        }]\n      };\n      return React.createElement(Animated.View, {\n        style: [this.styles.thumb, thumbPositionStyle, thumbStyle]\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var others = _extends({}, this.props);\n\n      return React.createElement(TouchableOpacity, _extends({}, this.getAccessibilityProps(), {\n        activeOpacity: 1\n      }, others, {\n        style: this.getSwitchStyle(),\n        onPress: this.onPress\n      }), this.renderThumb());\n    }\n  }]);\n\n  return Switch;\n}(Component);\n\nSwitch.propTypes = {\n  value: _pt.bool,\n  onValueChange: _pt.func,\n  disabled: _pt.bool,\n  width: _pt.number,\n  height: _pt.number,\n  thumbSize: _pt.number,\n  testID: _pt.string\n};\nSwitch.displayName = 'Switch';\n\nfunction createStyles(_ref) {\n  var _ref$width = _ref.width,\n      width = _ref$width === void 0 ? DEFAULT_WIDTH : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? DEFAULT_HEIGHT : _ref$height,\n      _ref$onColor = _ref.onColor,\n      onColor = _ref$onColor === void 0 ? Colors.primary : _ref$onColor,\n      _ref$offColor = _ref.offColor,\n      offColor = _ref$offColor === void 0 ? Colors.getColorTint(Colors.primary, 60) : _ref$offColor,\n      _ref$disabledColor = _ref.disabledColor,\n      disabledColor = _ref$disabledColor === void 0 ? Colors.grey70 : _ref$disabledColor,\n      _ref$thumbColor = _ref.thumbColor,\n      thumbColor = _ref$thumbColor === void 0 ? Colors.white : _ref$thumbColor,\n      _ref$thumbSize = _ref.thumbSize,\n      thumbSize = _ref$thumbSize === void 0 ? DEFAULT_THUMB_SIZE : _ref$thumbSize;\n  return StyleSheet.create({\n    switch: {\n      width: width,\n      height: height,\n      borderRadius: BorderRadiuses.br100,\n      justifyContent: 'center',\n      padding: INNER_PADDING\n    },\n    switchOn: {\n      backgroundColor: onColor\n    },\n    switchOff: {\n      backgroundColor: offColor\n    },\n    switchDisabled: {\n      backgroundColor: disabledColor\n    },\n    thumb: {\n      width: thumbSize,\n      height: thumbSize,\n      borderRadius: thumbSize / 2,\n      backgroundColor: thumbColor\n    }\n  });\n}\n\nexport default asBaseComponent(Switch);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/switch/index.js"],"names":["_pt","React","Component","Constants","Colors","BorderRadiuses","asBaseComponent","TouchableOpacity","INNER_PADDING","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_THUMB_SIZE","Switch","state","thumbPosition","Animated","Value","props","value","styles","createStyles","onPress","disabled","onValueChange","prevProps","toggle","accessible","accessibilityRole","accessibilityStates","accessibilityValue","text","timing","toValue","duration","easing","Easing","bezier","useNativeDriver","start","width","thumbSize","position","isRTL","onColor","offColor","propsStyle","style","disabledColor","switch","push","backgroundColor","switchDisabled","switchOn","switchOff","thumbStyle","interpolatedTranslateX","interpolate","inputRange","outputRange","calcThumbOnPosition","thumbPositionStyle","transform","translateX","thumb","others","getAccessibilityProps","getSwitchStyle","renderThumb","propTypes","bool","func","number","height","testID","string","displayName","primary","getColorTint","grey70","thumbColor","white","StyleSheet","create","borderRadius","br100","justifyContent","padding"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport { StyleSheet, Animated, Easing } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport { Colors, BorderRadiuses } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nconst INNER_PADDING = 2;\nconst DEFAULT_WIDTH = 42;\nconst DEFAULT_HEIGHT = 24;\nconst DEFAULT_THUMB_SIZE = 20;\n\n/**\n * @description: Switch component for toggling boolean value related to some context\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SwitchScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Switch/Switch.gif?raw=true\n */\nclass Switch extends Component {\n  static propTypes = {\n    /**\n       * The value of the switch. If true the switch will be turned on. Default value is false\n       */\n    value: _pt.bool,\n\n    /**\n       * Invoked with the new value when the value changes\n       */\n    onValueChange: _pt.func,\n\n    /**\n       * Whether the switch should be disabled\n       */\n    disabled: _pt.bool,\n\n    /**\n       * The Switch width\n       */\n    width: _pt.number,\n\n    /**\n       * The Switch height\n       */\n    height: _pt.number,\n\n    /**\n       * The Switch's thumb size (width & height)\n       */\n    thumbSize: _pt.number,\n    testID: _pt.string\n  };\n  static displayName = 'Switch';\n  state = {\n    thumbPosition: new Animated.Value(this.props.value ? 1 : 0)\n  };\n  styles = createStyles(this.props);\n\n  componentDidUpdate(prevProps) {\n    const {\n      value\n    } = this.props;\n\n    if (prevProps.value !== value) {\n      this.toggle(value);\n    }\n  }\n\n  getAccessibilityProps() {\n    const {\n      disabled,\n      value\n    } = this.props;\n    return {\n      accessible: true,\n      accessibilityRole: 'switch',\n      accessibilityStates: disabled ? ['disabled'] : value ? ['checked'] : ['unchecked'],\n      accessibilityValue: {\n        text: value ? '1' : '0'\n      }\n    };\n  }\n\n  toggle(value) {\n    const {\n      thumbPosition\n    } = this.state;\n    Animated.timing(thumbPosition, {\n      toValue: value ? 1 : 0,\n      duration: 200,\n      easing: Easing.bezier(0.77, 0.0, 0.175, 1.0),\n      useNativeDriver: true\n    }).start();\n  }\n\n  onPress = () => {\n    const {\n      disabled\n    } = this.props;\n\n    if (!disabled) {\n      this.props.onValueChange?.(!this.props.value);\n    }\n  };\n\n  calcThumbOnPosition() {\n    const props = this.props;\n    const width = props.width || DEFAULT_WIDTH;\n    const thumbSize = props.thumbSize || DEFAULT_THUMB_SIZE;\n    let position = width - (2 * INNER_PADDING + thumbSize);\n    position *= Constants.isRTL ? -1 : 1;\n    return position;\n  }\n\n  getSwitchStyle() {\n    const {\n      value,\n      onColor,\n      offColor,\n      style: propsStyle,\n      disabled,\n      disabledColor\n    } = this.props;\n    const style = [this.styles.switch];\n\n    if (disabled) {\n      style.push(disabledColor ? {\n        backgroundColor: disabledColor\n      } : this.styles.switchDisabled);\n    } else if (value) {\n      style.push(onColor ? {\n        backgroundColor: onColor\n      } : this.styles.switchOn);\n    } else {\n      style.push(offColor ? {\n        backgroundColor: offColor\n      } : this.styles.switchOff);\n    }\n\n    style.push(propsStyle);\n    return style;\n  }\n\n  renderThumb() {\n    const {\n      thumbStyle\n    } = this.props;\n    const {\n      thumbPosition\n    } = this.state;\n    const interpolatedTranslateX = thumbPosition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, this.calcThumbOnPosition()]\n    });\n    const thumbPositionStyle = {\n      transform: [{\n        translateX: interpolatedTranslateX\n      }]\n    };\n    return <Animated.View style={[this.styles.thumb, thumbPositionStyle, thumbStyle]} />;\n  }\n\n  render() {\n    const { ...others\n    } = this.props;\n    return (// @ts-ignore\n      <TouchableOpacity {...this.getAccessibilityProps()} activeOpacity={1} {...others} style={this.getSwitchStyle()} onPress={this.onPress}>\n        {this.renderThumb()}\n      </TouchableOpacity>\n    );\n  }\n\n}\n\nfunction createStyles({\n  width = DEFAULT_WIDTH,\n  height = DEFAULT_HEIGHT,\n  onColor = Colors.primary,\n  offColor = Colors.getColorTint(Colors.primary, 60),\n  disabledColor = Colors.grey70,\n  thumbColor = Colors.white,\n  thumbSize = DEFAULT_THUMB_SIZE\n}) {\n  return StyleSheet.create({\n    switch: {\n      width,\n      height,\n      borderRadius: BorderRadiuses.br100,\n      justifyContent: 'center',\n      padding: INNER_PADDING\n    },\n    switchOn: {\n      backgroundColor: onColor\n    },\n    switchOff: {\n      backgroundColor: offColor\n    },\n    switchDisabled: {\n      backgroundColor: disabledColor\n    },\n    thumb: {\n      width: thumbSize,\n      height: thumbSize,\n      borderRadius: thumbSize / 2,\n      backgroundColor: thumbColor\n    }\n  });\n}\n\nexport default asBaseComponent(Switch);"]},"metadata":{},"sourceType":"module"}