{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport RNTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport BaseInput from \"../baseInput\";\n\nvar TextArea = function (_BaseInput) {\n  _inherits(TextArea, _BaseInput);\n\n  var _super = _createSuper(TextArea);\n\n  function TextArea() {\n    _classCallCheck(this, TextArea);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextArea, [{\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var value = this.state.value;\n      var typography = this.getTypography();\n      var inputStyle = [this.styles.input, typography];\n      return React.createElement(View, {\n        style: this.styles.container\n      }, React.createElement(RNTextInput, _extends({}, this.props, {\n        value: value,\n        multiline: true,\n        style: inputStyle,\n        underlineColorAndroid: \"transparent\",\n        onChangeText: this.onChangeText,\n        ref: function ref(input) {\n          _this.input = input;\n        }\n      })));\n    }\n  }]);\n\n  return TextArea;\n}(BaseInput);\n\nTextArea.displayName = 'TextArea';\nTextArea.propTypes = _objectSpread(_objectSpread({}, RNTextInput.propTypes), BaseInput.propTypes);\nexport { TextArea as default };\n\nfunction createStyles() {\n  return StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    input: {\n      flex: 1,\n      justifyContent: 'flex-start',\n      alignItems: 'flex-start',\n      textAlignVertical: 'top'\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/textArea/index.js"],"names":["React","BaseInput","TextArea","styles","createStyles","props","value","state","typography","getTypography","inputStyle","input","container","onChangeText","displayName","propTypes","RNTextInput","StyleSheet","create","flex","justifyContent","alignItems","textAlignVertical"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,SAAP;;IAUqBC,Q;;;;;;;;;;;;;WAQnB,0BAAiB;AACf,WAAKC,MAAL,GAAcC,YAAY,CAAC,KAAKC,KAAN,CAA1B;AACD;;;WAED,kBAAS;AAAA;;AACP,UAAOC,KAAP,GAAgB,KAAKC,KAArB,CAAOD,KAAP;AACA,UAAME,UAAU,GAAG,KAAKC,aAAL,EAAnB;AACA,UAAMC,UAAU,GAAG,CAAC,KAAKP,MAAL,CAAYQ,KAAb,EAAoBH,UAApB,CAAnB;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKL,MAAL,CAAYS;AAAzB,SACE,oBAAC,WAAD,eACM,KAAKP,KADX;AAEE,QAAA,KAAK,EAAEC,KAFT;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,KAAK,EAAEI,UAJT;AAKE,QAAA,qBAAqB,EAAC,aALxB;AAME,QAAA,YAAY,EAAE,KAAKG,YANrB;AAOE,QAAA,GAAG,EAAE,aAAAF,KAAK,EAAI;AACZ,UAAA,KAAI,CAACA,KAAL,GAAaA,KAAb;AACD;AATH,SADF,CADF;AAeD;;;;EA/BmCV,S;;AAAjBC,Q,CACZY,W,GAAc,U;AADFZ,Q,CAGZa,S,mCACFC,WAAW,CAACD,S,GACZd,SAAS,CAACc,S;SALIb,Q;;AAkCrB,SAASE,YAAT,GAAwB;AACtB,SAAOa,UAAU,CAACC,MAAX,CAAkB;AACvBN,IAAAA,SAAS,EAAE;AACTO,MAAAA,IAAI,EAAE;AADG,KADY;AAIvBR,IAAAA,KAAK,EAAE;AACLQ,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,cAAc,EAAE,YAFX;AAGLC,MAAAA,UAAU,EAAE,YAHP;AAILC,MAAAA,iBAAiB,EAAE;AAJd;AAJgB,GAAlB,CAAP;AAWD","sourcesContent":["import React from 'react';\nimport {View, TextInput as RNTextInput, StyleSheet} from 'react-native';\nimport BaseInput from '../baseInput';\n\n/**\n * @description: a wrapper for Text Field component to create enclosed text area\n * @modifiers: Typography\n * @extends: TextField\n * @extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/textField/index.js\n * @gif: https://media.giphy.com/media/3oFzmoU8TdfHeYZNZu/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n */\nexport default class TextArea extends BaseInput {\n  static displayName = 'TextArea';\n\n  static propTypes = {\n    ...RNTextInput.propTypes,\n    ...BaseInput.propTypes\n  };\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  render() {\n    const {value} = this.state;\n    const typography = this.getTypography();\n    const inputStyle = [this.styles.input, typography];\n    return (\n      <View style={this.styles.container}>\n        <RNTextInput\n          {...this.props}\n          value={value}\n          multiline\n          style={inputStyle}\n          underlineColorAndroid=\"transparent\"\n          onChangeText={this.onChangeText}\n          ref={input => {\n            this.input = input;\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nfunction createStyles() {\n  return StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    input: {\n      flex: 1,\n      justifyContent: 'flex-start',\n      alignItems: 'flex-start',\n      textAlignVertical: 'top'\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}