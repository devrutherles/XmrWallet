{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"containerStyle\", \"style\", \"underlayColor\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../view\";\nimport ListItemPart from \"./ListItemPart\";\nimport { ListItemProps } from \"./types\";\n\nvar ListItem = function (_Component) {\n  _inherits(ListItem, _Component);\n\n  var _super = _createSuper(ListItem);\n\n  function ListItem(props) {\n    var _this;\n\n    _classCallCheck(this, ListItem);\n\n    _this = _super.call(this, props);\n    _this.styles = createStyles(_this.props.height);\n\n    _this.renderViewContainer = function () {\n      var pressed = _this.state.pressed;\n\n      var _this$props = _this.props,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style,\n          underlayColor = _this$props.underlayColor,\n          others = _objectWithoutProperties(_this$props, _excluded);\n\n      var pressedStyle = {\n        backgroundColor: underlayColor\n      };\n      return React.createElement(View, _extends({\n        style: [_this.styles.container, containerStyle]\n      }, others), React.createElement(View, {\n        style: [_this.styles.innerContainer, style, pressed && pressedStyle]\n      }, _this.props.children));\n    };\n\n    _this.renderCustomContainer = function (Container) {\n      var others = _extends({}, _this.props);\n\n      return React.createElement(Container, others, _this.renderChildren());\n    };\n\n    _this.renderChildren = function () {\n      var pressed = _this.state.pressed;\n      var _this$props2 = _this.props,\n          underlayColor = _this$props2.underlayColor,\n          style = _this$props2.style,\n          children = _this$props2.children;\n      var pressedStyle = {\n        backgroundColor: underlayColor\n      };\n      return React.createElement(View, {\n        style: [_this.styles.innerContainer, style, pressed && pressedStyle]\n      }, children);\n    };\n\n    _this.state = {\n      pressed: false\n    };\n    return _this;\n  }\n\n  _createClass(ListItem, [{\n    key: \"onHideUnderlay\",\n    value: function onHideUnderlay() {\n      this.setPressed(false);\n    }\n  }, {\n    key: \"onShowUnderlay\",\n    value: function onShowUnderlay() {\n      this.setPressed(true);\n    }\n  }, {\n    key: \"setPressed\",\n    value: function setPressed(isPressed) {\n      this.setState({\n        pressed: isPressed\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var containerElement = this.props.containerElement;\n      return containerElement ? this.renderCustomContainer(containerElement) : this.renderViewContainer();\n    }\n  }]);\n\n  return ListItem;\n}(Component);\n\nListItem.displayName = 'ListItem';\nListItem.defaultProps = {\n  height: 63,\n  containerElement: TouchableOpacity,\n  underlayColor: Colors.grey70\n};\n\nfunction createStyles(height) {\n  return StyleSheet.create({\n    container: {\n      backgroundColor: Colors.white\n    },\n    innerContainer: {\n      flexDirection: 'row',\n      height: height\n    }\n  });\n}\n\nexport { ListItemProps };\nListItem.Part = ListItemPart;\nexport default asBaseComponent(ListItem);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/listItem/index.js"],"names":["React","Component","Colors","asBaseComponent","TouchableOpacity","View","ListItemPart","ListItemProps","ListItem","props","styles","createStyles","height","renderViewContainer","pressed","state","containerStyle","style","underlayColor","others","pressedStyle","backgroundColor","container","innerContainer","children","renderCustomContainer","Container","renderChildren","setPressed","isPressed","setState","containerElement","displayName","defaultProps","grey70","StyleSheet","create","white","flexDirection","Part"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../view\";\nimport ListItemPart from \"./ListItemPart\";\nimport { ListItemProps } from \"./types\";\n\nclass ListItem extends Component {\n  static displayName = 'ListItem';\n  static defaultProps = {\n    height: 63,\n    containerElement: TouchableOpacity,\n    underlayColor: Colors.grey70\n  };\n  styles = createStyles(this.props.height);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false\n    };\n  }\n\n  onHideUnderlay() {\n    this.setPressed(false);\n  }\n\n  onShowUnderlay() {\n    this.setPressed(true);\n  }\n\n  setPressed(isPressed) {\n    this.setState({\n      pressed: isPressed\n    });\n  }\n\n  renderViewContainer = () => {\n    const {\n      pressed\n    } = this.state;\n    const {\n      containerStyle,\n      style,\n      underlayColor,\n      ...others\n    } = this.props;\n    const pressedStyle = {\n      backgroundColor: underlayColor\n    };\n    return <View style={[this.styles.container, containerStyle]} {...others}>\n        <View style={[this.styles.innerContainer, style, pressed && pressedStyle]}>{this.props.children}</View>\n      </View>;\n  };\n  renderCustomContainer = Container => {\n    const { ...others\n    } = this.props;\n    return <Container {...others}>{this.renderChildren()}</Container>;\n  };\n  renderChildren = () => {\n    const {\n      pressed\n    } = this.state;\n    const {\n      underlayColor,\n      style,\n      children\n    } = this.props;\n    const pressedStyle = {\n      backgroundColor: underlayColor\n    };\n    return <View style={[this.styles.innerContainer, style, pressed && pressedStyle]}>{children}</View>;\n  };\n\n  render() {\n    const {\n      containerElement\n    } = this.props;\n    return containerElement ? this.renderCustomContainer(containerElement) : this.renderViewContainer();\n  }\n\n}\n\nfunction createStyles(height) {\n  return StyleSheet.create({\n    container: {\n      backgroundColor: Colors.white\n    },\n    innerContainer: {\n      flexDirection: 'row',\n      height\n    }\n  });\n}\n\nexport { ListItemProps };\nListItem.Part = ListItemPart;\nexport default asBaseComponent(ListItem);"]},"metadata":{},"sourceType":"module"}