{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport KeyboardAwareBase from \"./KeyboardAwareBase\";\n\nvar KeyboardAwareFlatList = function (_KeyboardAwareBase) {\n  _inherits(KeyboardAwareFlatList, _KeyboardAwareBase);\n\n  var _super = _createSuper(KeyboardAwareFlatList);\n\n  function KeyboardAwareFlatList() {\n    _classCallCheck(this, KeyboardAwareFlatList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(KeyboardAwareFlatList, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(FlatList, _extends({\n        scrollEventThrottle: 200\n      }, this.props, this.style, {\n        contentInset: {\n          bottom: this.state.keyboardHeight\n        },\n        ref: function ref(r) {\n          _this._keyboardAwareView = r;\n        },\n        onLayout: this._onKeyboardAwareViewLayout,\n        onScroll: this._onKeyboardAwareViewScroll,\n        onContentSizeChange: this._updateKeyboardAwareViewContentSize,\n        removeClippedSubviews: false\n      }));\n    }\n  }]);\n\n  return KeyboardAwareFlatList;\n}(KeyboardAwareBase);\n\nKeyboardAwareFlatList.displayName = 'KeyboardAwareFlatList';\nKeyboardAwareFlatList.PropTypes = {\n  getTextInputRefs: PropTypes.func,\n  onScroll: PropTypes.func\n};\nKeyboardAwareFlatList.defaultProps = _objectSpread(_objectSpread({}, KeyboardAwareBase.defaultProps), {}, {\n  getTextInputRefs: function getTextInputRefs() {\n    return [];\n  }\n});\nexport { KeyboardAwareFlatList as default };","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/KeyboardAwareScrollView/KeyboardAwareFlatList.js"],"names":["React","PropTypes","KeyboardAwareBase","KeyboardAwareFlatList","props","style","bottom","state","keyboardHeight","r","_keyboardAwareView","_onKeyboardAwareViewLayout","_onKeyboardAwareViewScroll","_updateKeyboardAwareViewContentSize","displayName","getTextInputRefs","func","onScroll","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAOC,iBAAP;;IAMqBC,qB;;;;;;;;;;;;;WAenB,kBAAS;AAAA;;AACP,aACE,oBAAC,QAAD;AACE,QAAA,mBAAmB,EAAE;AADvB,SAEM,KAAKC,KAFX,EAGM,KAAKC,KAHX;AAIE,QAAA,YAAY,EAAE;AAACC,UAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC;AAApB,SAJhB;AAKE,QAAA,GAAG,EAAE,aAACC,CAAD,EAAO;AACV,UAAA,KAAI,CAACC,kBAAL,GAA0BD,CAA1B;AACD,SAPH;AAQE,QAAA,QAAQ,EAAE,KAAKE,0BARjB;AASE,QAAA,QAAQ,EAAE,KAAKC,0BATjB;AAUE,QAAA,mBAAmB,EAAE,KAAKC,mCAV5B;AAWE,QAAA,qBAAqB,EAAE;AAXzB,SADF;AAeD;;;;EA/BgDX,iB;;AAA9BC,qB,CACZW,W,GAAc,uB;AADFX,qB,CAGZF,S,GAAY;AACjBc,EAAAA,gBAAgB,EAAEd,SAAS,CAACe,IADX;AAEjBC,EAAAA,QAAQ,EAAEhB,SAAS,CAACe;AAFH,C;AAHAb,qB,CAQZe,Y,mCACFhB,iBAAiB,CAACgB,Y;AACrBH,EAAAA,gBAAgB,EAAE,4BAAM;AACtB,WAAO,EAAP;AACD;;SAZgBZ,qB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FlatList} from 'react-native';\nimport KeyboardAwareBase from './KeyboardAwareBase';\n\n/**\n * @description: A wrapper component which handles the FlatList insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js\n */\nexport default class KeyboardAwareFlatList extends KeyboardAwareBase {\n  static displayName = 'KeyboardAwareFlatList';\n\n  static PropTypes = {\n    getTextInputRefs: PropTypes.func,\n    onScroll: PropTypes.func\n  };\n\n  static defaultProps = {\n    ...KeyboardAwareBase.defaultProps,\n    getTextInputRefs: () => {\n      return [];\n    }\n  };\n\n  render() {\n    return (\n      <FlatList\n        scrollEventThrottle={200}\n        {...this.props}\n        {...this.style}\n        contentInset={{bottom: this.state.keyboardHeight}}\n        ref={(r) => {\n          this._keyboardAwareView = r;\n        }}\n        onLayout={this._onKeyboardAwareViewLayout}\n        onScroll={this._onKeyboardAwareViewScroll}\n        onContentSizeChange={this._updateKeyboardAwareViewContentSize}\n        removeClippedSubviews={false}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}