{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"avatarProps\", \"backgroundColor\", \"badgeProps\", \"useCounter\", \"borderRadius\", \"containerStyle\", \"onDismiss\", \"dismissColor\", \"dismissIcon\", \"dismissIconStyle\", \"dismissContainerStyle\", \"iconProps\", \"iconSource\", \"iconStyle\", \"rightIconSource\", \"leftElement\", \"rightElement\", \"label\", \"labelStyle\", \"onPress\", \"resetSpacings\", \"size\", \"useSizeAsMinimum\", \"testID\"];\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Assets from \"../../assets\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { BorderRadiuses, Spacings } from \"../../style\";\nimport Avatar from \"../avatar\";\nimport Badge from \"../badge\";\nimport Image from \"../image\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport View from \"../view\";\nvar DEFAULT_SIZE = 26;\n\nvar Chip = function Chip(_ref) {\n  var avatarProps = _ref.avatarProps,\n      backgroundColor = _ref.backgroundColor,\n      badgeProps = _ref.badgeProps,\n      useCounter = _ref.useCounter,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? BorderRadiuses.br100 : _ref$borderRadius,\n      containerStyle = _ref.containerStyle,\n      onDismiss = _ref.onDismiss,\n      dismissColor = _ref.dismissColor,\n      _ref$dismissIcon = _ref.dismissIcon,\n      dismissIcon = _ref$dismissIcon === void 0 ? Assets.icons.x : _ref$dismissIcon,\n      dismissIconStyle = _ref.dismissIconStyle,\n      dismissContainerStyle = _ref.dismissContainerStyle,\n      iconProps = _ref.iconProps,\n      iconSource = _ref.iconSource,\n      iconStyle = _ref.iconStyle,\n      rightIconSource = _ref.rightIconSource,\n      leftElement = _ref.leftElement,\n      rightElement = _ref.rightElement,\n      label = _ref.label,\n      labelStyle = _ref.labelStyle,\n      onPress = _ref.onPress,\n      resetSpacings = _ref.resetSpacings,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? DEFAULT_SIZE : _ref$size,\n      _ref$useSizeAsMinimum = _ref.useSizeAsMinimum,\n      useSizeAsMinimum = _ref$useSizeAsMinimum === void 0 ? true : _ref$useSizeAsMinimum,\n      testID = _ref.testID,\n      others = _objectWithoutProperties(_ref, _excluded);\n\n  var renderIcon = useCallback(function (iconPosition) {\n    var isLeftIcon = iconPosition === 'left';\n    return React.createElement(Image, _extends({\n      source: isLeftIcon ? iconSource : rightIconSource,\n      testID: testID + \".icon\"\n    }, iconProps, {\n      style: [getMargins('iconSource'), iconStyle]\n    }));\n  }, [iconSource, rightIconSource, iconStyle, iconProps]);\n  var renderBadge = useCallback(function () {\n    return React.createElement(Badge, _extends({\n      size: 20,\n      testID: testID + \".counter\",\n      backgroundColor: useCounter ? 'transparent' : undefined\n    }, badgeProps, {\n      containerStyle: [getMargins('badge'), badgeProps.containerStyle]\n    }));\n  }, [badgeProps]);\n  var renderOnDismiss = useCallback(function () {\n    return React.createElement(TouchableOpacity, {\n      style: [getMargins('dismiss'), dismissContainerStyle],\n      onPress: onDismiss,\n      hitSlop: {\n        top: 10,\n        bottom: 10,\n        left: 10,\n        right: 10\n      },\n      testID: testID + \".dismiss\"\n    }, React.createElement(Image, {\n      source: dismissIcon,\n      tintColor: dismissColor,\n      style: [dismissIconStyle],\n      accessibilityLabel: \"dismiss\",\n      testID: testID + \".dismissIcon\"\n    }));\n  }, [dismissContainerStyle, onDismiss, dismissIcon, dismissIconStyle]);\n  var renderAvatar = useCallback(function () {\n    return React.createElement(Avatar, _extends({\n      size: 20,\n      testID: testID + \".avatar\"\n    }, avatarProps, {\n      containerStyle: [getMargins('avatar'), avatarProps.containerStyle]\n    }));\n  }, [avatarProps]);\n  var renderLabel = useCallback(function () {\n    return React.createElement(Text, {\n      text90M: true,\n      numberOfLines: 1,\n      style: [styles.label, getMargins('label'), labelStyle],\n      testID: testID + \".label\"\n    }, !!label && label);\n  }, [label, labelStyle]);\n  var getMargins = useCallback(function (element) {\n    if (!resetSpacings) {\n      switch (element) {\n        case 'label':\n          if (avatarProps) {\n            return {\n              marginRight: Spacings.s2,\n              marginLeft: Spacings.s1\n            };\n          }\n\n          if (badgeProps) {\n            return {\n              marginLeft: Spacings.s3,\n              marginRight: Spacings.s1\n            };\n          }\n\n          if (rightElement && leftElement) {\n            return {\n              marginHorizontally: 2\n            };\n          }\n\n          if (iconSource || leftElement) {\n            return {\n              marginLeft: 2,\n              marginRight: Spacings.s3\n            };\n          }\n\n          if (rightIconSource || rightElement) {\n            return {\n              marginLeft: Spacings.s3,\n              marginRight: 2\n            };\n          }\n\n          if (onDismiss) {\n            return {\n              marginLeft: Spacings.s3,\n              marginRight: Spacings.s2\n            };\n          } else {\n            return {\n              marginHorizontal: Spacings.s3\n            };\n          }\n\n        case 'avatar':\n          return {\n            marginLeft: 2\n          };\n\n        case 'badge':\n          return {\n            marginRight: Spacings.s1\n          };\n\n        case 'dismiss':\n          return {\n            marginRight: Spacings.s2\n          };\n      }\n    }\n  }, [avatarProps, badgeProps, iconSource, rightIconSource, onDismiss]);\n  var getContainerSize = useCallback(function () {\n    var _ref2, _ref3;\n\n    var width = useSizeAsMinimum ? 'minWidth' : 'width';\n    var height = useSizeAsMinimum ? 'minHeight' : 'height';\n    return typeof size === 'object' ? (_ref2 = {}, _defineProperty(_ref2, width, _.get(size, 'width')), _defineProperty(_ref2, height, _.get(size, 'height')), _ref2) : (_ref3 = {}, _defineProperty(_ref3, width, size), _defineProperty(_ref3, height, size), _ref3);\n  }, [size]);\n  var Container = onPress ? TouchableOpacity : View;\n  return React.createElement(Container, _extends({\n    activeOpacity: 1,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor: backgroundColor\n    }, {\n      borderRadius: borderRadius\n    }, containerStyle, getContainerSize()],\n    testID: testID\n  }, others), avatarProps && renderAvatar(), iconSource && renderIcon('left'), leftElement, label && renderLabel(), rightElement, rightIconSource && renderIcon('right'), badgeProps && renderBadge(), onDismiss && renderOnDismiss());\n};\n\nChip.propTypes = {\n  size: _pt.oneOfType([_pt.number, _pt.shape({\n    width: _pt.number.isRequired,\n    height: _pt.number.isRequired\n  })]),\n  onPress: _pt.func,\n  backgroundColor: _pt.string,\n  borderRadius: _pt.number,\n  useSizeAsMinimum: _pt.bool,\n  resetSpacings: _pt.bool,\n  testID: _pt.string,\n  label: _pt.string,\n  useCounter: _pt.bool,\n  leftElement: _pt.element,\n  rightElement: _pt.element,\n  onDismiss: _pt.func,\n  dismissColor: _pt.string\n};\nChip.displayName = 'Chip';\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderRadius: BorderRadiuses.br100\n  },\n  label: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default asBaseComponent(Chip);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/chip/index.js"],"names":["_pt","_","React","useCallback","Assets","asBaseComponent","BorderRadiuses","Spacings","Avatar","Badge","Image","Text","TouchableOpacity","View","DEFAULT_SIZE","Chip","avatarProps","backgroundColor","badgeProps","useCounter","borderRadius","br100","containerStyle","onDismiss","dismissColor","dismissIcon","icons","x","dismissIconStyle","dismissContainerStyle","iconProps","iconSource","iconStyle","rightIconSource","leftElement","rightElement","label","labelStyle","onPress","resetSpacings","size","useSizeAsMinimum","testID","others","renderIcon","iconPosition","isLeftIcon","getMargins","renderBadge","undefined","renderOnDismiss","top","bottom","left","right","renderAvatar","renderLabel","styles","element","marginRight","s2","marginLeft","s1","s3","marginHorizontally","marginHorizontal","getContainerSize","width","height","get","Container","container","propTypes","oneOfType","number","shape","isRequired","func","string","bool","displayName","StyleSheet","create","alignItems","justifyContent","flexDirection","borderWidth"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Assets from \"../../assets\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { BorderRadiuses, Spacings } from \"../../style\";\nimport Avatar from \"../avatar\";\nimport Badge from \"../badge\";\nimport Image from \"../image\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport View from \"../view\";\nconst DEFAULT_SIZE = 26;\n/**\n * @description: Chip component\n * @extends: TouchableOpacity\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipScreen.tsx\n * @image: https://user-images.githubusercontent.com/1780255/119636022-e9743180-be1c-11eb-8f02-22eeab6558cd.png\n */\n\nconst Chip = ({\n  avatarProps,\n  backgroundColor,\n  badgeProps,\n  useCounter,\n  borderRadius = BorderRadiuses.br100,\n  containerStyle,\n  onDismiss,\n  dismissColor,\n  dismissIcon = Assets.icons.x,\n  dismissIconStyle,\n  dismissContainerStyle,\n  iconProps,\n  iconSource,\n  iconStyle,\n  rightIconSource,\n  leftElement,\n  rightElement,\n  label,\n  labelStyle,\n  onPress,\n  resetSpacings,\n  size = DEFAULT_SIZE,\n  useSizeAsMinimum = true,\n  testID,\n  ...others\n}) => {\n  const renderIcon = useCallback(iconPosition => {\n    const isLeftIcon = iconPosition === 'left';\n    return <Image // @ts-ignore\n    source={isLeftIcon ? iconSource : rightIconSource} testID={`${testID}.icon`} {...iconProps} style={[getMargins('iconSource'), iconStyle]} />;\n  }, [iconSource, rightIconSource, iconStyle, iconProps]);\n  const renderBadge = useCallback(() => {\n    return <Badge size={20} testID={`${testID}.counter`} backgroundColor={useCounter ? 'transparent' : undefined} {...badgeProps} // @ts-ignore\n    containerStyle={[getMargins('badge'), badgeProps.containerStyle]} />;\n  }, [badgeProps]);\n  const renderOnDismiss = useCallback(() => {\n    return <TouchableOpacity style={[getMargins('dismiss'), dismissContainerStyle]} onPress={onDismiss} hitSlop={{\n      top: 10,\n      bottom: 10,\n      left: 10,\n      right: 10\n    }} testID={`${testID}.dismiss`}>\n        <Image // @ts-ignore\n      source={dismissIcon} tintColor={dismissColor} style={[dismissIconStyle]} accessibilityLabel=\"dismiss\" testID={`${testID}.dismissIcon`} />\n      </TouchableOpacity>;\n  }, [dismissContainerStyle, onDismiss, dismissIcon, dismissIconStyle]);\n  const renderAvatar = useCallback(() => {\n    return <Avatar size={20} testID={`${testID}.avatar`} {...avatarProps} // @ts-ignore\n    containerStyle={[getMargins('avatar'), avatarProps.containerStyle]} />;\n  }, [avatarProps]);\n  const renderLabel = useCallback(() => {\n    return <Text text90M numberOfLines={1} style={[styles.label, getMargins('label'), labelStyle]} testID={`${testID}.label`}>\n        {!!label && label}\n      </Text>;\n  }, [label, labelStyle]);\n  const getMargins = useCallback(element => {\n    if (!resetSpacings) {\n      switch (element) {\n        case 'label':\n          if (avatarProps) {\n            return {\n              marginRight: Spacings.s2,\n              marginLeft: Spacings.s1\n            };\n          }\n\n          if (badgeProps) {\n            return {\n              marginLeft: Spacings.s3,\n              marginRight: Spacings.s1\n            };\n          }\n\n          if (rightElement && leftElement) {\n            return {\n              marginHorizontally: 2\n            };\n          }\n\n          if (iconSource || leftElement) {\n            return {\n              marginLeft: 2,\n              marginRight: Spacings.s3\n            };\n          }\n\n          if (rightIconSource || rightElement) {\n            return {\n              marginLeft: Spacings.s3,\n              marginRight: 2\n            };\n          }\n\n          if (onDismiss) {\n            return {\n              marginLeft: Spacings.s3,\n              marginRight: Spacings.s2\n            };\n          } else {\n            return {\n              marginHorizontal: Spacings.s3\n            };\n          }\n\n        case 'avatar':\n          return {\n            marginLeft: 2\n          };\n\n        case 'badge':\n          return {\n            marginRight: Spacings.s1\n          };\n\n        case 'dismiss':\n          return {\n            marginRight: Spacings.s2\n          };\n      }\n    }\n  }, [avatarProps, badgeProps, iconSource, rightIconSource, onDismiss]);\n  const getContainerSize = useCallback(() => {\n    const width = useSizeAsMinimum ? 'minWidth' : 'width';\n    const height = useSizeAsMinimum ? 'minHeight' : 'height';\n    return typeof size === 'object' ? {\n      [width]: _.get(size, 'width'),\n      [height]: _.get(size, 'height')\n    } : {\n      [width]: size,\n      [height]: size\n    };\n  }, [size]);\n  const Container = onPress ? TouchableOpacity : View;\n  return <Container activeOpacity={1} onPress={onPress} style={[styles.container, {\n    backgroundColor\n  }, {\n    borderRadius\n  }, containerStyle, getContainerSize()]} testID={testID} {...others}>\n      {avatarProps && renderAvatar()}\n      {iconSource && renderIcon('left')}\n      {leftElement}\n      {label && renderLabel()}\n      {rightElement}\n      {rightIconSource && renderIcon('right')}\n      {badgeProps && renderBadge()}\n      {onDismiss && renderOnDismiss()}\n    </Container>;\n};\n\nChip.propTypes = {\n  /**\n     * Chip's size. Number or a width and height object.\n     */\n\n  /*GENERAL*/\n  size: _pt.oneOfType([_pt.number, _pt.shape({\n    width: _pt.number.isRequired,\n    height: _pt.number.isRequired\n  })]),\n\n  /**\n     * On Chip press callback\n     */\n  onPress: _pt.func,\n\n  /**\n     * Chip's background color\n     */\n  backgroundColor: _pt.string,\n\n  /**\n     * The Chip borderRadius\n     */\n  borderRadius: _pt.number,\n\n  /**\n     * Uses size as minWidth and minHeight - default is true\n     */\n  useSizeAsMinimum: _pt.bool,\n\n  /**\n     * Disables all internal elements default spacings. Helps reach a custom design\n     */\n  resetSpacings: _pt.bool,\n\n  /**\n     * Used as testing identifier\n     */\n  testID: _pt.string,\n\n  /**\n     * Main Chip text\n     */\n\n  /*LABEL*/\n  label: _pt.string,\n\n  /**\n     * Display badge as counter (no background)\n     */\n  useCounter: _pt.bool,\n\n  /**\n     * Left custom element\n     */\n\n  /*LEFT ELEMENT*/\n  leftElement: _pt.element,\n\n  /**\n      * Right custom element\n      */\n\n  /*RIGHT ELEMENT*/\n  rightElement: _pt.element,\n\n  /**\n     * Adds a dismiss button and serves as its callback\n     */\n\n  /*DISMISS ('x' button)*/\n  onDismiss: _pt.func,\n\n  /**\n     * Dismiss color\n     */\n  dismissColor: _pt.string\n};\nChip.displayName = 'Chip';\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderRadius: BorderRadiuses.br100\n  },\n  label: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default asBaseComponent(Chip);"]},"metadata":{},"sourceType":"module"}