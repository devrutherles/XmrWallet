{"ast":null,"code":"import _ from 'lodash';\nexport function formatLastItemLabel(label, options) {\n  var _ref = options || {},\n      _ref$shouldAddPlus = _ref.shouldAddPlus,\n      shouldAddPlus = _ref$shouldAddPlus === void 0 ? true : _ref$shouldAddPlus,\n      maxPlusLimit = _ref.maxPlusLimit;\n\n  if (typeof label !== 'number') {\n    return label;\n  }\n\n  var formattedLabel;\n\n  var roundedNumber = _.toString(Math.round(label));\n\n  if (label < 1000) {\n    formattedLabel = \"\" + label;\n  } else if (label >= 10000000) {\n    formattedLabel = roundedNumber.slice(0, -6) + \"m\";\n  } else if (label >= 1000000) {\n    formattedLabel = parseInt(roundedNumber.slice(0, -5)) / 10 + \"m\";\n  } else {\n    formattedLabel = roundedNumber.slice(0, -3) + \"k\";\n  }\n\n  var isInPlusRange = !_.isNil(maxPlusLimit) ? formattedLabel.length <= maxPlusLimit : shouldAddPlus;\n\n  if (shouldAddPlus && isInPlusRange) {\n    return \"+\" + formattedLabel;\n  }\n\n  return formattedLabel;\n}","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/helpers/FormattingPresenter.js"],"names":["_","formatLastItemLabel","label","options","shouldAddPlus","maxPlusLimit","formattedLabel","roundedNumber","toString","Math","round","slice","parseInt","isInPlusRange","isNil","length"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCC,OAApC,EAA6C;AAClD,aAGIA,OAAO,IAAI,EAHf;AAAA,gCACEC,aADF;AAAA,MACEA,aADF,mCACkB,IADlB;AAAA,MAEEC,YAFF,QAEEA,YAFF;;AAKA,MAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AAED,MAAII,cAAJ;;AAEA,MAAMC,aAAa,GAAGP,CAAC,CAACQ,QAAF,CAAWC,IAAI,CAACC,KAAL,CAAWR,KAAX,CAAX,CAAtB;;AAEA,MAAIA,KAAK,GAAG,IAAZ,EAAkB;AAChBI,IAAAA,cAAc,QAAMJ,KAApB;AACD,GAFD,MAEO,IAAIA,KAAK,IAAI,QAAb,EAAuB;AAC5BI,IAAAA,cAAc,GAAMC,aAAa,CAACI,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAN,MAAd;AACD,GAFM,MAEA,IAAIT,KAAK,IAAI,OAAb,EAAsB;AAC3BI,IAAAA,cAAc,GAAMM,QAAQ,CAACL,aAAa,CAACI,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAD,CAAR,GAAuC,EAA7C,MAAd;AACD,GAFM,MAEA;AACLL,IAAAA,cAAc,GAAMC,aAAa,CAACI,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAN,MAAd;AACD;;AAED,MAAME,aAAa,GAAG,CAACb,CAAC,CAACc,KAAF,CAAQT,YAAR,CAAD,GAAyBC,cAAc,CAACS,MAAf,IAAyBV,YAAlD,GAAiED,aAAvF;;AAEA,MAAIA,aAAa,IAAIS,aAArB,EAAoC;AAClC,iBAAWP,cAAX;AACD;;AAED,SAAOA,cAAP;AACD","sourcesContent":["import _ from 'lodash';\nexport function formatLastItemLabel(label, options) {\n  const {\n    shouldAddPlus = true,\n    maxPlusLimit\n  } = options || {};\n\n  if (typeof label !== 'number') {\n    return label;\n  }\n\n  let formattedLabel;\n\n  const roundedNumber = _.toString(Math.round(label));\n\n  if (label < 1000) {\n    formattedLabel = `${label}`;\n  } else if (label >= 10000000) {\n    formattedLabel = `${roundedNumber.slice(0, -6)}m`;\n  } else if (label >= 1000000) {\n    formattedLabel = `${parseInt(roundedNumber.slice(0, -5)) / 10}m`;\n  } else {\n    formattedLabel = `${roundedNumber.slice(0, -3)}k`;\n  }\n\n  const isInPlusRange = !_.isNil(maxPlusLimit) ? formattedLabel.length <= maxPlusLimit : shouldAddPlus;\n\n  if (shouldAddPlus && isInPlusRange) {\n    return `+${formattedLabel}`;\n  }\n\n  return formattedLabel;\n}"]},"metadata":{},"sourceType":"module"}