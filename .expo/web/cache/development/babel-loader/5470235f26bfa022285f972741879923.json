{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"style\"],\n    _excluded2 = [\"containerStyle\"],\n    _excluded3 = [\"containerStyle\", \"loop\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport memoize from 'memoize-one';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { Constants } from \"../../helpers\";\nimport { Colors } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Carousel from \"../carousel\";\nimport PageControl from \"../pageControl\";\nimport ColorSwatch, { SWATCH_SIZE } from \"./ColorSwatch\";\nimport ScrollBar from \"../scrollBar\";\nvar VERTICAL_PADDING = 16;\nvar HORIZONTAL_PADDING = 20;\nvar MINIMUM_MARGIN = 16;\nvar SCROLLABLE_HEIGHT = 92;\nvar DEFAULT_NUMBER_OF_ROWS = 3;\n\nvar ColorPalette = function (_PureComponent) {\n  _inherits(ColorPalette, _PureComponent);\n\n  var _super = _createSuper(ColorPalette);\n\n  function ColorPalette(props) {\n    var _this;\n\n    _classCallCheck(this, ColorPalette);\n\n    _this = _super.call(this, props);\n    _this.carousel = React.createRef();\n    _this.scrollBar = React.createRef();\n    _this.itemsRefs = undefined;\n    _this.selectedColorIndex = undefined;\n    _this.selectedPage = undefined;\n    _this.currentColorsCount = undefined;\n    _this.itemsPerRow = 0;\n    _this.itemsPerPage = 0;\n    _this.usePagination = undefined;\n    _this.innerMargin = undefined;\n    _this.swatchStyles = undefined;\n\n    _this.onOrientationChanged = function () {\n      if (_this.state.orientation !== Constants.orientation) {\n        _this.initLocalVariables();\n\n        _this.setState({\n          orientation: Constants.orientation\n        });\n      }\n    };\n\n    _this.getUniqueColors = memoize(function (colors) {\n      var c = _.map(colors, function (color) {\n        if (Colors.isTransparent(color)) {\n          return color;\n        }\n\n        return _.toUpper(color);\n      });\n\n      return _.uniq(c);\n    });\n\n    _this.onContentSizeChange = function (contentWidth) {\n      _this.setState({\n        scrollable: contentWidth > _this.containerWidth,\n        contentWidth: contentWidth\n      });\n    };\n\n    _this.onChangePage = function (index) {\n      _this.setState({\n        currentPage: index\n      });\n    };\n\n    _this.onValueChange = function (value, options) {\n      _this.props.onValueChange == null ? void 0 : _this.props.onValueChange(value, options);\n    };\n\n    _this.onLayout = function () {\n      setTimeout(function () {\n        _this.scrollToSelected();\n      }, 0);\n    };\n\n    _this.getHorizontalMargins = function (index) {\n      var isFirst = index === 0;\n      var isOnLeft = isFirst || index % _this.itemsPerRow === 0;\n      var isOnRight = index % _this.itemsPerRow === _this.itemsPerRow - 1;\n      var marginLeft;\n      var marginRight;\n\n      if (_this.usePagination) {\n        marginLeft = isOnLeft ? 0 : _this.innerMargin;\n        marginRight = isOnRight ? 0 : _this.innerMargin;\n      } else {\n        var isLast = index === _this.colors.length - 1;\n        marginLeft = isFirst ? 8 : _this.innerMargin;\n        marginRight = isLast ? 20 : _this.innerMargin;\n      }\n\n      return {\n        marginLeft: marginLeft,\n        marginRight: marginRight\n      };\n    };\n\n    _this.getSwatchStyle = function (index) {\n      var sizeHasChanged = _this.colors.length !== _this.currentColorsCount;\n      var isNextToLastIndex = index === _this.colors.length - 2;\n\n      if (!_.isUndefined(_this.swatchStyles)) {\n        if (_.isUndefined(_this.swatchStyles[index]) || !_this.usePagination && sizeHasChanged && isNextToLastIndex) {\n          _this.swatchStyles[index] = [_this.getHorizontalMargins(index), _this.props.swatchStyle];\n\n          if (sizeHasChanged && isNextToLastIndex) {\n            _this.currentColorsCount = _this.colors.length;\n          }\n        }\n\n        return _this.swatchStyles[index];\n      }\n    };\n\n    _this.addRefByIndex = function (index, ref) {\n      if (_this.itemsRefs && ref) {\n        _this.itemsRefs[index] = ref;\n      }\n    };\n\n    _this.state = {\n      currentPage: 0,\n      scrollable: false,\n      orientation: undefined,\n      contentWidth: undefined\n    };\n\n    _this.initLocalVariables();\n\n    return _this;\n  }\n\n  _createClass(ColorPalette, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"initLocalVariables\",\n    value: function initLocalVariables() {\n      this.itemsRefs = undefined;\n      this.selectedColorIndex = undefined;\n      this.selectedPage = undefined;\n      this.currentColorsCount = this.colors.length;\n      this.itemsPerRow = this.getItemsPerRow();\n      this.itemsPerPage = this.itemsPerRow * this.getNumberOfRows();\n      this.usePagination = this.shouldUsePagination();\n      this.innerMargin = this.getInnerMargin();\n      this.swatchStyles = [];\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var value = this.props.value;\n\n      if (Colors.isTransparent(value)) {\n        return value;\n      }\n\n      return _.toUpper(value);\n    }\n  }, {\n    key: \"colors\",\n    get: function get() {\n      return this.getUniqueColors(this.props.colors);\n    }\n  }, {\n    key: \"containerWidth\",\n    get: function get() {\n      var containerWidth = this.props.containerWidth;\n      return containerWidth || Constants.screenWidth;\n    }\n  }, {\n    key: \"getNumberOfRows\",\n    value: function getNumberOfRows() {\n      var _this$props$numberOfR = this.props.numberOfRows,\n          numberOfRows = _this$props$numberOfR === void 0 ? DEFAULT_NUMBER_OF_ROWS : _this$props$numberOfR;\n\n      if (!_.inRange(numberOfRows, 2, 6)) {\n        console.warn(numberOfRows + \" is not within valid range of color rows (2 to 5);\\n        defaulting to \" + DEFAULT_NUMBER_OF_ROWS + \".\");\n        return DEFAULT_NUMBER_OF_ROWS;\n      }\n\n      return numberOfRows;\n    }\n  }, {\n    key: \"getItemsPerRow\",\n    value: function getItemsPerRow() {\n      var itemsPerRow = 1;\n      var firstItemWidth = 2 * HORIZONTAL_PADDING + SWATCH_SIZE;\n      var additionalItemMinimumWidth = SWATCH_SIZE + MINIMUM_MARGIN;\n      itemsPerRow += Math.floor((this.containerWidth - firstItemWidth) / additionalItemMinimumWidth);\n      return itemsPerRow;\n    }\n  }, {\n    key: \"shouldUsePagination\",\n    value: function shouldUsePagination() {\n      var usePagination = this.props.usePagination;\n      return usePagination && this.colors.length > this.itemsPerPage;\n    }\n  }, {\n    key: \"getInnerMargin\",\n    value: function getInnerMargin() {\n      if (!this.usePagination) {\n        return HORIZONTAL_PADDING / 2;\n      }\n\n      var remainingSpace = this.containerWidth - this.itemsPerRow * SWATCH_SIZE - 2 * HORIZONTAL_PADDING;\n      var numberOfMargins = this.itemsPerRow - 1;\n      var margin = remainingSpace / numberOfMargins;\n      return (margin - 0.001) / 2;\n    }\n  }, {\n    key: \"scrollToSelected\",\n    value: function scrollToSelected() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          scrollable = _this$state.scrollable,\n          currentPage = _this$state.currentPage;\n\n      if (scrollable && this.selectedColorIndex !== undefined && this.itemsRefs) {\n        var childRef = this.itemsRefs[this.selectedColorIndex];\n\n        if (childRef) {\n          var handle = findNodeHandle(childRef.current);\n\n          if (handle) {\n            UIManager.measureLayoutRelativeToParent(handle, function (e) {\n              console.warn(e);\n            }, function (x, _y, w, _h) {\n              if (x + w > _this2.containerWidth) {\n                var _this2$scrollBar, _this2$scrollBar$curr;\n\n                (_this2$scrollBar = _this2.scrollBar) == null ? void 0 : (_this2$scrollBar$curr = _this2$scrollBar.current) == null ? void 0 : _this2$scrollBar$curr.scrollTo({\n                  x: x + w + HORIZONTAL_PADDING - _this2.containerWidth,\n                  y: 0,\n                  animated: false\n                });\n              }\n            });\n          }\n        }\n      } else if (this.usePagination) {\n        var _this$carousel, _this$carousel$curren;\n\n        (_this$carousel = this.carousel) == null ? void 0 : (_this$carousel$curren = _this$carousel.current) == null ? void 0 : _this$carousel$curren.goToPage(this.selectedPage || currentPage, false);\n      }\n    }\n  }, {\n    key: \"renderColorSwatch\",\n    value: function renderColorSwatch(color, index) {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          animatedIndex = _this$props.animatedIndex,\n          testID = _this$props.testID;\n      return React.createElement(ColorSwatch, {\n        style: this.getSwatchStyle(index),\n        index: index,\n        key: color,\n        color: color,\n        value: color,\n        selected: this.value === color,\n        animated: index === animatedIndex,\n        onPress: this.onValueChange,\n        ref: function ref(r) {\n          return _this3.addRefByIndex(index, r);\n        },\n        testID: testID + \"-\" + color\n      });\n    }\n  }, {\n    key: \"renderPalette\",\n    value: function renderPalette(props, contentStyle, colors, pageIndex) {\n      var _this4 = this;\n\n      var style = props.style,\n          others = _objectWithoutProperties(props, _excluded);\n\n      this.itemsRefs = [];\n      return React.createElement(View, _extends({\n        key: pageIndex\n      }, others, {\n        style: [styles.paletteContainer, contentStyle, style],\n        onLayout: this.onLayout\n      }), _.map(colors, function (color, i) {\n        if (color === _this4.value) {\n          _this4.selectedColorIndex = i;\n          _this4.selectedPage = pageIndex;\n        }\n\n        return _this4.renderColorSwatch(color, i);\n      }));\n    }\n  }, {\n    key: \"renderScrollableContent\",\n    value: function renderScrollableContent() {\n      var _this$props2 = this.props,\n          containerStyle = _this$props2.containerStyle,\n          others = _objectWithoutProperties(_this$props2, _excluded2);\n\n      var _this$state2 = this.state,\n          scrollable = _this$state2.scrollable,\n          contentWidth = _this$state2.contentWidth;\n      return React.createElement(ScrollBar, {\n        ref: this.scrollBar,\n        style: [containerStyle, styles.scrollContainer],\n        scrollEnabled: scrollable,\n        onContentSizeChange: this.onContentSizeChange,\n        height: SCROLLABLE_HEIGHT,\n        containerProps: {\n          width: !scrollable ? contentWidth : undefined\n        },\n        gradientHeight: SCROLLABLE_HEIGHT - 12\n      }, this.renderPalette(others, styles.scrollContent, this.colors, 0));\n    }\n  }, {\n    key: \"renderPaginationContent\",\n    value: function renderPaginationContent() {\n      var _this5 = this;\n\n      var _this$props3 = this.props,\n          containerStyle = _this$props3.containerStyle,\n          loop = _this$props3.loop,\n          others = _objectWithoutProperties(_this$props3, _excluded3);\n\n      var currentPage = this.state.currentPage;\n\n      var colorGroups = _.chunk(this.colors, this.itemsPerPage);\n\n      return React.createElement(View, {\n        center: true,\n        style: [containerStyle, styles.paginationContainer]\n      }, React.createElement(Carousel, {\n        loop: loop,\n        onChangePage: this.onChangePage,\n        ref: this.carousel\n      }, _.map(colorGroups, function (colorsPerPage, index) {\n        return _this5.renderPalette(others, _objectSpread(_objectSpread({}, styles.page), {}, {\n          width: _this5.containerWidth\n        }), colorsPerPage, index);\n      })), React.createElement(PageControl, {\n        size: 6,\n        color: Colors.grey10,\n        inactiveColor: Colors.grey50,\n        spacing: 8,\n        numOfPages: colorGroups.length,\n        currentPage: currentPage\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.usePagination ? this.renderPaginationContent() : this.renderScrollableContent();\n    }\n  }]);\n\n  return ColorPalette;\n}(PureComponent);\n\nColorPalette.propTypes = {\n  colors: _pt.arrayOf(_pt.string).isRequired,\n  containerWidth: _pt.number,\n  usePagination: _pt.bool,\n  loop: _pt.bool,\n  numberOfRows: _pt.number,\n  value: _pt.string,\n  animatedIndex: _pt.number,\n  onValueChange: _pt.func,\n  testID: _pt.string\n};\nColorPalette.displayName = 'ColorPalette';\nColorPalette.defaultProps = {\n  numberOfRows: DEFAULT_NUMBER_OF_ROWS,\n  usePagination: true,\n  loop: true\n};\nexport default asBaseComponent(ColorPalette);\nvar styles = StyleSheet.create({\n  paletteContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: HORIZONTAL_PADDING,\n    paddingVertical: VERTICAL_PADDING\n  },\n  paginationContainer: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    paddingBottom: VERTICAL_PADDING\n  },\n  scrollContainer: {\n    backgroundColor: Colors.white\n  },\n  page: {\n    flexWrap: 'wrap'\n  },\n  scrollContent: {\n    height: SCROLLABLE_HEIGHT,\n    paddingLeft: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/colorPicker/ColorPalette.js"],"names":["_pt","_","memoize","React","PureComponent","Constants","Colors","asBaseComponent","View","Carousel","PageControl","ColorSwatch","SWATCH_SIZE","ScrollBar","VERTICAL_PADDING","HORIZONTAL_PADDING","MINIMUM_MARGIN","SCROLLABLE_HEIGHT","DEFAULT_NUMBER_OF_ROWS","ColorPalette","props","carousel","createRef","scrollBar","itemsRefs","undefined","selectedColorIndex","selectedPage","currentColorsCount","itemsPerRow","itemsPerPage","usePagination","innerMargin","swatchStyles","onOrientationChanged","state","orientation","initLocalVariables","setState","getUniqueColors","colors","c","map","color","isTransparent","toUpper","uniq","onContentSizeChange","contentWidth","scrollable","containerWidth","onChangePage","index","currentPage","onValueChange","value","options","onLayout","setTimeout","scrollToSelected","getHorizontalMargins","isFirst","isOnLeft","isOnRight","marginLeft","marginRight","isLast","length","getSwatchStyle","sizeHasChanged","isNextToLastIndex","isUndefined","swatchStyle","addRefByIndex","ref","dimensionsChangeListener","addDimensionsEventListener","removeDimensionsEventListener","getItemsPerRow","getNumberOfRows","shouldUsePagination","getInnerMargin","screenWidth","numberOfRows","inRange","console","warn","firstItemWidth","additionalItemMinimumWidth","Math","floor","remainingSpace","numberOfMargins","margin","childRef","handle","findNodeHandle","current","UIManager","measureLayoutRelativeToParent","e","x","_y","w","_h","scrollTo","y","animated","goToPage","animatedIndex","testID","r","contentStyle","pageIndex","style","others","styles","paletteContainer","i","renderColorSwatch","containerStyle","scrollContainer","width","renderPalette","scrollContent","loop","colorGroups","chunk","paginationContainer","colorsPerPage","page","grey10","grey50","renderPaginationContent","renderScrollableContent","propTypes","arrayOf","string","isRequired","number","bool","func","displayName","defaultProps","StyleSheet","create","flexDirection","alignItems","paddingLeft","paddingVertical","flex","backgroundColor","white","paddingBottom","flexWrap","height"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport memoize from 'memoize-one';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, UIManager, findNodeHandle } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport { Colors } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Carousel from \"../carousel\";\nimport PageControl from \"../pageControl\";\nimport ColorSwatch, { SWATCH_SIZE } from \"./ColorSwatch\";\nimport ScrollBar from \"../scrollBar\";\nconst VERTICAL_PADDING = 16;\nconst HORIZONTAL_PADDING = 20;\nconst MINIMUM_MARGIN = 16;\nconst SCROLLABLE_HEIGHT = 92;\nconst DEFAULT_NUMBER_OF_ROWS = 3;\n/**\n * @description: A color palette component\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n * @notes: This is a screen width component\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPalette/ColorPalette.gif?raw=true\n */\n\nclass ColorPalette extends PureComponent {\n  static propTypes = {\n    /**\n       * Array of colors to render in the palette\n       */\n    colors: _pt.arrayOf(_pt.string).isRequired,\n\n    /**\n       * The container margins\n       */\n    containerWidth: _pt.number,\n\n    /**\n       * Whether to use pagination when number of colors exceeds the number of rows\n       */\n    usePagination: _pt.bool,\n\n    /**\n       * Whether the colors pagination scrolls in a loop\n       */\n    loop: _pt.bool,\n\n    /**\n       * The number of color rows from 2 to 5\n       */\n    numberOfRows: _pt.number,\n\n    /**\n       * The value of the selected swatch\n       */\n    value: _pt.string,\n\n    /**\n       * The index of the item to animate at first render (default is last)\n       */\n    animatedIndex: _pt.number,\n\n    /**\n       * Invoked once when value changes by selecting one of the swatches in the palette\n       */\n    onValueChange: _pt.func,\n    testID: _pt.string\n  };\n  static displayName = 'ColorPalette';\n  static defaultProps = {\n    numberOfRows: DEFAULT_NUMBER_OF_ROWS,\n    usePagination: true,\n    loop: true\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: 0,\n      scrollable: false,\n      orientation: undefined,\n      contentWidth: undefined\n    };\n    this.initLocalVariables();\n  }\n\n  carousel = React.createRef();\n  scrollBar = React.createRef();\n  itemsRefs = undefined;\n  selectedColorIndex = undefined;\n  selectedPage = undefined;\n  currentColorsCount = undefined;\n  itemsPerRow = 0;\n  itemsPerPage = 0;\n  usePagination = undefined;\n  innerMargin = undefined;\n  swatchStyles = undefined;\n\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n\n  onOrientationChanged = () => {\n    if (this.state.orientation !== Constants.orientation) {\n      this.initLocalVariables();\n      this.setState({\n        orientation: Constants.orientation\n      }); // only to trigger render\n    }\n  };\n\n  initLocalVariables() {\n    this.itemsRefs = undefined;\n    this.selectedColorIndex = undefined;\n    this.selectedPage = undefined;\n    this.currentColorsCount = this.colors.length;\n    this.itemsPerRow = this.getItemsPerRow();\n    this.itemsPerPage = this.itemsPerRow * this.getNumberOfRows();\n    this.usePagination = this.shouldUsePagination();\n    this.innerMargin = this.getInnerMargin();\n    this.swatchStyles = [];\n  }\n\n  get value() {\n    const {\n      value\n    } = this.props;\n\n    if (Colors.isTransparent(value)) {\n      return value;\n    }\n\n    return _.toUpper(value);\n  }\n\n  get colors() {\n    return this.getUniqueColors(this.props.colors);\n  }\n\n  get containerWidth() {\n    const {\n      containerWidth\n    } = this.props;\n    return containerWidth || Constants.screenWidth;\n  }\n\n  getUniqueColors = memoize(colors => {\n    const c = _.map(colors, color => {\n      if (Colors.isTransparent(color)) {\n        return color;\n      }\n\n      return _.toUpper(color);\n    });\n\n    return _.uniq(c);\n  });\n\n  getNumberOfRows() {\n    const {\n      numberOfRows = DEFAULT_NUMBER_OF_ROWS\n    } = this.props;\n\n    if (!_.inRange(numberOfRows, 2, 6)) {\n      console.warn(`${numberOfRows} is not within valid range of color rows (2 to 5);\n        defaulting to ${DEFAULT_NUMBER_OF_ROWS}.`);\n      return DEFAULT_NUMBER_OF_ROWS;\n    }\n\n    return numberOfRows;\n  }\n\n  getItemsPerRow() {\n    let itemsPerRow = 1; // first item has the page's padding around it\n\n    const firstItemWidth = 2 * HORIZONTAL_PADDING + SWATCH_SIZE; // additional items have the minimum width of the margin between them and the previous item's width\n\n    const additionalItemMinimumWidth = SWATCH_SIZE + MINIMUM_MARGIN; // floor(space left / size of additional items)\n\n    itemsPerRow += Math.floor((this.containerWidth - firstItemWidth) / additionalItemMinimumWidth);\n    return itemsPerRow;\n  }\n\n  shouldUsePagination() {\n    const {\n      usePagination\n    } = this.props;\n    return usePagination && this.colors.length > this.itemsPerPage;\n  }\n\n  getInnerMargin() {\n    if (!this.usePagination) {\n      return HORIZONTAL_PADDING / 2;\n    } // Now that we have the itemsPerRow set, we can calculate the actual innerMargin\n\n\n    const remainingSpace = this.containerWidth - this.itemsPerRow * SWATCH_SIZE - 2 * HORIZONTAL_PADDING; // With pagination - there's 1 less space than the number of items\n\n    const numberOfMargins = this.itemsPerRow - 1;\n    const margin = remainingSpace / numberOfMargins; // We have to subtract something since otherwise some Android devices will overflow into the next line\n\n    return (margin - 0.001) / 2;\n  }\n\n  scrollToSelected() {\n    const {\n      scrollable,\n      currentPage\n    } = this.state;\n\n    if (scrollable && this.selectedColorIndex !== undefined && this.itemsRefs) {\n      const childRef = this.itemsRefs[this.selectedColorIndex];\n\n      if (childRef) {\n        const handle = findNodeHandle(childRef.current);\n\n        if (handle) {\n          //@ts-ignore\n          UIManager.measureLayoutRelativeToParent(handle, e => {\n            console.warn(e);\n          }, (x, _y, w, _h) => {\n            if (x + w > this.containerWidth) {\n              this.scrollBar?.current?.scrollTo({\n                x: x + w + HORIZONTAL_PADDING - this.containerWidth,\n                y: 0,\n                animated: false\n              });\n            }\n          });\n        }\n      }\n    } else if (this.usePagination) {\n      this.carousel?.current?.goToPage(this.selectedPage || currentPage, false);\n    }\n  }\n\n  onContentSizeChange = contentWidth => {\n    this.setState({\n      scrollable: contentWidth > this.containerWidth,\n      contentWidth\n    });\n  };\n  onChangePage = index => {\n    this.setState({\n      currentPage: index\n    });\n  };\n  onValueChange = (value, options) => {\n    this.props.onValueChange?.(value, options);\n  };\n  onLayout = () => {\n    setTimeout(() => {\n      this.scrollToSelected();\n    }, 0);\n  };\n  getHorizontalMargins = index => {\n    const isFirst = index === 0;\n    const isOnLeft = isFirst || index % this.itemsPerRow === 0;\n    const isOnRight = index % this.itemsPerRow === this.itemsPerRow - 1;\n    let marginLeft;\n    let marginRight;\n\n    if (this.usePagination) {\n      marginLeft = isOnLeft ? 0 : this.innerMargin;\n      marginRight = isOnRight ? 0 : this.innerMargin;\n    } else {\n      const isLast = index === this.colors.length - 1;\n      marginLeft = isFirst ? 8 : this.innerMargin;\n      marginRight = isLast ? 20 : this.innerMargin;\n    }\n\n    return {\n      marginLeft,\n      marginRight\n    };\n  };\n  getSwatchStyle = index => {\n    const sizeHasChanged = this.colors.length !== this.currentColorsCount;\n    const isNextToLastIndex = index === this.colors.length - 2; // Need to update the next to last item because it's margin needs to changed\n\n    if (!_.isUndefined(this.swatchStyles)) {\n      if (_.isUndefined(this.swatchStyles[index]) || !this.usePagination && sizeHasChanged && isNextToLastIndex) {\n        this.swatchStyles[index] = [this.getHorizontalMargins(index), this.props.swatchStyle];\n\n        if (sizeHasChanged && isNextToLastIndex) {\n          this.currentColorsCount = this.colors.length;\n        }\n      }\n\n      return this.swatchStyles[index];\n    }\n  };\n  addRefByIndex = (index, ref) => {\n    if (this.itemsRefs && ref) {\n      this.itemsRefs[index] = ref;\n    }\n  };\n\n  renderColorSwatch(color, index) {\n    const {\n      animatedIndex,\n      testID\n    } = this.props;\n    return <ColorSwatch style={this.getSwatchStyle(index)} index={index} key={color} color={color} value={color} selected={this.value === color} animated={index === animatedIndex} onPress={this.onValueChange} ref={r => this.addRefByIndex(index, r)} testID={`${testID}-${color}`} />;\n  }\n\n  renderPalette(props, contentStyle, colors, pageIndex) {\n    const {\n      style,\n      ...others\n    } = props;\n    this.itemsRefs = [];\n    return <View key={pageIndex} {...others} style={[styles.paletteContainer, contentStyle, style]} onLayout={this.onLayout}>\n        {_.map(colors, (color, i) => {\n        if (color === this.value) {\n          this.selectedColorIndex = i;\n          this.selectedPage = pageIndex;\n        }\n\n        return this.renderColorSwatch(color, i);\n      })}\n      </View>;\n  }\n\n  renderScrollableContent() {\n    const {\n      containerStyle,\n      ...others\n    } = this.props;\n    const {\n      scrollable,\n      contentWidth\n    } = this.state;\n    return <ScrollBar ref={this.scrollBar} style={[containerStyle, styles.scrollContainer]} scrollEnabled={scrollable} onContentSizeChange={this.onContentSizeChange} height={SCROLLABLE_HEIGHT} containerProps={{\n      width: !scrollable ? contentWidth : undefined\n    }} gradientHeight={SCROLLABLE_HEIGHT - 12}>\n        {this.renderPalette(others, styles.scrollContent, this.colors, 0)}\n      </ScrollBar>;\n  }\n\n  renderPaginationContent() {\n    const {\n      containerStyle,\n      loop,\n      ...others\n    } = this.props;\n    const {\n      currentPage\n    } = this.state;\n\n    const colorGroups = _.chunk(this.colors, this.itemsPerPage);\n\n    return <View center style={[containerStyle, styles.paginationContainer]}>\n        <Carousel loop={loop} onChangePage={this.onChangePage} ref={this.carousel}>\n          {_.map(colorGroups, (colorsPerPage, index) => {\n          return this.renderPalette(others, { ...styles.page,\n            width: this.containerWidth\n          }, colorsPerPage, index);\n        })}\n        </Carousel>\n        <PageControl size={6} color={Colors.grey10} inactiveColor={Colors.grey50} spacing={8} numOfPages={colorGroups.length} currentPage={currentPage} />\n      </View>;\n  }\n\n  render() {\n    return this.usePagination ? this.renderPaginationContent() : this.renderScrollableContent();\n  }\n\n}\n\nexport default asBaseComponent(ColorPalette);\nconst styles = StyleSheet.create({\n  paletteContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: HORIZONTAL_PADDING,\n    paddingVertical: VERTICAL_PADDING\n  },\n  paginationContainer: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    paddingBottom: VERTICAL_PADDING\n  },\n  scrollContainer: {\n    backgroundColor: Colors.white\n  },\n  page: {\n    flexWrap: 'wrap'\n  },\n  scrollContent: {\n    height: SCROLLABLE_HEIGHT,\n    paddingLeft: 12\n  }\n});"]},"metadata":{},"sourceType":"module"}