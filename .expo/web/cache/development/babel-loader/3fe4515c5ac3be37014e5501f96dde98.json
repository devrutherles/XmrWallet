{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"blurView\", \"enableModalBlur\", \"visible\", \"useGestureHandlerRootView\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNModal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { BlurViewPackage } from \"../../optionalDependencies\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TopBar, { ModalTopBarProps } from \"./TopBar\";\nimport View from \"../../components/view\";\nvar BlurView = BlurViewPackage == null ? void 0 : BlurViewPackage.BlurView;\nexport { ModalTopBarProps };\n\nvar Modal = function (_Component) {\n  _inherits(Modal, _Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _super.call(this, props);\n\n    if (props.enableModalBlur && !BlurView) {\n      console.error(\"RNUILib Modal's \\\"enableModalBlur\\\" prop requires installing \\\"@react-native-community/blur\\\" dependency\");\n    }\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"renderTouchableOverlay\",\n    value: function renderTouchableOverlay() {\n      var _this$props = this.props,\n          testID = _this$props.testID,\n          overlayBackgroundColor = _this$props.overlayBackgroundColor,\n          onBackgroundPress = _this$props.onBackgroundPress,\n          _this$props$accessibi = _this$props.accessibilityLabel,\n          accessibilityLabel = _this$props$accessibi === void 0 ? 'Dismiss' : _this$props$accessibi;\n\n      if (_.isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n        var isScreenReaderEnabled = Constants.accessibility.isScreenReaderEnabled;\n        var accessibilityProps = isScreenReaderEnabled ? {\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          accessibilityRole: 'button'\n        } : undefined;\n        return React.createElement(View, {\n          useSafeArea: isScreenReaderEnabled,\n          style: !isScreenReaderEnabled && [styles.touchableOverlay, {\n            backgroundColor: overlayBackgroundColor\n          }],\n          testID: testID\n        }, React.createElement(TouchableWithoutFeedback, _extends({}, accessibilityProps, {\n          onPress: onBackgroundPress\n        }), React.createElement(View, {\n          style: isScreenReaderEnabled ? styles.accessibleOverlayView : styles.fill\n        })));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          blurView = _this$props2.blurView,\n          enableModalBlur = _this$props2.enableModalBlur,\n          visible = _this$props2.visible,\n          useGestureHandlerRootView = _this$props2.useGestureHandlerRootView,\n          others = _objectWithoutProperties(_this$props2, _excluded);\n\n      var defaultContainer = enableModalBlur && Constants.isIOS && BlurView ? BlurView : View;\n      var useGestureHandler = useGestureHandlerRootView && Constants.isAndroid;\n      var GestureContainer = useGestureHandler ? GestureHandlerRootView : React.Fragment;\n      var gestureContainerProps = useGestureHandler ? {\n        style: styles.fill\n      } : {};\n      var Container = blurView ? blurView : defaultContainer;\n      return React.createElement(RNModal, _extends({\n        visible: Boolean(visible)\n      }, others), React.createElement(GestureContainer, gestureContainerProps, React.createElement(Container, {\n        style: styles.fill,\n        blurType: \"light\"\n      }, this.renderTouchableOverlay(), this.props.children)));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.propTypes = {\n  enableModalBlur: _pt.bool,\n  blurView: _pt.element,\n  onBackgroundPress: _pt.func,\n  overlayBackgroundColor: _pt.string,\n  testID: _pt.string,\n  accessibilityLabel: _pt.string,\n  useGestureHandlerRootView: _pt.bool\n};\nModal.displayName = 'Modal';\nvar styles = StyleSheet.create({\n  touchableOverlay: _objectSpread({}, StyleSheet.absoluteFillObject),\n  fill: {\n    flex: 1\n  },\n  accessibleOverlayView: {\n    height: 50,\n    width: '100%'\n  }\n});\nModal.TopBar = TopBar;\nexport default asBaseComponent(Modal);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/modal/index.js"],"names":["_pt","_","React","Component","GestureHandlerRootView","BlurViewPackage","Constants","asBaseComponent","TopBar","ModalTopBarProps","View","BlurView","Modal","props","enableModalBlur","console","error","testID","overlayBackgroundColor","onBackgroundPress","accessibilityLabel","isFunction","isScreenReaderEnabled","accessibility","accessibilityProps","accessible","accessibilityRole","undefined","styles","touchableOverlay","backgroundColor","accessibleOverlayView","fill","blurView","visible","useGestureHandlerRootView","others","defaultContainer","isIOS","useGestureHandler","isAndroid","GestureContainer","Fragment","gestureContainerProps","style","Container","Boolean","renderTouchableOverlay","children","propTypes","bool","element","func","string","displayName","StyleSheet","create","absoluteFillObject","flex","height","width"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { StyleSheet, Modal as RNModal, TouchableWithoutFeedback } from 'react-native';\nimport { BlurViewPackage } from \"../../optionalDependencies\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TopBar, { ModalTopBarProps } from \"./TopBar\";\nimport View from \"../../components/view\";\nconst BlurView = BlurViewPackage?.BlurView;\nexport { ModalTopBarProps };\n\n/**\n * @description: Component that present content on top of the invoking screen\n * @extends: Modal\n * @extendsLink: https://reactnative.dev/docs/modal\n * @gif: https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx\n */\nclass Modal extends Component {\n  static propTypes = {\n    /**\n       * Blurs the modal background when transparent (iOS only)\n       */\n    enableModalBlur: _pt.bool,\n\n    /**\n       * A custom view to use as a BlueView instead of the default one\n       */\n    blurView: _pt.element,\n\n    /**\n       * allow dismissing a modal when clicking on its background\n       */\n    onBackgroundPress: _pt.func,\n\n    /**\n       * the background color of the overlay\n       */\n    overlayBackgroundColor: _pt.string,\n\n    /**\n       * The modal's end-to-end test identifier\n       */\n    testID: _pt.string,\n\n    /**\n       * Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\n       * label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n       */\n    accessibilityLabel: _pt.string,\n\n    /**\n       * Should add a GestureHandlerRootView (Android only)\n       */\n    useGestureHandlerRootView: _pt.bool\n  };\n  static displayName = 'Modal';\n\n  constructor(props) {\n    super(props);\n\n    if (props.enableModalBlur && !BlurView) {\n      console.error(`RNUILib Modal's \"enableModalBlur\" prop requires installing \"@react-native-community/blur\" dependency`);\n    }\n  }\n\n  renderTouchableOverlay() {\n    const {\n      testID,\n      overlayBackgroundColor,\n      onBackgroundPress,\n      accessibilityLabel = 'Dismiss'\n    } = this.props;\n\n    if (_.isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n      const isScreenReaderEnabled = Constants.accessibility.isScreenReaderEnabled;\n      const accessibilityProps = isScreenReaderEnabled ? {\n        accessible: true,\n        accessibilityLabel,\n        accessibilityRole: 'button'\n      } : undefined;\n      return (// @ts-ignore\n        <View useSafeArea={isScreenReaderEnabled} style={!isScreenReaderEnabled && [styles.touchableOverlay, {\n          backgroundColor: overlayBackgroundColor\n        }]} testID={testID}>\n          {\n            /*\n             // @ts-ignore */\n          }\n          <TouchableWithoutFeedback {...accessibilityProps} onPress={onBackgroundPress}>\n            <View style={isScreenReaderEnabled ? styles.accessibleOverlayView : styles.fill} />\n          </TouchableWithoutFeedback>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    const {\n      blurView,\n      enableModalBlur,\n      visible,\n      useGestureHandlerRootView,\n      ...others\n    } = this.props;\n    const defaultContainer = enableModalBlur && Constants.isIOS && BlurView ? BlurView : View;\n    const useGestureHandler = useGestureHandlerRootView && Constants.isAndroid;\n    const GestureContainer = useGestureHandler ? GestureHandlerRootView : React.Fragment;\n    const gestureContainerProps = useGestureHandler ? {\n      style: styles.fill\n    } : {};\n    const Container = blurView ? blurView : defaultContainer;\n    return <RNModal visible={Boolean(visible)} {...others}>\n        <GestureContainer {...gestureContainerProps}>\n          <Container style={styles.fill} blurType=\"light\">\n            {this.renderTouchableOverlay()}\n            {this.props.children}\n          </Container>\n        </GestureContainer>\n      </RNModal>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  touchableOverlay: { ...StyleSheet.absoluteFillObject\n  },\n  fill: {\n    flex: 1\n  },\n  accessibleOverlayView: {\n    height: 50,\n    width: '100%'\n  }\n});\nModal.TopBar = TopBar;\nexport default asBaseComponent(Modal);"]},"metadata":{},"sourceType":"module"}