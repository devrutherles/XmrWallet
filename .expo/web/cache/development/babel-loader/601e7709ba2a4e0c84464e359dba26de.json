{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"expandableContent\", \"useDialog\", \"modalProps\", \"dialogProps\", \"showTopBar\", \"topBarProps\"];\nimport React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\n\nvar ExpandableOverlay = function ExpandableOverlay(props, ref) {\n  var children = props.children,\n      expandableContent = props.expandableContent,\n      useDialog = props.useDialog,\n      modalProps = props.modalProps,\n      dialogProps = props.dialogProps,\n      showTopBar = props.showTopBar,\n      topBarProps = props.topBarProps,\n      others = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandableVisible = _useState2[0],\n      setExpandableVisible = _useState2[1];\n\n  var showExpandable = useCallback(function () {\n    return setExpandableVisible(true);\n  }, []);\n  var hideExpandable = useCallback(function () {\n    return setExpandableVisible(false);\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      openExpandable: function openExpandable() {\n        showExpandable();\n      },\n      closeExpandable: function closeExpandable() {\n        hideExpandable();\n      }\n    };\n  });\n\n  var renderModal = function renderModal() {\n    return React.createElement(Modal, _extends({}, modalProps, {\n      visible: expandableVisible,\n      onDismiss: hideExpandable\n    }), showTopBar && React.createElement(Modal.TopBar, _extends({\n      onDone: hideExpandable\n    }, topBarProps)), expandableContent);\n  };\n\n  var renderDialog = function renderDialog() {\n    return React.createElement(Dialog, _extends({}, dialogProps, {\n      visible: expandableVisible,\n      onDismiss: hideExpandable\n    }), expandableContent);\n  };\n\n  return React.createElement(TouchableOpacity, _extends({}, others, {\n    onPress: showExpandable\n  }), React.createElement(View, {\n    pointerEvents: \"none\"\n  }, children), useDialog ? renderDialog() : renderModal());\n};\n\nexport default forwardRef(ExpandableOverlay);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/incubator/expandableOverlay/index.js"],"names":["React","useCallback","useState","forwardRef","useImperativeHandle","TouchableOpacity","View","Modal","Dialog","ExpandableOverlay","props","ref","children","expandableContent","useDialog","modalProps","dialogProps","showTopBar","topBarProps","others","expandableVisible","setExpandableVisible","showExpandable","hideExpandable","openExpandable","closeExpandable","renderModal","renderDialog"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,UAAvC,EAAmDC,mBAAnD,QAA8E,OAA9E;AACA,OAAOC,gBAAP;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,MAAP;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,GAAR,EAAgB;AACxC,MACEC,QADF,GASIF,KATJ,CACEE,QADF;AAAA,MAEEC,iBAFF,GASIH,KATJ,CAEEG,iBAFF;AAAA,MAGEC,SAHF,GASIJ,KATJ,CAGEI,SAHF;AAAA,MAIEC,UAJF,GASIL,KATJ,CAIEK,UAJF;AAAA,MAKEC,WALF,GASIN,KATJ,CAKEM,WALF;AAAA,MAMEC,UANF,GASIP,KATJ,CAMEO,UANF;AAAA,MAOEC,WAPF,GASIR,KATJ,CAOEQ,WAPF;AAAA,MAQKC,MARL,4BASIT,KATJ;;AAUA,kBAAkDR,QAAQ,CAAC,KAAD,CAA1D;AAAA;AAAA,MAAOkB,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAMC,cAAc,GAAGrB,WAAW,CAAC;AAAA,WAAMoB,oBAAoB,CAAC,IAAD,CAA1B;AAAA,GAAD,EAAmC,EAAnC,CAAlC;AACA,MAAME,cAAc,GAAGtB,WAAW,CAAC;AAAA,WAAMoB,oBAAoB,CAAC,KAAD,CAA1B;AAAA,GAAD,EAAoC,EAApC,CAAlC;AACAjB,EAAAA,mBAAmB,CAACO,GAAD,EAAM;AAAA,WAAO;AAC9Ba,MAAAA,cAAc,EAAE,0BAAM;AACpBF,QAAAA,cAAc;AACf,OAH6B;AAI9BG,MAAAA,eAAe,EAAE,2BAAM;AACrBF,QAAAA,cAAc;AACf;AAN6B,KAAP;AAAA,GAAN,CAAnB;;AASA,MAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,WAAO,oBAAC,KAAD,eAAWX,UAAX;AAAuB,MAAA,OAAO,EAAEK,iBAAhC;AAAmD,MAAA,SAAS,EAAEG;AAA9D,QACFN,UAAU,IAAI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,MAAM,EAAEM;AAAtB,OAA0CL,WAA1C,EADZ,EAEFL,iBAFE,CAAP;AAID,GALD;;AAOA,MAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,WAAO,oBAAC,MAAD,eAAYX,WAAZ;AAAyB,MAAA,OAAO,EAAEI,iBAAlC;AAAqD,MAAA,SAAS,EAAEG;AAAhE,QACFV,iBADE,CAAP;AAGD,GAJD;;AAMA,SAAO,oBAAC,gBAAD,eAAsBM,MAAtB;AAA8B,IAAA,OAAO,EAAEG;AAAvC,MACH,oBAAC,IAAD;AAAM,IAAA,aAAa,EAAC;AAApB,KAA4BV,QAA5B,CADG,EAEFE,SAAS,GAAGa,YAAY,EAAf,GAAoBD,WAAW,EAFtC,CAAP;AAID,CAxCD;;AA0CA,eAAevB,UAAU,CAACM,iBAAD,CAAzB","sourcesContent":["import React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\n\nconst ExpandableOverlay = (props, ref) => {\n  const {\n    children,\n    expandableContent,\n    useDialog,\n    modalProps,\n    dialogProps,\n    showTopBar,\n    topBarProps,\n    ...others\n  } = props;\n  const [expandableVisible, setExpandableVisible] = useState(false);\n  const showExpandable = useCallback(() => setExpandableVisible(true), []);\n  const hideExpandable = useCallback(() => setExpandableVisible(false), []);\n  useImperativeHandle(ref, () => ({\n    openExpandable: () => {\n      showExpandable();\n    },\n    closeExpandable: () => {\n      hideExpandable();\n    }\n  }));\n\n  const renderModal = () => {\n    return <Modal {...modalProps} visible={expandableVisible} onDismiss={hideExpandable}>\n        {showTopBar && <Modal.TopBar onDone={hideExpandable} {...topBarProps} />}\n        {expandableContent}\n      </Modal>;\n  };\n\n  const renderDialog = () => {\n    return <Dialog {...dialogProps} visible={expandableVisible} onDismiss={hideExpandable}>\n        {expandableContent}\n      </Dialog>;\n  };\n\n  return <TouchableOpacity {...others} onPress={showExpandable}>\n      <View pointerEvents=\"none\">{children}</View>\n      {useDialog ? renderDialog() : renderModal()}\n    </TouchableOpacity>;\n};\n\nexport default forwardRef(ExpandableOverlay);"]},"metadata":{},"sourceType":"module"}