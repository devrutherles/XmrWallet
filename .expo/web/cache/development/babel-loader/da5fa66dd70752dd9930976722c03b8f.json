{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"index\", \"label\", \"labelColor\", \"selectedLabelColor\", \"labelStyle\", \"selectedLabelStyle\", \"icon\", \"badge\", \"leadingAccessory\", \"trailingAccessory\", \"uppercase\", \"activeOpacity\", \"activeBackgroundColor\", \"testID\", \"ignore\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _pt from \"prop-types\";\nimport React, { useCallback, useContext, useEffect, useRef, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport _ from 'lodash';\nimport Reanimated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport Badge from \"../badge\";\nimport _TouchableOpacity from \"../touchableOpacity\";\nimport TabBarContext from \"./TabBarContext\";\nvar TouchableOpacity = Reanimated.createAnimatedComponent(_TouchableOpacity);\nvar DEFAULT_LABEL_COLOR = Colors.black;\nvar DEFAULT_SELECTED_LABEL_COLOR = Colors.primary;\nexport default function TabBarItem(_ref) {\n  var index = _ref.index,\n      label = _ref.label,\n      labelColor = _ref.labelColor,\n      selectedLabelColor = _ref.selectedLabelColor,\n      labelStyle = _ref.labelStyle,\n      selectedLabelStyle = _ref.selectedLabelStyle,\n      icon = _ref.icon,\n      badge = _ref.badge,\n      leadingAccessory = _ref.leadingAccessory,\n      trailingAccessory = _ref.trailingAccessory,\n      uppercase = _ref.uppercase,\n      _ref$activeOpacity = _ref.activeOpacity,\n      activeOpacity = _ref$activeOpacity === void 0 ? 0.9 : _ref$activeOpacity,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      testID = _ref.testID,\n      ignore = _ref.ignore,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useContext = useContext(TabBarContext),\n      currentPage = _useContext.currentPage,\n      setCurrentIndex = _useContext.setCurrentIndex;\n\n  var itemRef = useRef();\n  var itemWidth = useRef(props.width);\n  var sharedLabelStyle = useSharedValue(JSON.parse(JSON.stringify(labelStyle)));\n  var sharedSelectedLabelStyle = useSharedValue(JSON.parse(JSON.stringify(selectedLabelStyle)));\n  useEffect(function () {\n    if (itemWidth.current) {\n      props.onLayout == null ? void 0 : props.onLayout({\n        nativeEvent: {\n          layout: {\n            x: 0,\n            y: 0,\n            width: itemWidth.current,\n            height: 0\n          }\n        }\n      }, index);\n    }\n  }, []);\n  var onPress = useCallback(function () {\n    if (!ignore) {\n      setCurrentIndex(index);\n    }\n\n    props.onPress == null ? void 0 : props.onPress(index);\n  }, [index, props.onPress, ignore]);\n  var onLayout = useCallback(function (event) {\n    var width = event.nativeEvent.layout.width;\n\n    if (!itemWidth.current && itemRef != null && itemRef.current) {\n      var _itemRef$current;\n\n      itemWidth.current = width;\n      (_itemRef$current = itemRef.current) == null ? void 0 : _itemRef$current.setNativeProps({\n        style: {\n          width: width,\n          paddingHorizontal: null,\n          flex: null\n        }\n      });\n      props.onLayout == null ? void 0 : props.onLayout(event, index);\n    }\n  }, [index, props.onLayout]);\n  var animatedLabelStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      var isActive = currentPage.value === index;\n      return isActive ? sharedSelectedLabelStyle.value : sharedLabelStyle.value;\n    };\n\n    _f._closure = {\n      currentPage,\n      index,\n      sharedSelectedLabelStyle,\n      sharedLabelStyle\n    };\n    _f.asString = \"function _f(){const{currentPage,index,sharedSelectedLabelStyle,sharedLabelStyle}=jsThis._closure;{var isActive=currentPage.value===index;return isActive?sharedSelectedLabelStyle.value:sharedLabelStyle.value;}}\";\n    _f.__workletHash = 13449082690468;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\tabController\\\\TabBarItem.js (87:46)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [currentPage]);\n  var animatedLabelColorStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      var isActive = currentPage.value === index;\n      var inactiveColor = labelColor || DEFAULT_LABEL_COLOR;\n      var activeColor = !ignore ? selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR : inactiveColor;\n      return {\n        color: isActive ? activeColor : inactiveColor\n      };\n    };\n\n    _f._closure = {\n      currentPage,\n      index,\n      labelColor,\n      DEFAULT_LABEL_COLOR,\n      ignore,\n      selectedLabelColor,\n      DEFAULT_SELECTED_LABEL_COLOR\n    };\n    _f.asString = \"function _f(){const{currentPage,index,labelColor,DEFAULT_LABEL_COLOR,ignore,selectedLabelColor,DEFAULT_SELECTED_LABEL_COLOR}=jsThis._closure;{var isActive=currentPage.value===index;var inactiveColor=labelColor||DEFAULT_LABEL_COLOR;var activeColor=!ignore?selectedLabelColor||DEFAULT_SELECTED_LABEL_COLOR:inactiveColor;return{color:isActive?activeColor:inactiveColor};}}\";\n    _f.__workletHash = 1705910549851;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\tabController\\\\TabBarItem.js (91:51)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var animatedIconStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      var isActive = currentPage.value === index;\n      var inactiveColor = labelColor || DEFAULT_LABEL_COLOR;\n      var activeColor = !ignore ? selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR : inactiveColor;\n      return {\n        tintColor: isActive ? activeColor : inactiveColor\n      };\n    };\n\n    _f._closure = {\n      currentPage,\n      index,\n      labelColor,\n      DEFAULT_LABEL_COLOR,\n      ignore,\n      selectedLabelColor,\n      DEFAULT_SELECTED_LABEL_COLOR\n    };\n    _f.asString = \"function _f(){const{currentPage,index,labelColor,DEFAULT_LABEL_COLOR,ignore,selectedLabelColor,DEFAULT_SELECTED_LABEL_COLOR}=jsThis._closure;{var isActive=currentPage.value===index;var inactiveColor=labelColor||DEFAULT_LABEL_COLOR;var activeColor=!ignore?selectedLabelColor||DEFAULT_SELECTED_LABEL_COLOR:inactiveColor;return{tintColor:isActive?activeColor:inactiveColor};}}\";\n    _f.__workletHash = 13842871336380;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\tabController\\\\TabBarItem.js (99:45)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n\n  var _style = useMemo(function () {\n    var constantWidthStyle = itemWidth.current ? {\n      flex: 0,\n      width: itemWidth.current\n    } : undefined;\n    return [styles.tabItem, style, constantWidthStyle];\n  }, [style]);\n\n  return React.createElement(TouchableOpacity, {\n    ref: itemRef,\n    style: _style,\n    onLayout: onLayout,\n    activeBackgroundColor: activeBackgroundColor,\n    activeOpacity: activeOpacity,\n    onPress: onPress,\n    testID: testID\n  }, leadingAccessory, icon && React.createElement(Reanimated.Image, {\n    source: icon,\n    style: [!_.isUndefined(label) && styles.tabItemIconWithLabel, animatedIconStyle]\n  }), !_.isEmpty(label) && React.createElement(Reanimated.Text, {\n    style: [styles.tabItemLabel, labelStyle, animatedLabelStyle, animatedLabelColorStyle]\n  }, uppercase ? _.toUpper(label) : label), badge && React.createElement(Badge, _extends({\n    backgroundColor: Colors.red30,\n    size: 20\n  }, badge, {\n    containerStyle: styles.badge\n  })), trailingAccessory);\n}\nTabBarItem.propTypes = {\n  label: _pt.string,\n  labelColor: _pt.string,\n  selectedLabelColor: _pt.string,\n  icon: _pt.number,\n  iconColor: _pt.string,\n  selectedIconColor: _pt.string,\n  leadingAccessory: _pt.element,\n  trailingAccessory: _pt.element,\n  width: _pt.number,\n  ignore: _pt.bool,\n  onPress: _pt.func,\n  uppercase: _pt.bool,\n  activeOpacity: _pt.number,\n  activeBackgroundColor: _pt.string,\n  testID: _pt.string,\n  index: _pt.number.isRequired,\n  targetPage: _pt.any.isRequired,\n  onLayout: _pt.func\n};\nvar styles = StyleSheet.create({\n  tabItem: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: Spacings.s4\n  },\n  tabItemLabel: _objectSpread({}, Typography.text80),\n  tabItemIconWithLabel: {\n    marginRight: 10\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/tabController/TabBarItem.js"],"names":["_pt","React","useCallback","useContext","useEffect","useRef","useMemo","_","Reanimated","useAnimatedStyle","useSharedValue","Colors","Typography","Spacings","Badge","_TouchableOpacity","TabBarContext","TouchableOpacity","createAnimatedComponent","DEFAULT_LABEL_COLOR","black","DEFAULT_SELECTED_LABEL_COLOR","primary","TabBarItem","index","label","labelColor","selectedLabelColor","labelStyle","selectedLabelStyle","icon","badge","leadingAccessory","trailingAccessory","uppercase","activeOpacity","activeBackgroundColor","testID","ignore","style","props","currentPage","setCurrentIndex","itemRef","itemWidth","width","sharedLabelStyle","JSON","parse","stringify","sharedSelectedLabelStyle","current","onLayout","nativeEvent","layout","x","y","height","onPress","event","setNativeProps","paddingHorizontal","flex","animatedLabelStyle","isActive","value","animatedLabelColorStyle","inactiveColor","activeColor","color","animatedIconStyle","tintColor","_style","constantWidthStyle","undefined","styles","tabItem","isUndefined","tabItemIconWithLabel","isEmpty","tabItemLabel","toUpper","red30","propTypes","string","number","iconColor","selectedIconColor","element","bool","func","isRequired","targetPage","any","StyleSheet","create","flexDirection","alignItems","justifyContent","s4","text80","marginRight","marginLeft","s1"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n// TODO: support commented props\nimport React, { useCallback, useContext, useEffect, useRef, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport _ from 'lodash';\nimport Reanimated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport Badge from \"../badge\";\nimport _TouchableOpacity from \"../touchableOpacity\";\nimport TabBarContext from \"./TabBarContext\";\nconst TouchableOpacity = Reanimated.createAnimatedComponent(_TouchableOpacity);\nconst DEFAULT_LABEL_COLOR = Colors.black;\nconst DEFAULT_SELECTED_LABEL_COLOR = Colors.primary;\n\n/**\n * @description: TabController's TabBarItem\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n * @notes: Must be rendered as a direct child of TabController.TabBar.\n */\nexport default function TabBarItem({\n  index,\n  label,\n  labelColor,\n  selectedLabelColor,\n  labelStyle,\n  selectedLabelStyle,\n  icon,\n  badge,\n  leadingAccessory,\n  trailingAccessory,\n  uppercase,\n  activeOpacity = 0.9,\n  activeBackgroundColor,\n  testID,\n  ignore,\n  style,\n  ...props\n}) {\n  const {\n    currentPage,\n    setCurrentIndex\n  } = useContext(TabBarContext);\n  const itemRef = useRef();\n  const itemWidth = useRef(props.width); // JSON.parse(JSON.stringify is due to an issue with reanimated\n\n  const sharedLabelStyle = useSharedValue(JSON.parse(JSON.stringify(labelStyle)));\n  const sharedSelectedLabelStyle = useSharedValue(JSON.parse(JSON.stringify(selectedLabelStyle)));\n  useEffect(() => {\n    if (itemWidth.current) {\n      props.onLayout?.({\n        nativeEvent: {\n          layout: {\n            x: 0,\n            y: 0,\n            width: itemWidth.current,\n            height: 0\n          }\n        }\n      }, index);\n    }\n  }, []);\n  const onPress = useCallback(() => {\n    if (!ignore) {\n      setCurrentIndex(index);\n    }\n\n    props.onPress?.(index);\n  }, [index, props.onPress, ignore]);\n  const onLayout = useCallback(event => {\n    const {\n      width\n    } = event.nativeEvent.layout;\n\n    if (!itemWidth.current && itemRef?.current) {\n      itemWidth.current = width; // @ts-ignore\n\n      itemRef.current?.setNativeProps({\n        style: {\n          width,\n          paddingHorizontal: null,\n          flex: null\n        }\n      });\n      props.onLayout?.(event, index);\n    }\n  }, [index, props.onLayout]);\n  const animatedLabelStyle = useAnimatedStyle(() => {\n    const isActive = currentPage.value === index;\n    return isActive ? sharedSelectedLabelStyle.value : sharedLabelStyle.value;\n  }, [currentPage]);\n  const animatedLabelColorStyle = useAnimatedStyle(() => {\n    const isActive = currentPage.value === index;\n    const inactiveColor = labelColor || DEFAULT_LABEL_COLOR;\n    const activeColor = !ignore ? selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR : inactiveColor;\n    return {\n      color: isActive ? activeColor : inactiveColor\n    };\n  });\n  const animatedIconStyle = useAnimatedStyle(() => {\n    const isActive = currentPage.value === index;\n    const inactiveColor = labelColor || DEFAULT_LABEL_COLOR;\n    const activeColor = !ignore ? selectedLabelColor || DEFAULT_SELECTED_LABEL_COLOR : inactiveColor;\n    return {\n      tintColor: isActive ? activeColor : inactiveColor\n    };\n  });\n\n  const _style = useMemo(() => {\n    const constantWidthStyle = itemWidth.current ? {\n      flex: 0,\n      width: itemWidth.current\n    } : undefined;\n    return [styles.tabItem, style, constantWidthStyle];\n  }, [style]);\n\n  return <TouchableOpacity // @ts-expect-error\n  ref={itemRef} style={_style} onLayout={onLayout} activeBackgroundColor={activeBackgroundColor} activeOpacity={activeOpacity} onPress={onPress} testID={testID}>\n      {leadingAccessory}\n      {icon && <Reanimated.Image source={icon} style={[!_.isUndefined(label) && styles.tabItemIconWithLabel, animatedIconStyle]} />}\n      {!_.isEmpty(label) && <Reanimated.Text style={[styles.tabItemLabel, labelStyle, animatedLabelStyle, animatedLabelColorStyle]}>\n          {uppercase ? _.toUpper(label) : label}\n        </Reanimated.Text>}\n      {badge && <Badge backgroundColor={Colors.red30} size={20} {...badge} containerStyle={styles.badge} />}\n      {trailingAccessory}\n    </TouchableOpacity>;\n}\nTabBarItem.propTypes = {\n  /**\n     * label of the tab\n     */\n  label: _pt.string,\n\n  /**\n     * the default label color\n     */\n  labelColor: _pt.string,\n\n  /**\n     * the selected label color\n     */\n  selectedLabelColor: _pt.string,\n\n  /**\n     * icon of the tab\n     */\n  icon: _pt.number,\n\n  /**\n     * icon tint color\n     */\n  iconColor: _pt.string,\n\n  /**\n     * icon selected tint color\n     */\n  selectedIconColor: _pt.string,\n\n  /**\n     * Pass to render a leading element\n     */\n  leadingAccessory: _pt.element,\n\n  /**\n     * Pass to render a trailing element\n     */\n  trailingAccessory: _pt.element,\n\n  /**\n     * A fixed width for the item\n     */\n  width: _pt.number,\n\n  /**\n     * ignore of the tab\n     */\n  ignore: _pt.bool,\n\n  /**\n     * callback for when pressing a tab\n     */\n  onPress: _pt.func,\n\n  /**\n     * whether to change the text to uppercase\n     */\n  uppercase: _pt.bool,\n\n  /**\n     * The active opacity when pressing a tab\n     */\n  activeOpacity: _pt.number,\n\n  /**\n     * TODO: rename to feedbackColor\n     * Apply background color on press for TouchableOpacity\n     */\n  activeBackgroundColor: _pt.string,\n\n  /**\n     * Used as a testing identifier\n     */\n  testID: _pt.string,\n  index: _pt.number.isRequired,\n  targetPage: _pt.any.isRequired,\n  onLayout: _pt.func\n};\nconst styles = StyleSheet.create({\n  tabItem: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: Spacings.s4\n  },\n  tabItemLabel: { ...Typography.text80\n  },\n  tabItemIconWithLabel: {\n    marginRight: 10\n  },\n  badge: {\n    marginLeft: Spacings.s1\n  }\n});"]},"metadata":{},"sourceType":"module"}