{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nexport var ButtonSize;\n\n(function (ButtonSize) {\n  ButtonSize[\"xSmall\"] = \"xSmall\";\n  ButtonSize[\"small\"] = \"small\";\n  ButtonSize[\"medium\"] = \"medium\";\n  ButtonSize[\"large\"] = \"large\";\n})(ButtonSize || (ButtonSize = {}));\n\nexport var ButtonAnimationDirection;\n\n(function (ButtonAnimationDirection) {\n  ButtonAnimationDirection[\"center\"] = \"center\";\n  ButtonAnimationDirection[\"left\"] = \"left\";\n  ButtonAnimationDirection[\"right\"] = \"right\";\n})(ButtonAnimationDirection || (ButtonAnimationDirection = {}));\n\nexport var DEFAULT_PROPS = {\n  iconOnRight: false\n};\n\nvar FakeButtonForDocs = function (_PureComponent) {\n  _inherits(FakeButtonForDocs, _PureComponent);\n\n  var _super = _createSuper(FakeButtonForDocs);\n\n  function FakeButtonForDocs() {\n    _classCallCheck(this, FakeButtonForDocs);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FakeButtonForDocs, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return FakeButtonForDocs;\n}(PureComponent);\n\nFakeButtonForDocs.propTypes = {\n  label: _pt.string,\n  color: _pt.string,\n  iconOnRight: _pt.bool,\n  supportRTL: _pt.bool,\n  backgroundColor: _pt.string,\n  disabledBackgroundColor: _pt.string,\n  size: _pt.oneOf([\"xSmall\", \"small\", \"medium\", \"large\"]),\n  borderRadius: _pt.number,\n  onPress: _pt.func,\n  disabled: _pt.bool,\n  outline: _pt.bool,\n  outlineColor: _pt.string,\n  outlineWidth: _pt.number,\n  link: _pt.bool,\n  linkColor: _pt.string,\n  fullWidth: _pt.bool,\n  round: _pt.bool,\n  enableShadow: _pt.bool,\n  avoidInnerPadding: _pt.bool,\n  avoidMinWidth: _pt.bool,\n  getActiveBackgroundColor: _pt.func,\n  animateLayout: _pt.bool,\n  animateTo: _pt.oneOf([\"center\", \"left\", \"right\"])\n};\nFakeButtonForDocs.displayName = 'Button';\nFakeButtonForDocs.defaultProps = DEFAULT_PROPS;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/button/ButtonTypes.js"],"names":["_pt","React","PureComponent","ButtonSize","ButtonAnimationDirection","DEFAULT_PROPS","iconOnRight","FakeButtonForDocs","propTypes","label","string","color","bool","supportRTL","backgroundColor","disabledBackgroundColor","size","oneOf","borderRadius","number","onPress","func","disabled","outline","outlineColor","outlineWidth","link","linkColor","fullWidth","round","enableShadow","avoidInnerPadding","avoidMinWidth","getActiveBackgroundColor","animateLayout","animateTo","displayName","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,IAAIC,UAAJ;;AAEP,CAAC,UAAUA,UAAV,EAAsB;AACrBA,EAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,QAAvB;AACAA,EAAAA,UAAU,CAAC,OAAD,CAAV,GAAsB,OAAtB;AACAA,EAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,QAAvB;AACAA,EAAAA,UAAU,CAAC,OAAD,CAAV,GAAsB,OAAtB;AACD,CALD,EAKGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CALb;;AAOA,OAAO,IAAIC,wBAAJ;;AAEP,CAAC,UAAUA,wBAAV,EAAoC;AACnCA,EAAAA,wBAAwB,CAAC,QAAD,CAAxB,GAAqC,QAArC;AACAA,EAAAA,wBAAwB,CAAC,MAAD,CAAxB,GAAmC,MAAnC;AACAA,EAAAA,wBAAwB,CAAC,OAAD,CAAxB,GAAoC,OAApC;AACD,CAJD,EAIGA,wBAAwB,KAAKA,wBAAwB,GAAG,EAAhC,CAJ3B;;AAMA,OAAO,IAAMC,aAAa,GAAG;AAC3BC,EAAAA,WAAW,EAAE;AADc,CAAtB;;IAaDC,iB;;;;;;;;;;;;;WA2HJ,kBAAS;AACP,aAAO,IAAP;AACD;;;;EA7H6BL,a;;AAA1BK,iB,CACGC,S,GAAY;AAIjBC,EAAAA,KAAK,EAAET,GAAG,CAACU,MAJM;AASjBC,EAAAA,KAAK,EAAEX,GAAG,CAACU,MATM;AAcjBJ,EAAAA,WAAW,EAAEN,GAAG,CAACY,IAdA;AAmBjBC,EAAAA,UAAU,EAAEb,GAAG,CAACY,IAnBC;AAwBjBE,EAAAA,eAAe,EAAEd,GAAG,CAACU,MAxBJ;AA6BjBK,EAAAA,uBAAuB,EAAEf,GAAG,CAACU,MA7BZ;AAkCjBM,EAAAA,IAAI,EAAEhB,GAAG,CAACiB,KAAJ,CAAU,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,EAA8B,OAA9B,CAAV,CAlCW;AAuCjBC,EAAAA,YAAY,EAAElB,GAAG,CAACmB,MAvCD;AA4CjBC,EAAAA,OAAO,EAAEpB,GAAG,CAACqB,IA5CI;AAiDjBC,EAAAA,QAAQ,EAAEtB,GAAG,CAACY,IAjDG;AAsDjBW,EAAAA,OAAO,EAAEvB,GAAG,CAACY,IAtDI;AA2DjBY,EAAAA,YAAY,EAAExB,GAAG,CAACU,MA3DD;AAgEjBe,EAAAA,YAAY,EAAEzB,GAAG,CAACmB,MAhED;AAqEjBO,EAAAA,IAAI,EAAE1B,GAAG,CAACY,IArEO;AA0EjBe,EAAAA,SAAS,EAAE3B,GAAG,CAACU,MA1EE;AA+EjBkB,EAAAA,SAAS,EAAE5B,GAAG,CAACY,IA/EE;AAoFjBiB,EAAAA,KAAK,EAAE7B,GAAG,CAACY,IApFM;AAyFjBkB,EAAAA,YAAY,EAAE9B,GAAG,CAACY,IAzFD;AA8FjBmB,EAAAA,iBAAiB,EAAE/B,GAAG,CAACY,IA9FN;AAmGjBoB,EAAAA,aAAa,EAAEhC,GAAG,CAACY,IAnGF;AAyGjBqB,EAAAA,wBAAwB,EAAEjC,GAAG,CAACqB,IAzGb;AA+GjBa,EAAAA,aAAa,EAAElC,GAAG,CAACY,IA/GF;AAoHjBuB,EAAAA,SAAS,EAAEnC,GAAG,CAACiB,KAAJ,CAAU,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,CAAV;AApHM,C;AADfV,iB,CAwHG6B,W,GAAc,Q;AAxHjB7B,iB,CAyHG8B,Y,GAAehC,a","sourcesContent":["import _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nexport let ButtonSize;\n\n(function (ButtonSize) {\n  ButtonSize[\"xSmall\"] = \"xSmall\";\n  ButtonSize[\"small\"] = \"small\";\n  ButtonSize[\"medium\"] = \"medium\";\n  ButtonSize[\"large\"] = \"large\";\n})(ButtonSize || (ButtonSize = {}));\n\nexport let ButtonAnimationDirection;\n\n(function (ButtonAnimationDirection) {\n  ButtonAnimationDirection[\"center\"] = \"center\";\n  ButtonAnimationDirection[\"left\"] = \"left\";\n  ButtonAnimationDirection[\"right\"] = \"right\";\n})(ButtonAnimationDirection || (ButtonAnimationDirection = {}));\n\nexport const DEFAULT_PROPS = {\n  iconOnRight: false\n};\n/**\n * @description: Basic button component\n * @extends: TouchableOpacity\n * @modifiers: margin, background\n * @image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Sizes.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Typographies.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Outlines.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Corners.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Custom.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Inspirations.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Round.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Full.png?raw=true\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Animated.gif?raw=true\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ButtonsScreen.tsx\n */\n// @ts-ignore \n\nclass FakeButtonForDocs extends PureComponent {\n  static propTypes = {\n    /**\n         * Text to show inside the button\n         */\n    label: _pt.string,\n\n    /**\n         * The Button text color (inherited from Text component)\n         */\n    color: _pt.string,\n\n    /**\n         * Should the icon be right to the label\n         */\n    iconOnRight: _pt.bool,\n\n    /**\n         * whether the icon should flip horizontally on RTL locals\n         */\n    supportRTL: _pt.bool,\n\n    /**\n         * Color of the button background\n         */\n    backgroundColor: _pt.string,\n\n    /**\n         * Color of the disabled button background\n         */\n    disabledBackgroundColor: _pt.string,\n\n    /**\n         * Size of the button [large, medium, small, xSmall]\n         */\n    size: _pt.oneOf([\"xSmall\", \"small\", \"medium\", \"large\"]),\n\n    /**\n         * Custom border radius.\n         */\n    borderRadius: _pt.number,\n\n    /**\n         * Actions handler\n         */\n    onPress: _pt.func,\n\n    /**\n         * Disable interactions for the component\n         */\n    disabled: _pt.bool,\n\n    /**\n         * Button will have outline style\n         */\n    outline: _pt.bool,\n\n    /**\n         * The outline color\n         */\n    outlineColor: _pt.string,\n\n    /**\n         * The outline width\n         */\n    outlineWidth: _pt.number,\n\n    /**\n         * Button will look like a link\n         */\n    link: _pt.bool,\n\n    /**\n         * label color for when it's displayed as link\n         */\n    linkColor: _pt.string,\n\n    /**\n         * should the button act as a coast to coast button (no border radius)\n         */\n    fullWidth: _pt.bool,\n\n    /**\n         * should the button be a round button\n         */\n    round: _pt.bool,\n\n    /**\n         * Control shadow visibility (iOS-only)\n         */\n    enableShadow: _pt.bool,\n\n    /**\n         * avoid inner button padding\n         */\n    avoidInnerPadding: _pt.bool,\n\n    /**\n         * avoid minimum width constraints\n         */\n    avoidMinWidth: _pt.bool,\n\n    /**\n         * callback for getting activeBackgroundColor (e.g. (calculatedBackgroundColor, prop) => {...})\n         * better set using ThemeManager\n         */\n    getActiveBackgroundColor: _pt.func,\n\n    /**\n         * should animate layout change\n         * Note?: For Android you must set 'setLayoutAnimationEnabledExperimental(true)' via RN's 'UIManager'\n         */\n    animateLayout: _pt.bool,\n\n    /**\n         * the direction of the animation ('left' and 'right' will effect the button's own alignment)\n         */\n    animateTo: _pt.oneOf([\"center\", \"left\", \"right\"])\n  };\n  // eslint-disable-line\n  static displayName = 'Button';\n  static defaultProps = DEFAULT_PROPS;\n\n  render() {\n    return null;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}