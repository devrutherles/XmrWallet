{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../../style\";\nimport Constants from \"../../helpers/Constants\";\nimport { extractAlignmentsValues } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport Modal from \"../modal\";\nimport View from \"../view\";\nimport PanListenerView from \"../panningViews/panListenerView\";\nimport DialogDismissibleView from \"./DialogDismissibleView\";\nimport OverlayFadingBackground from \"./OverlayFadingBackground\";\nimport PanningProvider from \"../panningViews/panningProvider\";\nvar DEFAULT_OVERLAY_BACKGROUND_COLOR = Colors.rgba(Colors.grey10, 0.6);\n\nvar Dialog = function (_Component) {\n  _inherits(Dialog, _Component);\n\n  var _super = _createSuper(Dialog);\n\n  function Dialog(_props) {\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    _this = _super.call(this, _props);\n\n    _this.onFadeDone = function () {\n      if (!_this.state.modalVisibility) {\n        setTimeout(function () {\n          _this.props.onDialogDismissed == null ? void 0 : _this.props.onDialogDismissed(_this.props);\n        }, 100);\n      }\n    };\n\n    _this._onDismiss = function () {\n      _this.setState({\n        modalVisibility: false,\n        fadeOut: false\n      }, function () {\n        var props = _this.props;\n\n        if (props.visible) {\n          props.onDismiss == null ? void 0 : props.onDismiss(props);\n        }\n\n        if (Constants.isAndroid) {\n          props.onDialogDismissed == null ? void 0 : props.onDialogDismissed(props);\n        }\n      });\n    };\n\n    _this.onDismiss = function () {\n      var fadeOut = Constants.isIOS && _this.props.visible;\n\n      if (fadeOut) {\n        _this.setState({\n          fadeOut: fadeOut\n        }, _this._onDismiss);\n      } else {\n        _this._onDismiss();\n      }\n    };\n\n    _this.hideDialogView = function () {\n      _this.setState({\n        dialogVisibility: false\n      });\n    };\n\n    _this.renderPannableHeader = function (directions) {\n      var _this$props = _this.props,\n          renderPannableHeader = _this$props.renderPannableHeader,\n          pannableHeaderProps = _this$props.pannableHeaderProps;\n\n      if (renderPannableHeader) {\n        return React.createElement(PanListenerView, {\n          directions: directions\n        }, renderPannableHeader(pannableHeaderProps));\n      }\n    };\n\n    _this.getContainerType = function () {\n      var _this$props2 = _this.props,\n          panDirection = _this$props2.panDirection,\n          renderPannableHeader = _this$props2.renderPannableHeader;\n\n      if (!panDirection || renderPannableHeader) {\n        return View;\n      }\n\n      return PanListenerView;\n    };\n\n    _this.renderDialogView = function () {\n      var _this$props3 = _this.props,\n          children = _this$props3.children,\n          _this$props3$panDirec = _this$props3.panDirection,\n          panDirection = _this$props3$panDirec === void 0 ? PanningProvider.Directions.DOWN : _this$props3$panDirec,\n          containerStyle = _this$props3.containerStyle,\n          testID = _this$props3.testID;\n      var dialogVisibility = _this.state.dialogVisibility;\n\n      var Container = _this.getContainerType();\n\n      return React.createElement(View, {\n        testID: testID,\n        style: [_this.styles.dialogViewSize],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanningProvider, null, React.createElement(DialogDismissibleView, {\n        direction: panDirection,\n        visible: dialogVisibility,\n        onDismiss: _this.onDismiss,\n        containerStyle: _this.styles.flexType,\n        style: _this.styles.flexType\n      }, React.createElement(Container, {\n        directions: [panDirection],\n        style: [_this.styles.overflow, _this.styles.flexType, containerStyle]\n      }, _this.renderPannableHeader([panDirection]), children))));\n    };\n\n    _this.renderDialogContainer = function () {\n      var _this$state = _this.state,\n          modalVisibility = _this$state.modalVisibility,\n          dialogVisibility = _this$state.dialogVisibility,\n          fadeOut = _this$state.fadeOut;\n      var _this$props4 = _this.props,\n          useSafeArea = _this$props4.useSafeArea,\n          bottom = _this$props4.bottom,\n          overlayBackgroundColor = _this$props4.overlayBackgroundColor,\n          testID = _this$props4.testID;\n      var addBottomSafeArea = Constants.isIphoneX && useSafeArea && bottom;\n      var bottomInsets = Constants.getSafeAreaInsets().bottom - 8;\n      var onFadeDone = Constants.isIOS ? _this.onFadeDone : undefined;\n      return React.createElement(View, {\n        useSafeArea: useSafeArea,\n        style: [_this.styles.centerHorizontal, _this.styles.alignments, _this.styles.container],\n        pointerEvents: \"box-none\"\n      }, React.createElement(OverlayFadingBackground, {\n        testID: testID + \".overlayFadingBackground\",\n        modalVisibility: modalVisibility,\n        dialogVisibility: dialogVisibility,\n        overlayBackgroundColor: overlayBackgroundColor,\n        onFadeDone: onFadeDone,\n        fadeOut: fadeOut\n      }), _this.renderDialogView(), addBottomSafeArea && React.createElement(View, {\n        style: {\n          marginTop: bottomInsets\n        }\n      }));\n    };\n\n    _this.render = function () {\n      var modalVisibility = _this.state.modalVisibility;\n      var _this$props5 = _this.props,\n          testID = _this$props5.testID,\n          supportedOrientations = _this$props5.supportedOrientations,\n          accessibilityLabel = _this$props5.accessibilityLabel,\n          ignoreBackgroundPress = _this$props5.ignoreBackgroundPress;\n      var onBackgroundPress = !ignoreBackgroundPress ? _this.hideDialogView : undefined;\n      return React.createElement(Modal, {\n        testID: testID + \".modal\",\n        transparent: true,\n        visible: modalVisibility,\n        animationType: 'none',\n        onBackgroundPress: onBackgroundPress,\n        onRequestClose: onBackgroundPress,\n        supportedOrientations: supportedOrientations,\n        accessibilityLabel: accessibilityLabel\n      }, _this.renderDialogContainer());\n    };\n\n    _this.state = {\n      alignments: extractAlignmentsValues(_props),\n      modalVisibility: _props.visible,\n      dialogVisibility: _props.visible\n    };\n    _this.styles = createStyles(_this.props);\n\n    _this.setAlignment();\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var nexVisible = nextProps.visible;\n      var visible = this.props.visible;\n\n      if (nexVisible && !visible) {\n        this.setState({\n          modalVisibility: true,\n          dialogVisibility: true\n        });\n      } else if (visible && !nexVisible) {\n        this.hideDialogView();\n      }\n    }\n  }, {\n    key: \"setAlignment\",\n    value: function setAlignment() {\n      var alignments = this.state.alignments;\n\n      if (_.isEmpty(alignments)) {\n        this.styles.alignments = this.styles.centerContent;\n      } else {\n        this.styles.alignments = alignments;\n      }\n    }\n  }]);\n\n  return Dialog;\n}(Component);\n\nDialog.propTypes = {\n  visible: _pt.bool,\n  onDismiss: _pt.func,\n  ignoreBackgroundPress: _pt.bool,\n  overlayBackgroundColor: _pt.string,\n  width: _pt.oneOfType([_pt.string, _pt.number]),\n  height: _pt.oneOfType([_pt.string, _pt.number]),\n  useSafeArea: _pt.bool,\n  onDialogDismissed: _pt.func,\n  renderPannableHeader: _pt.func,\n  pannableHeaderProps: _pt.any,\n  testID: _pt.string\n};\nDialog.displayName = 'Dialog';\nDialog.defaultProps = {\n  overlayBackgroundColor: DEFAULT_OVERLAY_BACKGROUND_COLOR\n};\n\nfunction createStyles(props) {\n  var _props$width = props.width,\n      width = _props$width === void 0 ? '90%' : _props$width,\n      height = props.height;\n  var flexType = height ? {\n    flex: 1\n  } : {\n    flex: 0\n  };\n  return StyleSheet.create({\n    dialogViewSize: {\n      width: width,\n      height: height\n    },\n    flexType: flexType,\n    container: {\n      flex: 1\n    },\n    centerHorizontal: {\n      alignItems: 'center'\n    },\n    centerContent: {\n      justifyContent: 'center'\n    },\n    overflow: {\n      overflow: 'hidden'\n    }\n  });\n}\n\nexport default asBaseComponent(Dialog);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/dialog/index.js"],"names":["_pt","_","React","Component","Colors","Constants","extractAlignmentsValues","asBaseComponent","Modal","View","PanListenerView","DialogDismissibleView","OverlayFadingBackground","PanningProvider","DEFAULT_OVERLAY_BACKGROUND_COLOR","rgba","grey10","Dialog","props","onFadeDone","state","modalVisibility","setTimeout","onDialogDismissed","_onDismiss","setState","fadeOut","visible","onDismiss","isAndroid","isIOS","hideDialogView","dialogVisibility","renderPannableHeader","directions","pannableHeaderProps","getContainerType","panDirection","renderDialogView","children","Directions","DOWN","containerStyle","testID","Container","styles","dialogViewSize","flexType","overflow","renderDialogContainer","useSafeArea","bottom","overlayBackgroundColor","addBottomSafeArea","isIphoneX","bottomInsets","getSafeAreaInsets","undefined","centerHorizontal","alignments","container","marginTop","render","supportedOrientations","accessibilityLabel","ignoreBackgroundPress","onBackgroundPress","createStyles","setAlignment","nextProps","nexVisible","isEmpty","centerContent","propTypes","bool","func","string","width","oneOfType","number","height","any","displayName","defaultProps","flex","StyleSheet","create","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors } from \"../../style\";\nimport Constants from \"../../helpers/Constants\";\nimport { extractAlignmentsValues } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport Modal from \"../modal\";\nimport View from \"../view\";\nimport PanListenerView from \"../panningViews/panListenerView\";\nimport DialogDismissibleView from \"./DialogDismissibleView\";\nimport OverlayFadingBackground from \"./OverlayFadingBackground\";\nimport PanningProvider from \"../panningViews/panningProvider\"; // TODO: KNOWN ISSUES\n// 1. iOS pressing on the background while enter animation is happening will not call onDismiss\n//    Touch events are not registered?\n// 2. SafeArea is transparent\n// 3. Check why we need the state change in DialogDismissibleView -> onLayout -> animateTo\n\nconst DEFAULT_OVERLAY_BACKGROUND_COLOR = Colors.rgba(Colors.grey10, 0.6);\n/**\n * @description: Dialog component for displaying custom content inside a popup dialog\n * @notes: Use alignment modifiers to control the dialog position\n * (top, bottom, centerV, centerH, etc... by default the dialog is aligned to center)\n * @modifiers: alignment\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DialogScreen.js\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Dialog/Dialog.gif?raw=true\n */\n\nclass Dialog extends Component {\n  static propTypes = {\n    /**\n       * Control visibility of the dialog\n       */\n    visible: _pt.bool,\n\n    /**\n       * Dismiss callback for when clicking on the background\n       */\n    onDismiss: _pt.func,\n\n    /**\n       * Whether or not to ignore background press\n       */\n    ignoreBackgroundPress: _pt.bool,\n\n    /**\n       * The color of the overlay background\n       */\n    overlayBackgroundColor: _pt.string,\n\n    /**\n       * The dialog width (default: 90%)\n       */\n    width: _pt.oneOfType([_pt.string, _pt.number]),\n\n    /**\n       * The dialog height (default: undefined)\n       */\n    height: _pt.oneOfType([_pt.string, _pt.number]),\n\n    /**\n       * Whether or not to handle SafeArea\n       */\n    useSafeArea: _pt.bool,\n\n    /**\n       * Called once the dialog has been dismissed completely\n       */\n    onDialogDismissed: _pt.func,\n\n    /**\n       * If this is added only the header will be pannable;\n       * this allows for scrollable content (the children of the dialog)\n       * props are transferred to the renderPannableHeader\n       */\n    renderPannableHeader: _pt.func,\n\n    /**\n       * The props that will be passed to the pannable header\n       */\n    pannableHeaderProps: _pt.any,\n\n    /**\n       * Used as a testing identifier\n       */\n    testID: _pt.string\n  };\n  static displayName = 'Dialog';\n  static defaultProps = {\n    overlayBackgroundColor: DEFAULT_OVERLAY_BACKGROUND_COLOR\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      alignments: extractAlignmentsValues(props),\n      modalVisibility: props.visible,\n      dialogVisibility: props.visible\n    };\n    this.styles = createStyles(this.props);\n    this.setAlignment();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      visible: nexVisible\n    } = nextProps;\n    const {\n      visible\n    } = this.props;\n\n    if (nexVisible && !visible) {\n      this.setState({\n        modalVisibility: true,\n        dialogVisibility: true\n      });\n    } else if (visible && !nexVisible) {\n      this.hideDialogView();\n    }\n  }\n\n  setAlignment() {\n    const {\n      alignments\n    } = this.state;\n\n    if (_.isEmpty(alignments)) {\n      this.styles.alignments = this.styles.centerContent;\n    } else {\n      this.styles.alignments = alignments;\n    }\n  } // TODO: revert adding this workaround once RN fixes https://github.com/facebook/react-native/issues/29455\n\n\n  onFadeDone = () => {\n    if (!this.state.modalVisibility) {\n      setTimeout(() => {\n        // unfortunately this is needed if a modal needs to open on iOS\n        this.props.onDialogDismissed?.(this.props);\n      }, 100);\n    }\n  };\n  _onDismiss = () => {\n    this.setState({\n      modalVisibility: false,\n      fadeOut: false\n    }, () => {\n      const props = this.props;\n\n      if (props.visible) {\n        props.onDismiss?.(props);\n      } // Parity with iOS Modal's onDismiss\n\n\n      if (Constants.isAndroid) {\n        props.onDialogDismissed?.(props);\n      }\n    });\n  };\n  onDismiss = () => {\n    const fadeOut = Constants.isIOS && this.props.visible;\n\n    if (fadeOut) {\n      this.setState({\n        fadeOut\n      }, this._onDismiss);\n    } else {\n      this._onDismiss();\n    }\n  };\n  hideDialogView = () => {\n    this.setState({\n      dialogVisibility: false\n    });\n  };\n  renderPannableHeader = directions => {\n    const {\n      renderPannableHeader,\n      pannableHeaderProps\n    } = this.props;\n\n    if (renderPannableHeader) {\n      return <PanListenerView directions={directions}>{renderPannableHeader(pannableHeaderProps)}</PanListenerView>;\n    }\n  };\n  getContainerType = () => {\n    const {\n      panDirection,\n      renderPannableHeader\n    } = this.props;\n\n    if (!panDirection || renderPannableHeader) {\n      return View;\n    }\n\n    return PanListenerView;\n  };\n  renderDialogView = () => {\n    const {\n      children,\n      panDirection = PanningProvider.Directions.DOWN,\n      containerStyle,\n      testID\n    } = this.props;\n    const {\n      dialogVisibility\n    } = this.state;\n    const Container = this.getContainerType();\n    return <View testID={testID} style={[this.styles.dialogViewSize]} pointerEvents=\"box-none\">\n        <PanningProvider>\n          <DialogDismissibleView direction={panDirection} visible={dialogVisibility} onDismiss={this.onDismiss} containerStyle={this.styles.flexType} style={this.styles.flexType}>\n            <Container directions={[panDirection]} style={[this.styles.overflow, this.styles.flexType, containerStyle]}>\n              {this.renderPannableHeader([panDirection])}\n              {children}\n            </Container>\n          </DialogDismissibleView>\n        </PanningProvider>\n      </View>;\n  }; // TODO: renderOverlay {_.invoke(this.props, 'renderOverlay')}\n\n  renderDialogContainer = () => {\n    const {\n      modalVisibility,\n      dialogVisibility,\n      fadeOut\n    } = this.state;\n    const {\n      useSafeArea,\n      bottom,\n      overlayBackgroundColor,\n      testID\n    } = this.props;\n    const addBottomSafeArea = Constants.isIphoneX && useSafeArea && bottom;\n    const bottomInsets = Constants.getSafeAreaInsets().bottom - 8; // TODO: should this be here or in the input style?\n\n    const onFadeDone = Constants.isIOS ? this.onFadeDone : undefined;\n    return <View useSafeArea={useSafeArea} style={[this.styles.centerHorizontal, this.styles.alignments, this.styles.container]} pointerEvents=\"box-none\">\n        <OverlayFadingBackground testID={`${testID}.overlayFadingBackground`} modalVisibility={modalVisibility} dialogVisibility={dialogVisibility} overlayBackgroundColor={overlayBackgroundColor} onFadeDone={onFadeDone} fadeOut={fadeOut} />\n        {this.renderDialogView()}\n        {addBottomSafeArea && <View style={{\n        marginTop: bottomInsets\n      }} />}\n      </View>;\n  };\n  render = () => {\n    const {\n      modalVisibility\n    } = this.state;\n    const {\n      testID,\n      supportedOrientations,\n      accessibilityLabel,\n      ignoreBackgroundPress\n    } = this.props;\n    const onBackgroundPress = !ignoreBackgroundPress ? this.hideDialogView : undefined;\n    return <Modal testID={`${testID}.modal`} transparent visible={modalVisibility} animationType={'none'} onBackgroundPress={onBackgroundPress} onRequestClose={onBackgroundPress} supportedOrientations={supportedOrientations} accessibilityLabel={accessibilityLabel}>\n        {this.renderDialogContainer()}\n      </Modal>;\n  };\n}\n\nfunction createStyles(props) {\n  const {\n    width = '90%',\n    height\n  } = props;\n  const flexType = height ? {\n    flex: 1\n  } : {\n    flex: 0\n  };\n  return StyleSheet.create({\n    dialogViewSize: {\n      width,\n      height\n    },\n    flexType,\n    container: {\n      flex: 1\n    },\n    centerHorizontal: {\n      alignItems: 'center'\n    },\n    centerContent: {\n      justifyContent: 'center'\n    },\n    overflow: {\n      overflow: 'hidden'\n    }\n  });\n}\n\nexport default asBaseComponent(Dialog);"]},"metadata":{},"sourceType":"module"}