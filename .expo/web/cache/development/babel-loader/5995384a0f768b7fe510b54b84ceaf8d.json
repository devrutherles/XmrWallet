{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nexport var DEFAULT_PROPS = {\n  label: 'No internet. Check your connection.',\n  allowDismiss: false,\n  useAbsolutePosition: true\n};\n\nvar FakeConnectionStatusBarForDocs = function (_PureComponent) {\n  _inherits(FakeConnectionStatusBarForDocs, _PureComponent);\n\n  var _super = _createSuper(FakeConnectionStatusBarForDocs);\n\n  function FakeConnectionStatusBarForDocs() {\n    _classCallCheck(this, FakeConnectionStatusBarForDocs);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FakeConnectionStatusBarForDocs, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return FakeConnectionStatusBarForDocs;\n}(PureComponent);\n\nFakeConnectionStatusBarForDocs.propTypes = {\n  label: _pt.string,\n  onConnectionChange: _pt.func,\n  allowDismiss: _pt.bool,\n  useAbsolutePosition: _pt.bool\n};\nFakeConnectionStatusBarForDocs.displayName = 'ConnectionStatusBar';\nFakeConnectionStatusBarForDocs.defaultProps = DEFAULT_PROPS;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/connectionStatusBar/Types.js"],"names":["_pt","React","PureComponent","DEFAULT_PROPS","label","allowDismiss","useAbsolutePosition","FakeConnectionStatusBarForDocs","propTypes","string","onConnectionChange","func","bool","displayName","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,IAAMC,aAAa,GAAG;AAC3BC,EAAAA,KAAK,EAAE,qCADoB;AAE3BC,EAAAA,YAAY,EAAE,KAFa;AAG3BC,EAAAA,mBAAmB,EAAE;AAHM,CAAtB;;IAaDC,8B;;;;;;;;;;;;;WA0BJ,kBAAS;AACP,aAAO,IAAP;AACD;;;;EA5B0CL,a;;AAAvCK,8B,CACGC,S,GAAY;AAIjBJ,EAAAA,KAAK,EAAEJ,GAAG,CAACS,MAJM;AASjBC,EAAAA,kBAAkB,EAAEV,GAAG,CAACW,IATP;AAcjBN,EAAAA,YAAY,EAAEL,GAAG,CAACY,IAdD;AAmBjBN,EAAAA,mBAAmB,EAAEN,GAAG,CAACY;AAnBR,C;AADfL,8B,CAuBGM,W,GAAc,qB;AAvBjBN,8B,CAwBGO,Y,GAAeX,a","sourcesContent":["import _pt from \"prop-types\";\nimport React, { PureComponent } from 'react';\nexport const DEFAULT_PROPS = {\n  label: 'No internet. Check your connection.',\n  allowDismiss: false,\n  useAbsolutePosition: true\n};\n/**\n * @description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n * @image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.tsx\n * @notes: The component requires installing the '@react-native-community/netinfo' native library\n */\n// @ts-ignore\n\nclass FakeConnectionStatusBarForDocs extends PureComponent {\n  static propTypes = {\n    /**\n       * Text to show as the status\n       */\n    label: _pt.string,\n\n    /**\n       * Handler to get connection change events propagation\n       */\n    onConnectionChange: _pt.func,\n\n    /**\n       * Text to show as the status\n       */\n    allowDismiss: _pt.bool,\n\n    /**\n       * Use absolute position for the component\n       */\n    useAbsolutePosition: _pt.bool\n  };\n  // eslint-disable-line\n  static displayName = 'ConnectionStatusBar';\n  static defaultProps = DEFAULT_PROPS;\n\n  render() {\n    return null;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}