{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport BaseInput from \"../baseInput\";\nimport TextField from \"../textField\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\n\nvar MaskedInput = function (_BaseInput) {\n  _inherits(MaskedInput, _BaseInput);\n\n  var _super = _createSuper(MaskedInput);\n\n  function MaskedInput() {\n    _classCallCheck(this, MaskedInput);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MaskedInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', function () {\n        if (_.invoke(_this, 'isFocused')) {\n          _.invoke(_this, 'blur');\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardDidHideListener.remove();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.setState({\n        value: ''\n      });\n      this.input.clear();\n    }\n  }, {\n    key: \"renderMaskedText\",\n    value: function renderMaskedText() {\n      var renderMaskedText = this.props.renderMaskedText;\n      var value = this.state.value;\n\n      if (_.isFunction(renderMaskedText)) {\n        return renderMaskedText(value);\n      }\n\n      return React.createElement(Text, null, value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var containerStyle = this.props.containerStyle;\n      var TextInputProps = TextField.extractOwnProps(this.props, ['containerStyle', 'style']);\n      return React.createElement(TouchableOpacity, {\n        style: containerStyle,\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return _this2.input.focus();\n        }\n      }, React.createElement(TextField, _extends({}, this.props, {\n        ref: function ref(r) {\n          return _this2.input = r;\n        },\n        containerStyle: styles.hiddenInputContainer,\n        style: styles.hiddenInput,\n        enableErrors: false,\n        hideUnderline: true,\n        placeholder: \"\"\n      }, TextInputProps, {\n        caretHidden: true,\n        multiline: false,\n        onChangeText: this.onChangeText\n      })), React.createElement(View, {\n        style: styles.maskedInputWrapper\n      }, this.renderMaskedText()));\n    }\n  }]);\n\n  return MaskedInput;\n}(BaseInput);\n\nMaskedInput.displayName = 'MaskedInput';\nMaskedInput.propTypes = _objectSpread(_objectSpread({}, TextField.propTypes), {}, {\n  renderMaskedText: PropTypes.elementType.isRequired,\n  containerStyle: ViewPropTypes.style\n});\nexport { MaskedInput as default };\nvar styles = StyleSheet.create({\n  hiddenInputContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1\n  }),\n  hiddenInput: {\n    color: 'transparent',\n    backgroundColor: 'transparent',\n    height: undefined\n  },\n  maskedInputWrapper: {\n    zIndex: 0\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/maskedInput/index.js"],"names":["_","PropTypes","React","ViewPropTypes","BaseInput","TextField","View","Text","TouchableOpacity","MaskedInput","keyboardDidHideListener","Keyboard","addListener","invoke","remove","setState","value","input","clear","renderMaskedText","props","state","isFunction","containerStyle","TextInputProps","extractOwnProps","focus","r","styles","hiddenInputContainer","hiddenInput","onChangeText","maskedInputWrapper","displayName","propTypes","elementType","isRequired","style","StyleSheet","create","absoluteFillObject","zIndex","color","backgroundColor","height","undefined"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, ViewPropTypes, Keyboard} from 'react-native';\nimport BaseInput from '../baseInput';\nimport TextField from '../textField';\nimport View from '../view';\nimport Text from '../text';\nimport TouchableOpacity from '../touchableOpacity';\n\n/**\n * @description: Mask Input to create custom looking inputs with custom formats\n * @gif: https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.js\n */\nexport default class MaskedInput extends BaseInput {\n  static displayName = 'MaskedInput';\n  static propTypes = {\n    ...TextField.propTypes,\n    /**\n     * callback for rendering the custom input out of the value returns from the actual input\n     */\n    renderMaskedText: PropTypes.elementType.isRequired,\n    /**\n     * container style for the masked input container\n     */\n    containerStyle: ViewPropTypes.style\n  };\n\n  componentDidMount() {\n    this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () => {\n      if (_.invoke(this, 'isFocused')) {\n        _.invoke(this, 'blur');\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.keyboardDidHideListener.remove();\n  }\n\n  clear() {\n    this.setState({value: ''});\n    this.input.clear();\n  }\n\n  renderMaskedText() {\n    const {renderMaskedText} = this.props;\n    const {value} = this.state;\n\n    if (_.isFunction(renderMaskedText)) {\n      return renderMaskedText(value);\n    }\n    return <Text>{value}</Text>;\n  }\n\n  render() {\n    const {containerStyle} = this.props;\n    const TextInputProps = TextField.extractOwnProps(this.props, ['containerStyle', 'style']);\n\n    return (\n      <TouchableOpacity style={containerStyle} activeOpacity={1} onPress={() => this.input.focus()}>\n        <TextField\n          {...this.props}\n          ref={r => (this.input = r)}\n          containerStyle={styles.hiddenInputContainer}\n          style={styles.hiddenInput}\n          enableErrors={false}\n          hideUnderline\n          placeholder=\"\"\n          {...TextInputProps}\n          caretHidden\n          multiline={false}\n          onChangeText={this.onChangeText}\n        />\n        <View style={styles.maskedInputWrapper}>{this.renderMaskedText()}</View>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  hiddenInputContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1\n  },\n  hiddenInput: {\n    color: 'transparent',\n    backgroundColor: 'transparent',\n    height: undefined\n  },\n  maskedInputWrapper: {\n    zIndex: 0\n  }\n});\n"]},"metadata":{},"sourceType":"module"}