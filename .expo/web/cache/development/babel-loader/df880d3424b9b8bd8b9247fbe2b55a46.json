{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"selectedIcon\", \"label\", \"testID\", \"style\", \"containerStyle\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors, Spacings } from \"../../style\";\nimport Assets from \"../../assets\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport View from \"../view\";\nvar DEFAULT_SIZE = 24;\nvar DEFAULT_COLOR = Colors.primary;\nvar DEFAULT_ICON_COLOR = Colors.white;\nvar DEFAULT_DISABLED_COLOR = Colors.grey50;\nvar DEFAULT_BORDER_WIDTH = 2;\nvar DEFAULT_BORDER_RADIUS = 8;\n\nvar Checkbox = function (_Component) {\n  _inherits(Checkbox, _Component);\n\n  var _super = _createSuper(Checkbox);\n\n  function Checkbox(props) {\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    _this = _super.call(this, props);\n\n    _this.onPress = function () {\n      var disabled = _this.props.disabled;\n\n      if (!disabled) {\n        _this.props.onValueChange == null ? void 0 : _this.props.onValueChange(!_this.props.value);\n      }\n    };\n\n    _this.getColor = function () {\n      return _this.props.disabled ? DEFAULT_DISABLED_COLOR : _this.props.color || DEFAULT_COLOR;\n    };\n\n    _this.getBackgroundColor = function () {\n      return _this.props.outline ? 'transparent' : _this.getColor();\n    };\n\n    _this.getTintColor = function () {\n      var _this$props = _this.props,\n          outline = _this$props.outline,\n          disabled = _this$props.disabled,\n          iconColor = _this$props.iconColor;\n\n      if (outline) {\n        if (disabled) {\n          return DEFAULT_DISABLED_COLOR;\n        } else {\n          return iconColor || DEFAULT_COLOR;\n        }\n      } else if (disabled) {\n        return Colors.white;\n      } else {\n        return iconColor || Colors.white;\n      }\n    };\n\n    _this.state = {\n      isChecked: new Animated.Value(_this.props.value ? 1 : 0)\n    };\n    _this.styles = createStyles(props);\n    _this.animationStyle = {\n      opacity: _this.state.isChecked,\n      transform: [{\n        scaleX: _this.state.isChecked\n      }, {\n        scaleY: _this.state.isChecked\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var value = this.props.value;\n\n      if (prevProps.value !== value) {\n        this.animateCheckbox(value);\n      }\n    }\n  }, {\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var _this$props2 = this.props,\n          accessibilityLabel = _this$props2.accessibilityLabel,\n          disabled = _this$props2.disabled,\n          value = _this$props2.value;\n      var checkedState = value ? 'checked' : 'unchecked';\n      return {\n        accessible: true,\n        accessibilityLabel: accessibilityLabel ? accessibilityLabel + \" \" + checkedState : \"\" + checkedState,\n        accessibilityRole: 'checkbox',\n        accessibilityStates: disabled ? ['disabled'] : undefined\n      };\n    }\n  }, {\n    key: \"animateCheckbox\",\n    value: function animateCheckbox(value) {\n      var isChecked = this.state.isChecked;\n      Animated.timing(isChecked, {\n        duration: 170,\n        easing: Easing.bezier(0.77, 0.0, 0.175, 1.0),\n        toValue: Number(value),\n        useNativeDriver: true\n      }).start();\n    }\n  }, {\n    key: \"getBorderStyle\",\n    value: function getBorderStyle() {\n      var borderColor = {\n        borderColor: this.getColor()\n      };\n      var borderStyle = [this.styles.container, {\n        borderWidth: DEFAULT_BORDER_WIDTH\n      }, borderColor];\n      return borderStyle;\n    }\n  }, {\n    key: \"renderCheckbox\",\n    value: function renderCheckbox() {\n      var _this$props3 = this.props,\n          selectedIcon = _this$props3.selectedIcon,\n          label = _this$props3.label,\n          testID = _this$props3.testID,\n          style = _this$props3.style,\n          containerStyle = _this$props3.containerStyle,\n          others = _objectWithoutProperties(_this$props3, _excluded);\n\n      return React.createElement(TouchableOpacity, _extends({}, this.getAccessibilityProps(), {\n        activeOpacity: 1,\n        testID: testID\n      }, others, {\n        style: [this.getBorderStyle(), style, !label && containerStyle],\n        onPress: this.onPress\n      }), React.createElement(Animated.View, {\n        style: [this.styles.container, {\n          opacity: this.animationStyle.opacity\n        }, {\n          backgroundColor: this.getBackgroundColor()\n        }]\n      }, React.createElement(Animated.Image, {\n        style: [this.styles.selectedIcon, {\n          transform: this.animationStyle.transform\n        }, {\n          tintColor: this.getTintColor()\n        }],\n        source: selectedIcon || Assets.icons.checkSmall,\n        testID: testID + \".selected\"\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          label = _this$props4.label,\n          labelStyle = _this$props4.labelStyle,\n          containerStyle = _this$props4.containerStyle,\n          labelProps = _this$props4.labelProps;\n      return label ? React.createElement(View, {\n        row: true,\n        centerV: true,\n        style: [containerStyle]\n      }, this.renderCheckbox(), React.createElement(Text, _extends({\n        style: [this.styles.checkboxLabel, labelStyle]\n      }, labelProps, {\n        onPress: this.onPress\n      }), label)) : this.renderCheckbox();\n    }\n  }]);\n\n  return Checkbox;\n}(Component);\n\nCheckbox.propTypes = {\n  value: _pt.bool,\n  onValueChange: _pt.func,\n  disabled: _pt.bool,\n  color: _pt.string,\n  outline: _pt.bool,\n  size: _pt.number,\n  borderRadius: _pt.number,\n  selectedIcon: _pt.number,\n  iconColor: _pt.string,\n  label: _pt.string\n};\nCheckbox.displayName = 'Checkbox';\n\nfunction createStyles(props) {\n  var _props$color = props.color,\n      color = _props$color === void 0 ? DEFAULT_COLOR : _props$color,\n      _props$iconColor = props.iconColor,\n      iconColor = _props$iconColor === void 0 ? DEFAULT_ICON_COLOR : _props$iconColor,\n      _props$size = props.size,\n      size = _props$size === void 0 ? DEFAULT_SIZE : _props$size,\n      _props$borderRadius = props.borderRadius,\n      borderRadius = _props$borderRadius === void 0 ? DEFAULT_BORDER_RADIUS : _props$borderRadius;\n  return StyleSheet.create({\n    container: {\n      width: size,\n      height: size,\n      borderRadius: borderRadius,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderColor: color\n    },\n    selectedIcon: {\n      tintColor: iconColor,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    checkboxLabel: {\n      marginLeft: Spacings.s3,\n      alignSelf: 'center'\n    }\n  });\n}\n\nexport default asBaseComponent(Checkbox);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/checkbox/index.js"],"names":["_pt","React","Component","Colors","Spacings","Assets","asBaseComponent","TouchableOpacity","Text","View","DEFAULT_SIZE","DEFAULT_COLOR","primary","DEFAULT_ICON_COLOR","white","DEFAULT_DISABLED_COLOR","grey50","DEFAULT_BORDER_WIDTH","DEFAULT_BORDER_RADIUS","Checkbox","props","onPress","disabled","onValueChange","value","getColor","color","getBackgroundColor","outline","getTintColor","iconColor","state","isChecked","Animated","Value","styles","createStyles","animationStyle","opacity","transform","scaleX","scaleY","prevProps","animateCheckbox","accessibilityLabel","checkedState","accessible","accessibilityRole","accessibilityStates","undefined","timing","duration","easing","Easing","bezier","toValue","Number","useNativeDriver","start","borderColor","borderStyle","container","borderWidth","selectedIcon","label","testID","style","containerStyle","others","getAccessibilityProps","getBorderStyle","backgroundColor","tintColor","icons","checkSmall","labelStyle","labelProps","renderCheckbox","checkboxLabel","propTypes","bool","func","string","size","number","borderRadius","displayName","StyleSheet","create","width","height","alignItems","justifyContent","marginLeft","s3","alignSelf"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,MAAT,EAAiBC,QAAjB;AAEA,OAAOC,MAAP;AACA,SAASC,eAAT;AACA,OAAOC,gBAAP;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,IAAMC,YAAY,GAAG,EAArB;AACA,IAAMC,aAAa,GAAGR,MAAM,CAACS,OAA7B;AACA,IAAMC,kBAAkB,GAAGV,MAAM,CAACW,KAAlC;AACA,IAAMC,sBAAsB,GAAGZ,MAAM,CAACa,MAAtC;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AACA,IAAMC,qBAAqB,GAAG,CAA9B;;IAQMC,Q;;;;;AAsDJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAqDnBC,OArDmB,GAqDT,YAAM;AACd,UACEC,QADF,GAEI,MAAKF,KAFT,CACEE,QADF;;AAIA,UAAI,CAACA,QAAL,EAAe;AACb,cAAKF,KAAL,CAAWG,aAAX,0BAAKH,KAAL,CAAWG,aAAX,CAA2B,CAAC,MAAKH,KAAL,CAAWI,KAAvC;AACD;AACF,KA7DkB;;AAAA,UA8DnBC,QA9DmB,GA8DR;AAAA,aAAM,MAAKL,KAAL,CAAWE,QAAX,GAAsBP,sBAAtB,GAA+C,MAAKK,KAAL,CAAWM,KAAX,IAAoBf,aAAzE;AAAA,KA9DQ;;AAAA,UA+DnBgB,kBA/DmB,GA+DE;AAAA,aAAM,MAAKP,KAAL,CAAWQ,OAAX,GAAqB,aAArB,GAAqC,MAAKH,QAAL,EAA3C;AAAA,KA/DF;;AAAA,UAgEnBI,YAhEmB,GAgEJ,YAAM;AACnB,wBAII,MAAKT,KAJT;AAAA,UACEQ,OADF,eACEA,OADF;AAAA,UAEEN,QAFF,eAEEA,QAFF;AAAA,UAGEQ,SAHF,eAGEA,SAHF;;AAMA,UAAIF,OAAJ,EAAa;AACX,YAAIN,QAAJ,EAAc;AACZ,iBAAOP,sBAAP;AACD,SAFD,MAEO;AACL,iBAAOe,SAAS,IAAInB,aAApB;AACD;AACF,OAND,MAMO,IAAIW,QAAJ,EAAc;AACnB,eAAOnB,MAAM,CAACW,KAAd;AACD,OAFM,MAEA;AACL,eAAOgB,SAAS,IAAI3B,MAAM,CAACW,KAA3B;AACD;AACF,KAlFkB;;AAEjB,UAAKiB,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,MAAKd,KAAL,CAAWI,KAAX,GAAmB,CAAnB,GAAuB,CAA1C;AADA,KAAb;AAGA,UAAKW,MAAL,GAAcC,YAAY,CAAChB,KAAD,CAA1B;AACA,UAAKiB,cAAL,GAAsB;AACpBC,MAAAA,OAAO,EAAE,MAAKP,KAAL,CAAWC,SADA;AAEpBO,MAAAA,SAAS,EAAE,CAAC;AACVC,QAAAA,MAAM,EAAE,MAAKT,KAAL,CAAWC;AADT,OAAD,EAER;AACDS,QAAAA,MAAM,EAAE,MAAKV,KAAL,CAAWC;AADlB,OAFQ;AAFS,KAAtB;AANiB;AAclB;;;;WAED,4BAAmBU,SAAnB,EAA8B;AAC5B,UACElB,KADF,GAEI,KAAKJ,KAFT,CACEI,KADF;;AAIA,UAAIkB,SAAS,CAAClB,KAAV,KAAoBA,KAAxB,EAA+B;AAC7B,aAAKmB,eAAL,CAAqBnB,KAArB;AACD;AACF;;;WAED,iCAAwB;AACtB,yBAII,KAAKJ,KAJT;AAAA,UACEwB,kBADF,gBACEA,kBADF;AAAA,UAEEtB,QAFF,gBAEEA,QAFF;AAAA,UAGEE,KAHF,gBAGEA,KAHF;AAKA,UAAMqB,YAAY,GAAGrB,KAAK,GAAG,SAAH,GAAe,WAAzC;AACA,aAAO;AACLsB,QAAAA,UAAU,EAAE,IADP;AAELF,QAAAA,kBAAkB,EAAEA,kBAAkB,GAAMA,kBAAN,SAA4BC,YAA5B,QAAgDA,YAFjF;AAGLE,QAAAA,iBAAiB,EAAE,UAHd;AAILC,QAAAA,mBAAmB,EAAE1B,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkB2B;AAJ1C,OAAP;AAMD;;;WAED,yBAAgBzB,KAAhB,EAAuB;AACrB,UACEQ,SADF,GAEI,KAAKD,KAFT,CACEC,SADF;AAGAC,MAAAA,QAAQ,CAACiB,MAAT,CAAgBlB,SAAhB,EAA2B;AACzBmB,QAAAA,QAAQ,EAAE,GADe;AAEzBC,QAAAA,MAAM,EAAEC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB,GAApB,EAAyB,KAAzB,EAAgC,GAAhC,CAFiB;AAGzBC,QAAAA,OAAO,EAAEC,MAAM,CAAChC,KAAD,CAHU;AAIzBiC,QAAAA,eAAe,EAAE;AAJQ,OAA3B,EAKGC,KALH;AAMD;;;WAiCD,0BAAiB;AACf,UAAMC,WAAW,GAAG;AAClBA,QAAAA,WAAW,EAAE,KAAKlC,QAAL;AADK,OAApB;AAGA,UAAMmC,WAAW,GAAG,CAAC,KAAKzB,MAAL,CAAY0B,SAAb,EAAwB;AAC1CC,QAAAA,WAAW,EAAE7C;AAD6B,OAAxB,EAEjB0C,WAFiB,CAApB;AAGA,aAAOC,WAAP;AACD;;;WAED,0BAAiB;AACf,yBAOI,KAAKxC,KAPT;AAAA,UACE2C,YADF,gBACEA,YADF;AAAA,UAEEC,KAFF,gBAEEA,KAFF;AAAA,UAGEC,MAHF,gBAGEA,MAHF;AAAA,UAIEC,KAJF,gBAIEA,KAJF;AAAA,UAKEC,cALF,gBAKEA,cALF;AAAA,UAMKC,MANL;;AAQA,aACE,oBAAC,gBAAD,eAAsB,KAAKC,qBAAL,EAAtB;AAAoD,QAAA,aAAa,EAAE,CAAnE;AAAsE,QAAA,MAAM,EAAEJ;AAA9E,SAA0FG,MAA1F;AAAkG,QAAA,KAAK,EAAE,CAAC,KAAKE,cAAL,EAAD,EAAwBJ,KAAxB,EAA+B,CAACF,KAAD,IAAUG,cAAzC,CAAzG;AAAmK,QAAA,OAAO,EAAE,KAAK9C;AAAjL,UACG,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAAC,KAAKc,MAAL,CAAY0B,SAAb,EAAwB;AAC7CvB,UAAAA,OAAO,EAAE,KAAKD,cAAL,CAAoBC;AADgB,SAAxB,EAEpB;AACDiC,UAAAA,eAAe,EAAE,KAAK5C,kBAAL;AADhB,SAFoB;AAAtB,SAKG,oBAAC,QAAD,CAAU,KAAV;AAAgB,QAAA,KAAK,EAAE,CAAC,KAAKQ,MAAL,CAAY4B,YAAb,EAA2B;AAClDxB,UAAAA,SAAS,EAAE,KAAKF,cAAL,CAAoBE;AADmB,SAA3B,EAEtB;AACDiC,UAAAA,SAAS,EAAE,KAAK3C,YAAL;AADV,SAFsB,CAAvB;AAIE,QAAA,MAAM,EAAEkC,YAAY,IAAI1D,MAAM,CAACoE,KAAP,CAAaC,UAJvC;AAImD,QAAA,MAAM,EAAKT,MAAL;AAJzD,QALH,CADH,CADF;AAeD;;;WAED,kBAAS;AACP,yBAKI,KAAK7C,KALT;AAAA,UACE4C,KADF,gBACEA,KADF;AAAA,UAEEW,UAFF,gBAEEA,UAFF;AAAA,UAGER,cAHF,gBAGEA,cAHF;AAAA,UAIES,UAJF,gBAIEA,UAJF;AAMA,aAAOZ,KAAK,GAAG,oBAAC,IAAD;AAAM,QAAA,GAAG,MAAT;AAAU,QAAA,OAAO,MAAjB;AAAkB,QAAA,KAAK,EAAE,CAACG,cAAD;AAAzB,SACV,KAAKU,cAAL,EADU,EAEX,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC,KAAK1C,MAAL,CAAY2C,aAAb,EAA4BH,UAA5B;AAAb,SAA0DC,UAA1D;AAAsE,QAAA,OAAO,EAAE,KAAKvD;AAApF,UACG2C,KADH,CAFW,CAAH,GAKA,KAAKa,cAAL,EALZ;AAMD;;;;EA3LoB3E,S;;AAAjBiB,Q,CACG4D,S,GAAY;AAIjBvD,EAAAA,KAAK,EAAExB,GAAG,CAACgF,IAJM;AASjBzD,EAAAA,aAAa,EAAEvB,GAAG,CAACiF,IATF;AAcjB3D,EAAAA,QAAQ,EAAEtB,GAAG,CAACgF,IAdG;AAmBjBtD,EAAAA,KAAK,EAAE1B,GAAG,CAACkF,MAnBM;AAwBjBtD,EAAAA,OAAO,EAAE5B,GAAG,CAACgF,IAxBI;AA6BjBG,EAAAA,IAAI,EAAEnF,GAAG,CAACoF,MA7BO;AAkCjBC,EAAAA,YAAY,EAAErF,GAAG,CAACoF,MAlCD;AAuCjBrB,EAAAA,YAAY,EAAE/D,GAAG,CAACoF,MAvCD;AA4CjBtD,EAAAA,SAAS,EAAE9B,GAAG,CAACkF,MA5CE;AAiDjBlB,EAAAA,KAAK,EAAEhE,GAAG,CAACkF;AAjDM,C;AADf/D,Q,CAoDGmE,W,GAAc,U;;AA2IvB,SAASlD,YAAT,CAAsBhB,KAAtB,EAA6B;AAC3B,qBAKIA,KALJ,CACEM,KADF;AAAA,MACEA,KADF,6BACUf,aADV;AAAA,yBAKIS,KALJ,CAEEU,SAFF;AAAA,MAEEA,SAFF,iCAEcjB,kBAFd;AAAA,oBAKIO,KALJ,CAGE+D,IAHF;AAAA,MAGEA,IAHF,4BAGSzE,YAHT;AAAA,4BAKIU,KALJ,CAIEiE,YAJF;AAAA,MAIEA,YAJF,oCAIiBnE,qBAJjB;AAMA,SAAOqE,UAAU,CAACC,MAAX,CAAkB;AACvB3B,IAAAA,SAAS,EAAE;AACT4B,MAAAA,KAAK,EAAEN,IADE;AAETO,MAAAA,MAAM,EAAEP,IAFC;AAGTE,MAAAA,YAAY,EAAZA,YAHS;AAITM,MAAAA,UAAU,EAAE,QAJH;AAKTC,MAAAA,cAAc,EAAE,QALP;AAMTjC,MAAAA,WAAW,EAAEjC;AANJ,KADY;AASvBqC,IAAAA,YAAY,EAAE;AACZS,MAAAA,SAAS,EAAE1C,SADC;AAEZ6D,MAAAA,UAAU,EAAE,QAFA;AAGZC,MAAAA,cAAc,EAAE;AAHJ,KATS;AAcvBd,IAAAA,aAAa,EAAE;AACbe,MAAAA,UAAU,EAAEzF,QAAQ,CAAC0F,EADR;AAEbC,MAAAA,SAAS,EAAE;AAFE;AAdQ,GAAlB,CAAP;AAmBD;;AAED,eAAezF,eAAe,CAACa,QAAD,CAA9B","sourcesContent":["import _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport { Animated, Easing, StyleSheet } from 'react-native';\nimport { Colors, Spacings } from \"../../style\"; //@ts-ignore\n\nimport Assets from \"../../assets\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Text from \"../text\";\nimport View from \"../view\";\nconst DEFAULT_SIZE = 24;\nconst DEFAULT_COLOR = Colors.primary;\nconst DEFAULT_ICON_COLOR = Colors.white;\nconst DEFAULT_DISABLED_COLOR = Colors.grey50;\nconst DEFAULT_BORDER_WIDTH = 2;\nconst DEFAULT_BORDER_RADIUS = 8;\n\n/**\n * @description: Checkbox component for toggling boolean value related to some context\n * @extends: TouchableOpacity\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CheckboxScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Checkbox/Checkbox.gif?raw=true\n */\nclass Checkbox extends Component {\n  static propTypes = {\n    /**\n       * The value of the Checkbox. If true the switch will be turned on. Default value is false.\n       */\n    value: _pt.bool,\n\n    /**\n       * Invoked with the new value when the value changes.\n       */\n    onValueChange: _pt.func,\n\n    /**\n       * Whether the checkbox should be disabled\n       */\n    disabled: _pt.bool,\n\n    /**\n       * The Checkbox color\n       */\n    color: _pt.string,\n\n    /**\n       * alternative Checkbox outline style\n       */\n    outline: _pt.bool,\n\n    /**\n       * The size of the checkbox. affect both width and height\n       */\n    size: _pt.number,\n\n    /**\n       * The Checkbox border radius\n       */\n    borderRadius: _pt.number,\n\n    /**\n       * The icon asset to use for the selected indication (accept only local assets)\n       */\n    selectedIcon: _pt.number,\n\n    /**\n       * The selected icon color\n       */\n    iconColor: _pt.string,\n\n    /**\n       * The label of the checkbox\n       */\n    label: _pt.string\n  };\n  static displayName = 'Checkbox';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: new Animated.Value(this.props.value ? 1 : 0)\n    };\n    this.styles = createStyles(props);\n    this.animationStyle = {\n      opacity: this.state.isChecked,\n      transform: [{\n        scaleX: this.state.isChecked\n      }, {\n        scaleY: this.state.isChecked\n      }]\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      value\n    } = this.props;\n\n    if (prevProps.value !== value) {\n      this.animateCheckbox(value);\n    }\n  }\n\n  getAccessibilityProps() {\n    const {\n      accessibilityLabel,\n      disabled,\n      value\n    } = this.props;\n    const checkedState = value ? 'checked' : 'unchecked';\n    return {\n      accessible: true,\n      accessibilityLabel: accessibilityLabel ? `${accessibilityLabel} ${checkedState}` : `${checkedState}`,\n      accessibilityRole: 'checkbox',\n      accessibilityStates: disabled ? ['disabled'] : undefined\n    };\n  }\n\n  animateCheckbox(value) {\n    const {\n      isChecked\n    } = this.state;\n    Animated.timing(isChecked, {\n      duration: 170,\n      easing: Easing.bezier(0.77, 0.0, 0.175, 1.0),\n      toValue: Number(value),\n      useNativeDriver: true\n    }).start();\n  }\n\n  onPress = () => {\n    const {\n      disabled\n    } = this.props;\n\n    if (!disabled) {\n      this.props.onValueChange?.(!this.props.value);\n    }\n  };\n  getColor = () => this.props.disabled ? DEFAULT_DISABLED_COLOR : this.props.color || DEFAULT_COLOR;\n  getBackgroundColor = () => this.props.outline ? 'transparent' : this.getColor();\n  getTintColor = () => {\n    const {\n      outline,\n      disabled,\n      iconColor\n    } = this.props;\n\n    if (outline) {\n      if (disabled) {\n        return DEFAULT_DISABLED_COLOR;\n      } else {\n        return iconColor || DEFAULT_COLOR;\n      }\n    } else if (disabled) {\n      return Colors.white;\n    } else {\n      return iconColor || Colors.white;\n    }\n  };\n\n  getBorderStyle() {\n    const borderColor = {\n      borderColor: this.getColor()\n    };\n    const borderStyle = [this.styles.container, {\n      borderWidth: DEFAULT_BORDER_WIDTH\n    }, borderColor];\n    return borderStyle;\n  }\n\n  renderCheckbox() {\n    const {\n      selectedIcon,\n      label,\n      testID,\n      style,\n      containerStyle,\n      ...others\n    } = this.props;\n    return (//@ts-ignore\n      <TouchableOpacity {...this.getAccessibilityProps()} activeOpacity={1} testID={testID} {...others} style={[this.getBorderStyle(), style, !label && containerStyle]} onPress={this.onPress}>\n        {<Animated.View style={[this.styles.container, {\n          opacity: this.animationStyle.opacity\n        }, {\n          backgroundColor: this.getBackgroundColor()\n        }]}>\n            <Animated.Image style={[this.styles.selectedIcon, {\n            transform: this.animationStyle.transform\n          }, {\n            tintColor: this.getTintColor()\n          }]} source={selectedIcon || Assets.icons.checkSmall} testID={`${testID}.selected`} />\n          </Animated.View>}\n      </TouchableOpacity>\n    );\n  }\n\n  render() {\n    const {\n      label,\n      labelStyle,\n      containerStyle,\n      labelProps\n    } = this.props;\n    return label ? <View row centerV style={[containerStyle]}>\n        {this.renderCheckbox()}\n        <Text style={[this.styles.checkboxLabel, labelStyle]} {...labelProps} onPress={this.onPress}>\n          {label}\n        </Text>\n      </View> : this.renderCheckbox();\n  }\n\n}\n\nfunction createStyles(props) {\n  const {\n    color = DEFAULT_COLOR,\n    iconColor = DEFAULT_ICON_COLOR,\n    size = DEFAULT_SIZE,\n    borderRadius = DEFAULT_BORDER_RADIUS\n  } = props;\n  return StyleSheet.create({\n    container: {\n      width: size,\n      height: size,\n      borderRadius,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderColor: color\n    },\n    selectedIcon: {\n      tintColor: iconColor,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    checkboxLabel: {\n      marginLeft: Spacings.s3,\n      alignSelf: 'center'\n    }\n  });\n}\n\nexport default asBaseComponent(Checkbox);"]},"metadata":{},"sourceType":"module"}