{"ast":null,"code":"import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { getRelevantValidationMessage } from \"./Presenter\";\n\nvar ValidationMessage = function ValidationMessage(_ref) {\n  var validationMessage = _ref.validationMessage,\n      enableErrors = _ref.enableErrors,\n      validationMessageStyle = _ref.validationMessageStyle,\n      retainSpace = _ref.retainSpace,\n      validate = _ref.validate;\n  var context = useContext(FieldContext);\n\n  if (!enableErrors || !retainSpace && context.isValid) {\n    return null;\n  }\n\n  var relevantValidationMessage = getRelevantValidationMessage(validationMessage, context.failingValidatorIndex);\n  var showValidationMessage = !context.isValid || !validate && !!validationMessage;\n  return React.createElement(Text, {\n    red30: true,\n    style: [styles.validationMessage, validationMessageStyle]\n  }, showValidationMessage ? relevantValidationMessage : '');\n};\n\nValidationMessage.propTypes = {\n  enableErrors: _pt.bool,\n  validationMessage: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  retainSpace: _pt.bool\n};\nvar styles = StyleSheet.create({\n  validationMessage: {\n    minHeight: 20\n  }\n});\nValidationMessage.displayName = 'Incubator.TextField';\nexport default ValidationMessage;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/incubator/TextField/ValidationMessage.js"],"names":["_pt","React","useContext","Text","FieldContext","getRelevantValidationMessage","ValidationMessage","validationMessage","enableErrors","validationMessageStyle","retainSpace","validate","context","isValid","relevantValidationMessage","failingValidatorIndex","showValidationMessage","styles","propTypes","bool","oneOfType","string","arrayOf","StyleSheet","create","minHeight","displayName"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,OAAOC,IAAP;AACA,OAAOC,YAAP;AACA,SAASC,4BAAT;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAMpB;AAAA,MALJC,iBAKI,QALJA,iBAKI;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,sBAGI,QAHJA,sBAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,MADJC,QACI,QADJA,QACI;AACJ,MAAMC,OAAO,GAAGV,UAAU,CAACE,YAAD,CAA1B;;AAEA,MAAI,CAACI,YAAD,IAAiB,CAACE,WAAD,IAAgBE,OAAO,CAACC,OAA7C,EAAsD;AACpD,WAAO,IAAP;AACD;;AAED,MAAMC,yBAAyB,GAAGT,4BAA4B,CAACE,iBAAD,EAAoBK,OAAO,CAACG,qBAA5B,CAA9D;AACA,MAAMC,qBAAqB,GAAG,CAACJ,OAAO,CAACC,OAAT,IAAoB,CAACF,QAAD,IAAa,CAAC,CAACJ,iBAAjE;AACA,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,KAAK,EAAE,CAACU,MAAM,CAACV,iBAAR,EAA2BE,sBAA3B;AAAnB,KACFO,qBAAqB,GAAGF,yBAAH,GAA+B,EADlD,CAAP;AAGD,CAlBD;;AAoBAR,iBAAiB,CAACY,SAAlB,GAA8B;AAI5BV,EAAAA,YAAY,EAAER,GAAG,CAACmB,IAJU;AAS5BZ,EAAAA,iBAAiB,EAAEP,GAAG,CAACoB,SAAJ,CAAc,CAACpB,GAAG,CAACqB,MAAL,EAAarB,GAAG,CAACsB,OAAJ,CAAYtB,GAAG,CAACqB,MAAhB,CAAb,CAAd,CATS;AAU5BX,EAAAA,WAAW,EAAEV,GAAG,CAACmB;AAVW,CAA9B;AAYA,IAAMF,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BjB,EAAAA,iBAAiB,EAAE;AACjBkB,IAAAA,SAAS,EAAE;AADM;AADY,CAAlB,CAAf;AAKAnB,iBAAiB,CAACoB,WAAlB,GAAgC,qBAAhC;AACA,eAAepB,iBAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { getRelevantValidationMessage } from \"./Presenter\";\n\nconst ValidationMessage = ({\n  validationMessage,\n  enableErrors,\n  validationMessageStyle,\n  retainSpace,\n  validate\n}) => {\n  const context = useContext(FieldContext);\n\n  if (!enableErrors || !retainSpace && context.isValid) {\n    return null;\n  }\n\n  const relevantValidationMessage = getRelevantValidationMessage(validationMessage, context.failingValidatorIndex);\n  const showValidationMessage = !context.isValid || !validate && !!validationMessage;\n  return <Text red30 style={[styles.validationMessage, validationMessageStyle]}>\n      {showValidationMessage ? relevantValidationMessage : ''}\n    </Text>;\n};\n\nValidationMessage.propTypes = {\n  /**\n     * Should support showing validation error message\n     */\n  enableErrors: _pt.bool,\n\n  /**\n     * The validation message to display when field is invalid (depends on validate)\n     */\n  validationMessage: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  retainSpace: _pt.bool\n};\nconst styles = StyleSheet.create({\n  validationMessage: {\n    minHeight: 20\n  }\n});\nValidationMessage.displayName = 'Incubator.TextField';\nexport default ValidationMessage;"]},"metadata":{},"sourceType":"module"}