{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nexport var GestureDirections;\n\n(function (GestureDirections) {\n  GestureDirections[\"UP\"] = \"up\";\n  GestureDirections[\"DOWN\"] = \"down\";\n})(GestureDirections || (GestureDirections = {}));\n\nvar SWIPE_VELOCITY = 1.8;\nvar SPEED = 20;\nvar BOUNCINESS = 6;\n\nvar PanGestureView = function (_Component) {\n  _inherits(PanGestureView, _Component);\n\n  var _super = _createSuper(PanGestureView);\n\n  function PanGestureView(props) {\n    var _this;\n\n    _classCallCheck(this, PanGestureView);\n\n    _this = _super.call(this, props);\n\n    _this.handleMoveShouldSetPanResponder = function (_e, gestureState) {\n      var dy = gestureState.dy;\n      return dy > 5 || dy < -5;\n    };\n\n    _this.handlePanResponderGrant = function () {\n      _this.swipe = false;\n    };\n\n    _this.handlePanResponderMove = function (_e, gestureState) {\n      var direction = _this.props.direction;\n      var newValue = 0;\n      var up = direction === GestureDirections.UP;\n      var panDeltaY = gestureState.dy;\n      var panVelocityY = gestureState.vy;\n\n      if (Math.abs(panVelocityY) >= SWIPE_VELOCITY) {\n        if (up && panVelocityY < 0 || !up && panVelocityY > 0) {\n          _this.swipe = true;\n        }\n      } else if (up && panDeltaY < 0 || !up && panDeltaY > 0) {\n        newValue = panDeltaY;\n\n        _this.animateDeltaY(Math.round(newValue));\n      }\n    };\n\n    _this.handlePanResponderEnd = function () {\n      if (!_this.swipe) {\n        var direction = _this.props.direction;\n        var up = direction === GestureDirections.UP;\n        var deltaY = _this.state.deltaY;\n        var threshold = _this.layout.height / 2;\n        var endValue = Math.round(deltaY._value);\n\n        if (up && endValue <= -threshold || !up && endValue >= threshold) {\n          _this.animateDismiss();\n        } else {\n          _this.animateDeltaY(0);\n        }\n      } else {\n        _this.animateDismiss();\n      }\n    };\n\n    _this.onAnimatedFinished = function (_ref) {\n      var finished = _ref.finished;\n\n      if (finished) {\n        _this.onDismiss();\n      }\n    };\n\n    _this.onDismiss = function () {\n      _this.initPositions();\n\n      _this.props.onDismiss == null ? void 0 : _this.props.onDismiss();\n    };\n\n    _this.onLayout = function (event) {\n      _this.layout = event.nativeEvent.layout;\n    };\n\n    _this.state = {\n      deltaY: new Animated.Value(0)\n    };\n    _this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder,\n      onPanResponderGrant: _this.handlePanResponderGrant,\n      onPanResponderMove: _this.handlePanResponderMove,\n      onPanResponderRelease: _this.handlePanResponderEnd,\n      onPanResponderTerminate: _this.handlePanResponderEnd\n    });\n    return _this;\n  }\n\n  _createClass(PanGestureView, [{\n    key: \"animateDeltaY\",\n    value: function animateDeltaY(toValue) {\n      var deltaY = this.state.deltaY;\n      Animated.spring(deltaY, {\n        toValue: toValue,\n        useNativeDriver: true,\n        speed: SPEED,\n        bounciness: BOUNCINESS\n      }).start();\n    }\n  }, {\n    key: \"animateDismiss\",\n    value: function animateDismiss() {\n      var direction = this.props.direction;\n      var up = direction === GestureDirections.UP;\n      var deltaY = this.state.deltaY;\n      var newValue = up ? -this.layout.height - Constants.statusBarHeight : deltaY._value + Constants.screenHeight;\n      Animated.timing(deltaY, {\n        toValue: Math.round(newValue),\n        useNativeDriver: true,\n        duration: 280\n      }).start(this.onAnimatedFinished);\n    }\n  }, {\n    key: \"initPositions\",\n    value: function initPositions() {\n      this.setState({\n        deltaY: new Animated.Value(0)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = this.props.style;\n      var deltaY = this.state.deltaY;\n      return React.createElement(Animated.View, _extends({\n        style: [style, {\n          transform: [{\n            translateY: deltaY\n          }]\n        }]\n      }, this.panResponder.panHandlers, {\n        onLayout: this.onLayout\n      }), this.props.children);\n    }\n  }]);\n\n  return PanGestureView;\n}(Component);\n\nPanGestureView.propTypes = {\n  onDismiss: _pt.func,\n  direction: _pt.oneOf([\"up\", \"down\"])\n};\nPanGestureView.displayName = 'PanGestureView';\nPanGestureView.defaultProps = {\n  direction: GestureDirections.DOWN\n};\nPanGestureView.directions = GestureDirections;\nexport default asBaseComponent(PanGestureView);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/panningViews/panGestureView.js"],"names":["_pt","React","Component","Constants","asBaseComponent","GestureDirections","SWIPE_VELOCITY","SPEED","BOUNCINESS","PanGestureView","props","handleMoveShouldSetPanResponder","_e","gestureState","dy","handlePanResponderGrant","swipe","handlePanResponderMove","direction","newValue","up","UP","panDeltaY","panVelocityY","vy","Math","abs","animateDeltaY","round","handlePanResponderEnd","deltaY","state","threshold","layout","height","endValue","_value","animateDismiss","onAnimatedFinished","finished","onDismiss","initPositions","onLayout","event","nativeEvent","Animated","Value","panResponder","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","toValue","spring","useNativeDriver","speed","bounciness","start","statusBarHeight","screenHeight","timing","duration","setState","style","transform","translateY","panHandlers","children","propTypes","func","oneOf","displayName","defaultProps","DOWN","directions"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport { PanResponder, Animated } from 'react-native';\nimport { Constants } from \"../../helpers\";\nimport { asBaseComponent } from \"../../commons/new\";\nexport let GestureDirections;\n\n(function (GestureDirections) {\n  GestureDirections[\"UP\"] = \"up\";\n  GestureDirections[\"DOWN\"] = \"down\";\n})(GestureDirections || (GestureDirections = {}));\n\nconst SWIPE_VELOCITY = 1.8;\nconst SPEED = 20;\nconst BOUNCINESS = 6;\n\n/**\n * @description: PanGestureView component for drag and swipe gestures (supports only vertical gestures at the moment)\n */\nclass PanGestureView extends Component {\n  static propTypes = {\n    /**\n       * onDismiss callback\n       */\n    onDismiss: _pt.func,\n\n    /**\n       * The direction of the allowed pan (default is down)\n       */\n    direction: _pt.oneOf([\"up\", \"down\"])\n  };\n  static displayName = 'PanGestureView';\n  static defaultProps = {\n    direction: GestureDirections.DOWN\n  };\n  static directions = GestureDirections;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      deltaY: new Animated.Value(0)\n    };\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this.handlePanResponderGrant,\n      onPanResponderMove: this.handlePanResponderMove,\n      onPanResponderRelease: this.handlePanResponderEnd,\n      onPanResponderTerminate: this.handlePanResponderEnd\n    });\n  }\n\n  handleMoveShouldSetPanResponder = (_e, gestureState) => {\n    // return true if user is swiping, return false if it's a single click\n    const {\n      dy\n    } = gestureState;\n    return dy > 5 || dy < -5;\n  };\n  handlePanResponderGrant = () => {\n    this.swipe = false;\n  };\n  handlePanResponderMove = (_e, gestureState) => {\n    const {\n      direction\n    } = this.props;\n    let newValue = 0; // VERTICAL\n\n    const up = direction === GestureDirections.UP;\n    const panDeltaY = gestureState.dy;\n    const panVelocityY = gestureState.vy;\n\n    if (Math.abs(panVelocityY) >= SWIPE_VELOCITY) {\n      if (up && panVelocityY < 0 || !up && panVelocityY > 0) {\n        // Swipe\n        this.swipe = true;\n      }\n    } else if (up && panDeltaY < 0 || !up && panDeltaY > 0) {\n      // Drag\n      newValue = panDeltaY;\n      this.animateDeltaY(Math.round(newValue));\n    }\n  };\n  handlePanResponderEnd = () => {\n    if (!this.swipe) {\n      const {\n        direction\n      } = this.props; // VERTICAL\n\n      const up = direction === GestureDirections.UP;\n      const {\n        deltaY\n      } = this.state; // @ts-ignore\n\n      const threshold = this.layout.height / 2; // @ts-ignore\n\n      const endValue = Math.round(deltaY._value);\n\n      if (up && endValue <= -threshold || !up && endValue >= threshold) {\n        this.animateDismiss();\n      } else {\n        // back to initial position\n        this.animateDeltaY(0);\n      }\n    } else {\n      this.animateDismiss();\n    }\n  };\n\n  animateDeltaY(toValue) {\n    const {\n      deltaY\n    } = this.state;\n    Animated.spring(deltaY, {\n      toValue,\n      useNativeDriver: true,\n      speed: SPEED,\n      bounciness: BOUNCINESS\n    }).start();\n  }\n\n  animateDismiss() {\n    const {\n      direction\n    } = this.props; // VERTICAL\n\n    const up = direction === GestureDirections.UP;\n    const {\n      deltaY\n    } = this.state; // @ts-ignore\n\n    const newValue = up ? -this.layout.height - Constants.statusBarHeight : deltaY._value + Constants.screenHeight;\n    Animated.timing(deltaY, {\n      toValue: Math.round(newValue),\n      useNativeDriver: true,\n      duration: 280\n    }).start(this.onAnimatedFinished);\n  }\n\n  onAnimatedFinished = ({\n    finished\n  }) => {\n    if (finished) {\n      this.onDismiss();\n    }\n  };\n  onDismiss = () => {\n    this.initPositions();\n    this.props.onDismiss?.();\n  };\n\n  initPositions() {\n    this.setState({\n      deltaY: new Animated.Value(0)\n    });\n  }\n\n  onLayout = event => {\n    this.layout = event.nativeEvent.layout;\n  };\n\n  render() {\n    const {\n      style\n    } = this.props; // VERTICAL\n\n    const {\n      deltaY\n    } = this.state;\n    return <Animated.View style={[style, {\n      transform: [{\n        translateY: deltaY\n      }]\n    }]} {...this.panResponder.panHandlers} onLayout={this.onLayout}>\n        {this.props.children}\n      </Animated.View>;\n  }\n\n}\n\nexport default asBaseComponent(PanGestureView);"]},"metadata":{},"sourceType":"module"}