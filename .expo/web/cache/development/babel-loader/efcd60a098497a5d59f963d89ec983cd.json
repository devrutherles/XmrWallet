{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"hint\", \"color\", \"forwardedRef\", \"formatter\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport { Constants } from \"../../helpers\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nvar DEFAULT_INPUT_COLOR = {\n  default: Colors.grey10,\n  disabled: Colors.grey40\n};\n\nvar Input = function Input(_ref) {\n  var style = _ref.style,\n      hint = _ref.hint,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? DEFAULT_INPUT_COLOR : _ref$color,\n      forwardedRef = _ref.forwardedRef,\n      formatter = _ref.formatter,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var inputRef = useImperativeInputHandle(forwardedRef);\n  var context = useContext(FieldContext);\n  var placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  var inputColor = getColorByState(color, context);\n  var placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  var value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  return React.createElement(TextInput, _extends({\n    style: [styles.input, !!inputColor && {\n      color: inputColor\n    }, style]\n  }, props, {\n    value: value,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    accessibilityState: {\n      disabled: props.editable === false\n    }\n  }));\n};\n\nInput.propTypes = {\n  hint: _pt.string,\n  formatter: _pt.func\n};\nvar styles = StyleSheet.create({\n  input: _objectSpread({\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    paddingTop: 0,\n    paddingBottom: 0\n  }, Platform.select({\n    android: {\n      padding: 0,\n      textAlignVertical: 'center'\n    }\n  }))\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/incubator/TextField/Input.js"],"names":["_pt","React","useContext","getColorByState","Colors","Constants","FieldContext","useImperativeInputHandle","DEFAULT_INPUT_COLOR","default","grey10","disabled","grey40","Input","style","hint","color","forwardedRef","formatter","props","inputRef","context","placeholder","isFocused","inputColor","placeholderTextColor","value","styles","input","editable","propTypes","string","func","StyleSheet","create","textAlign","isRTL","paddingTop","paddingBottom","Platform","select","android","padding","textAlignVertical","displayName"],"mappings":";;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;AAEA,SAASC,eAAT;AACA,SAASC,MAAT;AACA,SAASC,SAAT;AACA,OAAOC,YAAP;AACA,OAAOC,wBAAP;AACA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,OAAO,EAAEL,MAAM,CAACM,MADU;AAE1BC,EAAAA,QAAQ,EAAEP,MAAM,CAACQ;AAFS,CAA5B;;AAKA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOR;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,wBAJJC,KAII;AAAA,MAJJA,KAII,2BAJIR,mBAIJ;AAAA,MAHJS,YAGI,QAHJA,YAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,QAAQ,GAAGb,wBAAwB,CAACU,YAAD,CAAzC;AACA,MAAMI,OAAO,GAAGnB,UAAU,CAACI,YAAD,CAA1B;AACA,MAAMgB,WAAW,GAAG,CAACD,OAAO,CAACE,SAAT,GAAqBJ,KAAK,CAACG,WAA3B,GAAyCP,IAAI,IAAII,KAAK,CAACG,WAA3E;AACA,MAAME,UAAU,GAAGrB,eAAe,CAACa,KAAD,EAAQK,OAAR,CAAlC;AACA,MAAMI,oBAAoB,GAAGtB,eAAe,CAACgB,KAAK,CAACM,oBAAP,EAA6BJ,OAA7B,CAA5C;AACA,MAAMK,KAAK,GAAGR,SAAS,IAAI,CAACG,OAAO,CAACE,SAAtB,GAAkCL,SAAS,CAACC,KAAK,CAACO,KAAP,CAA3C,GAA2DP,KAAK,CAACO,KAA/E;AACA,SAAO,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,KAAR,EAAe,CAAC,CAACJ,UAAF,IAAgB;AACtDR,MAAAA,KAAK,EAAEQ;AAD+C,KAA/B,EAEtBV,KAFsB;AAAlB,KAEQK,KAFR;AAEe,IAAA,KAAK,EAAEO,KAFtB;AAE6B,IAAA,WAAW,EAAEJ,WAF1C;AAEuD,IAAA,oBAAoB,EAAEG,oBAF7E;AAGP,IAAA,GAAG,EAAEL,QAHE;AAGQ,IAAA,qBAAqB,EAAC,aAH9B;AAG4C,IAAA,kBAAkB,EAAE;AACrET,MAAAA,QAAQ,EAAEQ,KAAK,CAACU,QAAN,KAAmB;AADwC;AAHhE,KAAP;AAMD,CApBD;;AAsBAhB,KAAK,CAACiB,SAAN,GAAkB;AAIhBf,EAAAA,IAAI,EAAEf,GAAG,CAAC+B,MAJM;AAShBb,EAAAA,SAAS,EAAElB,GAAG,CAACgC;AATC,CAAlB;AAWA,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,KAAK;AACHO,IAAAA,SAAS,EAAE9B,SAAS,CAAC+B,KAAV,GAAkB,OAAlB,GAA4B,MADpC;AAGHC,IAAAA,UAAU,EAAE,CAHT;AAIHC,IAAAA,aAAa,EAAE;AAJZ,KAKAC,QAAQ,CAACC,MAAT,CAAgB;AAEjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,CADF;AAEPC,MAAAA,iBAAiB,EAAE;AAFZ;AAFQ,GAAhB,CALA;AAD0B,CAAlB,CAAf;AAeA9B,KAAK,CAAC+B,WAAN,GAAoB,qBAApB;AACA,eAAe/B,KAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport { TextInput, StyleSheet, Platform } from 'react-native';\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport { Constants } from \"../../helpers\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nconst DEFAULT_INPUT_COLOR = {\n  default: Colors.grey10,\n  disabled: Colors.grey40\n};\n\nconst Input = ({\n  style,\n  hint,\n  color = DEFAULT_INPUT_COLOR,\n  forwardedRef,\n  formatter,\n  ...props\n}) => {\n  const inputRef = useImperativeInputHandle(forwardedRef);\n  const context = useContext(FieldContext);\n  const placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  const inputColor = getColorByState(color, context);\n  const placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  const value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  return <TextInput style={[styles.input, !!inputColor && {\n    color: inputColor\n  }, style]} {...props} value={value} placeholder={placeholder} placeholderTextColor={placeholderTextColor} // @ts-expect-error\n  ref={inputRef} underlineColorAndroid=\"transparent\" accessibilityState={{\n    disabled: props.editable === false\n  }} />;\n};\n\nInput.propTypes = {\n  /**\n     * A hint text to display when focusing the field\n     */\n  hint: _pt.string,\n\n  /**\n     * Custom formatter for the input value (used only when input if not focused)\n     */\n  formatter: _pt.func\n};\nconst styles = StyleSheet.create({\n  input: {\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    // Setting paddingTop/Bottom separately fix height issues on iOS with multiline\n    paddingTop: 0,\n    paddingBottom: 0,\n    ...Platform.select({\n      // This reset android input inner spacing\n      android: {\n        padding: 0,\n        textAlignVertical: 'center'\n      }\n    })\n  }\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;"]},"metadata":{},"sourceType":"module"}