{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useRef, useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Reanimated, { Easing, useAnimatedReaction, useAnimatedStyle, useSharedValue, withTiming, runOnJS } from 'react-native-reanimated';\nimport { Colors, BorderRadiuses, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Segment from \"./segment\";\nimport { Constants } from \"../../helpers\";\nvar BORDER_WIDTH = 1;\nvar TIMING_CONFIG = {\n  duration: 300,\n  easing: Easing.bezier(0.33, 1, 0.68, 1)\n};\n\nvar SegmentedControl = function SegmentedControl(props) {\n  var onChangeIndex = props.onChangeIndex,\n      _props$initialIndex = props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      containerStyle = props.containerStyle,\n      style = props.style,\n      segments = props.segments,\n      _props$activeColor = props.activeColor,\n      activeColor = _props$activeColor === void 0 ? Colors.primary : _props$activeColor,\n      _props$borderRadius = props.borderRadius,\n      borderRadius = _props$borderRadius === void 0 ? BorderRadiuses.br100 : _props$borderRadius,\n      _props$backgroundColo = props.backgroundColor,\n      backgroundColor = _props$backgroundColo === void 0 ? Colors.grey80 : _props$backgroundColo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Colors.white : _props$activeBackgrou,\n      _props$inactiveColor = props.inactiveColor,\n      inactiveColor = _props$inactiveColor === void 0 ? Colors.grey20 : _props$inactiveColor,\n      _props$outlineColor = props.outlineColor,\n      outlineColor = _props$outlineColor === void 0 ? activeColor : _props$outlineColor,\n      _props$outlineWidth = props.outlineWidth,\n      outlineWidth = _props$outlineWidth === void 0 ? BORDER_WIDTH : _props$outlineWidth,\n      _props$throttleTime = props.throttleTime,\n      throttleTime = _props$throttleTime === void 0 ? 0 : _props$throttleTime,\n      testID = props.testID;\n  var animatedSelectedIndex = useSharedValue(initialIndex);\n  var segmentsStyle = useSharedValue([]);\n  var segmentedControlHeight = useSharedValue(0);\n  var segmentsCounter = useRef(0);\n  var changeIndex = useCallback(_.throttle(function () {\n    onChangeIndex == null ? void 0 : onChangeIndex(animatedSelectedIndex.value);\n  }, throttleTime, {\n    trailing: true,\n    leading: false\n  }), [throttleTime]);\n  useAnimatedReaction(function () {\n    const _f = function () {\n      return animatedSelectedIndex.value;\n    };\n\n    _f._closure = {\n      animatedSelectedIndex\n    };\n    _f.asString = \"function _f(){const{animatedSelectedIndex}=jsThis._closure;{return animatedSelectedIndex.value;}}\";\n    _f.__workletHash = 10930866381299;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\segmentedControl\\\\index.js (49:22)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    const _f = function (selected, previous) {\n      if (selected !== -1 && previous !== null && selected !== previous) {\n        onChangeIndex && runOnJS(changeIndex)();\n      }\n    };\n\n    _f._closure = {\n      onChangeIndex,\n      runOnJS,\n      changeIndex\n    };\n    _f.asString = \"function _f(selected,previous){const{onChangeIndex,runOnJS,changeIndex}=jsThis._closure;{if(selected!==-1&&previous!==null&&selected!==previous){onChangeIndex&&runOnJS(changeIndex)();}}}\";\n    _f.__workletHash = 3732082094214;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\segmentedControl\\\\index.js (51:5)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), []);\n  var onSegmentPress = useCallback(function (index) {\n    animatedSelectedIndex.value = index;\n  }, []);\n  var onLayout = useCallback(function (index, event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        x = _event$nativeEvent$la.x,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    segmentsStyle.value[index] = {\n      x: x,\n      width: width\n    };\n    segmentedControlHeight.value = height - 2 * BORDER_WIDTH;\n    segmentsCounter.current++;\n\n    if (segmentsCounter.current === (segments == null ? void 0 : segments.length)) {\n      animatedSelectedIndex.value = initialIndex;\n      segmentsStyle.value = _toConsumableArray(segmentsStyle.value);\n    }\n  }, [initialIndex, segments == null ? void 0 : segments.length]);\n  var animatedStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      if (segmentsStyle.value.length !== 0) {\n        var inset = withTiming(segmentsStyle.value[animatedSelectedIndex.value].x, TIMING_CONFIG);\n        var width = withTiming(segmentsStyle.value[animatedSelectedIndex.value].width - 2 * BORDER_WIDTH, TIMING_CONFIG);\n        var height = segmentedControlHeight.value;\n        return Constants.isRTL ? {\n          width: width,\n          right: inset,\n          height: height\n        } : {\n          width: width,\n          left: inset,\n          height: height\n        };\n      }\n\n      return {};\n    };\n\n    _f._closure = {\n      segmentsStyle,\n      withTiming,\n      animatedSelectedIndex,\n      TIMING_CONFIG,\n      BORDER_WIDTH,\n      segmentedControlHeight,\n      Constants: {\n        isRTL: Constants.isRTL\n      }\n    };\n    _f.asString = \"function _f(){const{segmentsStyle,withTiming,animatedSelectedIndex,TIMING_CONFIG,BORDER_WIDTH,segmentedControlHeight,Constants}=jsThis._closure;{if(segmentsStyle.value.length!==0){var inset=withTiming(segmentsStyle.value[animatedSelectedIndex.value].x,TIMING_CONFIG);var width=withTiming(segmentsStyle.value[animatedSelectedIndex.value].width-2*BORDER_WIDTH,TIMING_CONFIG);var height=segmentedControlHeight.value;return Constants.isRTL?{width:width,right:inset,height:height}:{width:width,left:inset,height:height};}return{};}}\";\n    _f.__workletHash = 15730385536897;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\segmentedControl\\\\index.js (78:41)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n\n  var renderSegments = function renderSegments() {\n    return _.map(segments, function (_value, index) {\n      return React.createElement(Segment, _extends({\n        key: index,\n        onLayout: onLayout,\n        index: index,\n        onPress: onSegmentPress,\n        selectedIndex: animatedSelectedIndex,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor\n      }, segments == null ? void 0 : segments[index], {\n        testID: testID\n      }));\n    });\n  };\n\n  return React.createElement(View, {\n    style: containerStyle,\n    testID: testID\n  }, React.createElement(View, {\n    row: true,\n    center: true,\n    style: [styles.container, style, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(Reanimated.View, {\n    style: [styles.selectedSegment, {\n      borderColor: outlineColor,\n      borderRadius: borderRadius,\n      backgroundColor: activeBackgroundColor,\n      borderWidth: outlineWidth\n    }, animatedStyle]\n  }), renderSegments()));\n};\n\nSegmentedControl.propTypes = {\n  segments: _pt.array,\n  activeColor: _pt.string,\n  inactiveColor: _pt.string,\n  onChangeIndex: _pt.func,\n  initialIndex: _pt.number,\n  borderRadius: _pt.number,\n  backgroundColor: _pt.string,\n  activeBackgroundColor: _pt.string,\n  outlineColor: _pt.string,\n  outlineWidth: _pt.number,\n  iconOnRight: _pt.bool,\n  throttleTime: _pt.number,\n  testID: _pt.string\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.grey80,\n    borderColor: Colors.grey60,\n    borderWidth: BORDER_WIDTH\n  },\n  selectedSegment: {\n    position: 'absolute'\n  },\n  segment: {\n    paddingHorizontal: Spacings.s3\n  }\n});\nSegmentedControl.displayName = 'SegmentedControl';\nexport default asBaseComponent(SegmentedControl);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js"],"names":["_pt","_","React","useRef","useCallback","Reanimated","Easing","useAnimatedReaction","useAnimatedStyle","useSharedValue","withTiming","runOnJS","Colors","BorderRadiuses","Spacings","asBaseComponent","View","Segment","Constants","BORDER_WIDTH","TIMING_CONFIG","duration","easing","bezier","SegmentedControl","props","onChangeIndex","initialIndex","containerStyle","style","segments","activeColor","primary","borderRadius","br100","backgroundColor","grey80","activeBackgroundColor","white","inactiveColor","grey20","outlineColor","outlineWidth","throttleTime","testID","animatedSelectedIndex","segmentsStyle","segmentedControlHeight","segmentsCounter","changeIndex","throttle","value","trailing","leading","selected","previous","onSegmentPress","index","onLayout","event","nativeEvent","layout","x","width","height","current","length","animatedStyle","inset","isRTL","right","left","renderSegments","map","_value","styles","container","selectedSegment","borderColor","borderWidth","propTypes","array","string","func","number","iconOnRight","bool","StyleSheet","create","grey60","position","segment","paddingHorizontal","s3","displayName"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useRef, useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Reanimated, { Easing, useAnimatedReaction, useAnimatedStyle, useSharedValue, withTiming, runOnJS } from 'react-native-reanimated';\nimport { Colors, BorderRadiuses, Spacings } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Segment from \"./segment\";\nimport { Constants } from \"../../helpers\";\nconst BORDER_WIDTH = 1;\nconst TIMING_CONFIG = {\n  duration: 300,\n  easing: Easing.bezier(0.33, 1, 0.68, 1)\n};\n\n/**\n * @description: SegmentedControl component for toggling two values or more\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SegmentedControlScreen.tsx\n */\nconst SegmentedControl = props => {\n  const {\n    onChangeIndex,\n    initialIndex = 0,\n    containerStyle,\n    style,\n    segments,\n    activeColor = Colors.primary,\n    borderRadius = BorderRadiuses.br100,\n    backgroundColor = Colors.grey80,\n    activeBackgroundColor = Colors.white,\n    inactiveColor = Colors.grey20,\n    outlineColor = activeColor,\n    outlineWidth = BORDER_WIDTH,\n    throttleTime = 0,\n    testID\n  } = props;\n  const animatedSelectedIndex = useSharedValue(initialIndex);\n  const segmentsStyle = useSharedValue([]);\n  const segmentedControlHeight = useSharedValue(0);\n  const segmentsCounter = useRef(0); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const changeIndex = useCallback(_.throttle(() => {\n    onChangeIndex?.(animatedSelectedIndex.value);\n  }, throttleTime, {\n    trailing: true,\n    leading: false\n  }), [throttleTime]);\n  useAnimatedReaction(() => {\n    return animatedSelectedIndex.value;\n  }, (selected, previous) => {\n    if (selected !== -1 && previous !== null && selected !== previous) {\n      onChangeIndex && runOnJS(changeIndex)();\n    }\n  }, []);\n  const onSegmentPress = useCallback(index => {\n    animatedSelectedIndex.value = index; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const onLayout = useCallback((index, event) => {\n    const {\n      x,\n      width,\n      height\n    } = event.nativeEvent.layout;\n    segmentsStyle.value[index] = {\n      x,\n      width\n    };\n    segmentedControlHeight.value = height - 2 * BORDER_WIDTH;\n    segmentsCounter.current++;\n\n    if (segmentsCounter.current === segments?.length) {\n      animatedSelectedIndex.value = initialIndex;\n      segmentsStyle.value = [...segmentsStyle.value];\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [initialIndex, segments?.length]);\n  const animatedStyle = useAnimatedStyle(() => {\n    if (segmentsStyle.value.length !== 0) {\n      const inset = withTiming(segmentsStyle.value[animatedSelectedIndex.value].x, TIMING_CONFIG);\n      const width = withTiming(segmentsStyle.value[animatedSelectedIndex.value].width - 2 * BORDER_WIDTH, TIMING_CONFIG);\n      const height = segmentedControlHeight.value;\n      return Constants.isRTL ? {\n        width,\n        right: inset,\n        height\n      } : {\n        width,\n        left: inset,\n        height\n      };\n    }\n\n    return {};\n  });\n\n  const renderSegments = () => _.map(segments, (_value, index) => {\n    return <Segment key={index} onLayout={onLayout} index={index} onPress={onSegmentPress} selectedIndex={animatedSelectedIndex} activeColor={activeColor} inactiveColor={inactiveColor} {...segments?.[index]} testID={testID} />;\n  });\n\n  return <View style={containerStyle} testID={testID}>\n      <View row center style={[styles.container, style, {\n      borderRadius,\n      backgroundColor\n    }]}>\n        <Reanimated.View style={[styles.selectedSegment, {\n        borderColor: outlineColor,\n        borderRadius,\n        backgroundColor: activeBackgroundColor,\n        borderWidth: outlineWidth\n      }, animatedStyle]} />\n        {renderSegments()}\n      </View>\n    </View>;\n};\n\nSegmentedControl.propTypes = {\n  /**\n     * Array on segments.\n     */\n  segments: _pt.array,\n\n  /**\n     * The color of the active segment label.\n     */\n  activeColor: _pt.string,\n\n  /**\n     * The color of the inactive segments (label).\n     */\n  inactiveColor: _pt.string,\n\n  /**\n     * Callback for when index has change.\n     */\n  onChangeIndex: _pt.func,\n\n  /**\n     * Initial index to be active.\n     */\n  initialIndex: _pt.number,\n\n  /**\n     * The segmentedControl borderRadius\n     */\n  borderRadius: _pt.number,\n\n  /**\n     * The background color of the inactive segments\n     */\n  backgroundColor: _pt.string,\n\n  /**\n     * The background color of the active segment\n     */\n  activeBackgroundColor: _pt.string,\n\n  /**\n     * The color of the active segment outline\n     */\n  outlineColor: _pt.string,\n\n  /**\n     * The width of the active segment outline\n     */\n  outlineWidth: _pt.number,\n\n  /**\n     * Should the icon be on right of the label\n     */\n  iconOnRight: _pt.bool,\n\n  /**\n     * Trailing throttle time of changing index in ms.\n     */\n  throttleTime: _pt.number,\n  testID: _pt.string\n};\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.grey80,\n    borderColor: Colors.grey60,\n    borderWidth: BORDER_WIDTH\n  },\n  selectedSegment: {\n    position: 'absolute'\n  },\n  segment: {\n    paddingHorizontal: Spacings.s3\n  }\n});\nSegmentedControl.displayName = 'SegmentedControl';\nexport default asBaseComponent(SegmentedControl);"]},"metadata":{},"sourceType":"module"}