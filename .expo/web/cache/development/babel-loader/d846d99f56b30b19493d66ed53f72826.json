{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport _ from 'lodash';\nimport EventEmitterManager from \"./utils/EventEmitterManager\";\n\nvar getKeyboardsWithIDs = function getKeyboardsWithIDs(keyboardIDs) {\n  return keyboardIDs.map(function (keyboardId) {\n    return _objectSpread({\n      id: keyboardId\n    }, KeyboardRegistry.registeredKeyboards[keyboardId].params);\n  });\n};\n\nvar KeyboardRegistry = function KeyboardRegistry() {\n  _classCallCheck(this, KeyboardRegistry);\n};\n\nKeyboardRegistry.displayName = 'KeyboardRegistry';\nKeyboardRegistry.registeredKeyboards = {};\nKeyboardRegistry.eventEmitter = new EventEmitterManager();\n\nKeyboardRegistry.registerKeyboard = function (componentID, generator) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!_.isFunction(generator)) {\n    console.error(\"KeyboardRegistry.registerKeyboard: \" + componentID + \" you must register a generator function\");\n    return;\n  }\n\n  KeyboardRegistry.registeredKeyboards[componentID] = {\n    generator: generator,\n    params: params,\n    componentID: componentID\n  };\n  AppRegistry.registerComponent(componentID, generator);\n};\n\nKeyboardRegistry.getKeyboard = function (componentID) {\n  var res = KeyboardRegistry.registeredKeyboards[componentID];\n\n  if (!res || !res.generator) {\n    console.error(\"KeyboardRegistry.getKeyboard: \" + componentID + \" used but not yet registered\");\n    return undefined;\n  }\n\n  return res.generator();\n};\n\nKeyboardRegistry.getKeyboards = function () {\n  var componentIDs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var validKeyboardIDs = _.intersection(componentIDs, Object.keys(KeyboardRegistry.registeredKeyboards));\n\n  return getKeyboardsWithIDs(validKeyboardIDs);\n};\n\nKeyboardRegistry.getAllKeyboards = function () {\n  return getKeyboardsWithIDs(Object.keys(KeyboardRegistry.registeredKeyboards));\n};\n\nKeyboardRegistry.addListener = function (globalID, callback) {\n  KeyboardRegistry.eventEmitter.listenOn(globalID, callback);\n};\n\nKeyboardRegistry.notifyListeners = function (globalID, args) {\n  KeyboardRegistry.eventEmitter.emitEvent(globalID, args);\n};\n\nKeyboardRegistry.removeListeners = function (globalID) {\n  KeyboardRegistry.eventEmitter.removeListeners(globalID);\n};\n\nKeyboardRegistry.onItemSelected = function (componentID, args) {\n  KeyboardRegistry.notifyListeners(componentID + \".onItemSelected\", args);\n};\n\nKeyboardRegistry.requestShowKeyboard = function (componentID) {\n  KeyboardRegistry.notifyListeners('onRequestShowKeyboard', {\n    keyboardId: componentID\n  });\n};\n\nKeyboardRegistry.toggleExpandedKeyboard = function (componentID) {\n  KeyboardRegistry.notifyListeners('onToggleExpandedKeyboard', {\n    keyboardId: componentID\n  });\n};\n\nexport { KeyboardRegistry as default };","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/KeyboardRegistry.js"],"names":["_","EventEmitterManager","getKeyboardsWithIDs","keyboardIDs","map","keyboardId","id","KeyboardRegistry","registeredKeyboards","params","displayName","eventEmitter","registerKeyboard","componentID","generator","isFunction","console","error","AppRegistry","registerComponent","getKeyboard","res","undefined","getKeyboards","componentIDs","validKeyboardIDs","intersection","Object","keys","getAllKeyboards","addListener","globalID","callback","listenOn","notifyListeners","args","emitEvent","removeListeners","onItemSelected","requestShowKeyboard","toggleExpandedKeyboard"],"mappings":";;;;;;;;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,mBAAP;;AAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,WAAW,EAAI;AACzC,SAAOA,WAAW,CAACC,GAAZ,CAAgB,UAAAC,UAAU,EAAI;AACnC;AACEC,MAAAA,EAAE,EAAED;AADN,OAEKE,gBAAgB,CAACC,mBAAjB,CAAqCH,UAArC,EAAiDI,MAFtD;AAID,GALM,CAAP;AAMD,CAPD;;IAcqBF,gB;;;;AAAAA,gB,CACZG,W,GAAc,kB;AADFH,gB,CAEZC,mB,GAAsB,E;AAFVD,gB,CAGZI,Y,GAAe,IAAIV,mBAAJ,E;;AAHHM,gB,CAWZK,gB,GAAmB,UAACC,WAAD,EAAcC,SAAd,EAAyC;AAAA,MAAhBL,MAAgB,uEAAP,EAAO;;AACjE,MAAI,CAACT,CAAC,CAACe,UAAF,CAAaD,SAAb,CAAL,EAA8B;AAC5BE,IAAAA,OAAO,CAACC,KAAR,yCAAoDJ,WAApD;AACA;AACD;;AAEDN,EAAAA,gBAAgB,CAACC,mBAAjB,CAAqCK,WAArC,IAAoD;AAClDC,IAAAA,SAAS,EAATA,SADkD;AAElDL,IAAAA,MAAM,EAANA,MAFkD;AAGlDI,IAAAA,WAAW,EAAXA;AAHkD,GAApD;AAKAK,EAAAA,WAAW,CAACC,iBAAZ,CAA8BN,WAA9B,EAA2CC,SAA3C;AACD,C;;AAvBkBP,gB,CA6BZa,W,GAAc,UAAAP,WAAW,EAAI;AAClC,MAAMQ,GAAG,GAAGd,gBAAgB,CAACC,mBAAjB,CAAqCK,WAArC,CAAZ;;AAEA,MAAI,CAACQ,GAAD,IAAQ,CAACA,GAAG,CAACP,SAAjB,EAA4B;AAC1BE,IAAAA,OAAO,CAACC,KAAR,oCAA+CJ,WAA/C;AACA,WAAOS,SAAP;AACD;;AAED,SAAOD,GAAG,CAACP,SAAJ,EAAP;AACD,C;;AAtCkBP,gB,CA4CZgB,Y,GAAe,YAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;;AAC3C,MAAMC,gBAAgB,GAAGzB,CAAC,CAAC0B,YAAF,CAAeF,YAAf,EAA6BG,MAAM,CAACC,IAAP,CAAYrB,gBAAgB,CAACC,mBAA7B,CAA7B,CAAzB;;AAEA,SAAON,mBAAmB,CAACuB,gBAAD,CAA1B;AACD,C;;AAhDkBlB,gB,CAqDZsB,e,GAAkB,YAAM;AAC7B,SAAO3B,mBAAmB,CAACyB,MAAM,CAACC,IAAP,CAAYrB,gBAAgB,CAACC,mBAA7B,CAAD,CAA1B;AACD,C;;AAvDkBD,gB,CA+DZuB,W,GAAc,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3CzB,EAAAA,gBAAgB,CAACI,YAAjB,CAA8BsB,QAA9B,CAAuCF,QAAvC,EAAiDC,QAAjD;AACD,C;;AAjEkBzB,gB,CAyEZ2B,e,GAAkB,UAACH,QAAD,EAAWI,IAAX,EAAoB;AAC3C5B,EAAAA,gBAAgB,CAACI,YAAjB,CAA8ByB,SAA9B,CAAwCL,QAAxC,EAAkDI,IAAlD;AACD,C;;AA3EkB5B,gB,CAkFZ8B,e,GAAkB,UAAAN,QAAQ,EAAI;AACnCxB,EAAAA,gBAAgB,CAACI,YAAjB,CAA8B0B,eAA9B,CAA8CN,QAA9C;AACD,C;;AApFkBxB,gB,CA2FZ+B,c,GAAiB,UAACzB,WAAD,EAAcsB,IAAd,EAAuB;AAC7C5B,EAAAA,gBAAgB,CAAC2B,eAAjB,CAAoCrB,WAApC,sBAAkEsB,IAAlE;AACD,C;;AA7FkB5B,gB,CAmGZgC,mB,GAAsB,UAAA1B,WAAW,EAAI;AAC1CN,EAAAA,gBAAgB,CAAC2B,eAAjB,CAAiC,uBAAjC,EAA0D;AACxD7B,IAAAA,UAAU,EAAEQ;AAD4C,GAA1D;AAGD,C;;AAvGkBN,gB,CA8GZiC,sB,GAAyB,UAAA3B,WAAW,EAAI;AAC7CN,EAAAA,gBAAgB,CAAC2B,eAAjB,CAAiC,0BAAjC,EAA6D;AAC3D7B,IAAAA,UAAU,EAAEQ;AAD+C,GAA7D;AAGD,C;;SAlHkBN,gB","sourcesContent":["import { AppRegistry } from 'react-native';\nimport _ from 'lodash';\nimport EventEmitterManager from \"./utils/EventEmitterManager\";\n/*\n * Tech debt: how to deal with multiple registries in the app?\n */\n\nconst getKeyboardsWithIDs = keyboardIDs => {\n  return keyboardIDs.map(keyboardId => {\n    return {\n      id: keyboardId,\n      ...KeyboardRegistry.registeredKeyboards[keyboardId].params\n    };\n  });\n};\n/**\n * @description: used for registering keyboards and performing certain actions on the keyboards.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardInput/demoKeyboards.js\n */\n\n\nexport default class KeyboardRegistry {\n  static displayName = 'KeyboardRegistry';\n  static registeredKeyboards = {};\n  static eventEmitter = new EventEmitterManager();\n  /**\n   * Register a new keyboard.\n   * componentID (string) - the ID of the keyboard.\n   * generator (function) - a function for the creation of the keyboard.\n   * params (object) - to be returned when using other methods (i.e. getKeyboards and getAllKeyboards).\n   */\n\n  static registerKeyboard = (componentID, generator, params = {}) => {\n    if (!_.isFunction(generator)) {\n      console.error(`KeyboardRegistry.registerKeyboard: ${componentID} you must register a generator function`);\n      return;\n    }\n\n    KeyboardRegistry.registeredKeyboards[componentID] = {\n      generator,\n      params,\n      componentID\n    };\n    AppRegistry.registerComponent(componentID, generator);\n  };\n  /**\n   * Get a specific keyboard\n   * componentID (string) - the ID of the keyboard.\n   */\n\n  static getKeyboard = componentID => {\n    const res = KeyboardRegistry.registeredKeyboards[componentID];\n\n    if (!res || !res.generator) {\n      console.error(`KeyboardRegistry.getKeyboard: ${componentID} used but not yet registered`);\n      return undefined;\n    }\n\n    return res.generator();\n  };\n  /**\n   * Get keyboards by IDs\n   * componentIDs (string[]) - the ID of the keyboard.\n   */\n\n  static getKeyboards = (componentIDs = []) => {\n    const validKeyboardIDs = _.intersection(componentIDs, Object.keys(KeyboardRegistry.registeredKeyboards));\n\n    return getKeyboardsWithIDs(validKeyboardIDs);\n  };\n  /**\n   * Get all keyboards\n   */\n\n  static getAllKeyboards = () => {\n    return getKeyboardsWithIDs(Object.keys(KeyboardRegistry.registeredKeyboards));\n  };\n  /**\n   * Add a listener for a callback.\n   * globalID (string) - ID that includes the componentID and the event name\n   *                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n   * callback (function) - the callback to be called when the said event happens\n   */\n\n  static addListener = (globalID, callback) => {\n    KeyboardRegistry.eventEmitter.listenOn(globalID, callback);\n  };\n  /**\n   * Notify that an event has occurred.\n   * globalID (string) - ID that includes the componentID and the event name\n   *                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n   * args (object) - data to be sent to the listener.\n   */\n\n  static notifyListeners = (globalID, args) => {\n    KeyboardRegistry.eventEmitter.emitEvent(globalID, args);\n  };\n  /**\n   * Remove a listener for a callback.\n   * globalID (string) - ID that includes the componentID and the event name\n   *                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n   */\n\n  static removeListeners = globalID => {\n    KeyboardRegistry.eventEmitter.removeListeners(globalID);\n  };\n  /**\n   * Default event to be used for when an item on the keyboard has been pressed.\n   * componentID (string) - the ID of the keyboard.\n   * args (object) - data to be sent to the listener.\n   */\n\n  static onItemSelected = (componentID, args) => {\n    KeyboardRegistry.notifyListeners(`${componentID}.onItemSelected`, args);\n  };\n  /**\n   * Request to show the keyboard\n   * componentID (string) - the ID of the keyboard.\n   */\n\n  static requestShowKeyboard = componentID => {\n    KeyboardRegistry.notifyListeners('onRequestShowKeyboard', {\n      keyboardId: componentID\n    });\n  };\n  /**\n   * iOS only (experimental)\n   * Call to make the keyboard full screen\n   * componentID (string) - the ID of the keyboard.\n   */\n\n  static toggleExpandedKeyboard = componentID => {\n    KeyboardRegistry.notifyListeners('onToggleExpandedKeyboard', {\n      keyboardId: componentID\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}