{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport ReactNative from \"react-native-web/dist/index\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar NativeKeyboardTrackingView = requireNativeComponent('KeyboardTrackingViewTemp');\nvar KeyboardTrackingViewTempManager = NativeModules.KeyboardTrackingViewTempManager;\n\nvar KeyboardTrackingView = function (_PureComponent) {\n  _inherits(KeyboardTrackingView, _PureComponent);\n\n  var _super = _createSuper(KeyboardTrackingView);\n\n  function KeyboardTrackingView() {\n    _classCallCheck(this, KeyboardTrackingView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(KeyboardTrackingView, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(NativeKeyboardTrackingView, _extends({}, this.props, {\n        ref: function ref(r) {\n          return _this.ref = r;\n        }\n      }));\n    }\n  }, {\n    key: \"getNativeProps\",\n    value: function getNativeProps() {\n      return _regeneratorRuntime.async(function getNativeProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.ref && KeyboardTrackingViewTempManager && KeyboardTrackingViewTempManager.getNativeProps)) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(KeyboardTrackingViewTempManager.getNativeProps(ReactNative.findNodeHandle(this.ref)));\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 4:\n              return _context.abrupt(\"return\", {});\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"scrollToStart\",\n    value: function scrollToStart() {\n      if (this.ref && KeyboardTrackingViewTempManager && KeyboardTrackingViewTempManager.scrollToStart) {\n        KeyboardTrackingViewTempManager.scrollToStart(ReactNative.findNodeHandle(this.ref));\n      }\n    }\n  }]);\n\n  return KeyboardTrackingView;\n}(PureComponent);\n\nKeyboardTrackingView.displayName = 'KeyboardTrackingView';\nKeyboardTrackingView.defaultProps = {\n  useSafeArea: false\n};\nexport default KeyboardTrackingView;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardTracking/KeyboardTrackingView/KeyboardTrackingView.ios.js"],"names":["React","PureComponent","ReactNative","requireNativeComponent","NativeKeyboardTrackingView","KeyboardTrackingViewTempManager","NativeModules","KeyboardTrackingView","props","r","ref","getNativeProps","findNodeHandle","scrollToStart","displayName","defaultProps","useSafeArea"],"mappings":";;;;;;;;;;;;AAGA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;OACOC,W;SAAeC,sB;;AACtB,IAAMC,0BAA0B,GAAGD,sBAAsB,CAAC,0BAAD,CAAzD;AACA,IAAME,+BAA+B,GAAGC,aAAa,CAACD,+BAAtD;;IAUME,oB;;;;;;;;;;;;;WAMJ,kBAAS;AAAA;;AACP,aAAO,oBAAC,0BAAD,eAAgC,KAAKC,KAArC;AAA4C,QAAA,GAAG,EAAE,aAAAC,CAAC;AAAA,iBAAI,KAAI,CAACC,GAAL,GAAWD,CAAf;AAAA;AAAlD,SAAP;AACD;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA,oBACM,KAAKC,GAAL,IAAYL,+BAAZ,IAA+CA,+BAA+B,CAACM,cADrF;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEiBN,+BAA+B,CAACM,cAAhC,CAA+CT,WAAW,CAACU,cAAZ,CAA2B,KAAKF,GAAhC,CAA/C,CAFjB;;AAAA;AAAA;;AAAA;AAAA,+CAKS,EALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAQA,yBAAgB;AACd,UAAI,KAAKA,GAAL,IAAYL,+BAAZ,IAA+CA,+BAA+B,CAACQ,aAAnF,EAAkG;AAChGR,QAAAA,+BAA+B,CAACQ,aAAhC,CAA8CX,WAAW,CAACU,cAAZ,CAA2B,KAAKF,GAAhC,CAA9C;AACD;AACF;;;;EAtBgCT,a;;AAA7BM,oB,CACGO,W,GAAc,sB;AADjBP,oB,CAEGQ,Y,GAAe;AACpBC,EAAAA,WAAW,EAAE;AADO,C;AAwBxB,eAAeT,oBAAf","sourcesContent":["/**\n * Created by artald on 15/05/2016.\n */\nimport React, { PureComponent } from 'react';\nimport ReactNative, { requireNativeComponent, NativeModules } from 'react-native';\nconst NativeKeyboardTrackingView = requireNativeComponent('KeyboardTrackingViewTemp');\nconst KeyboardTrackingViewTempManager = NativeModules.KeyboardTrackingViewTempManager;\n/**\n * @description: A UI component that enables “keyboard tracking\" for this view and it's sub-views.\n * Would typically be used when you have a TextField or TextInput inside this view.\n *\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/KeyboardTrackingViewScreen.js\n * @notes: This view is useful only for iOS.\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/KeyboardTrackingView/KeyboardTrackingView.gif?raw=true\n */\n\nclass KeyboardTrackingView extends PureComponent {\n  static displayName = 'KeyboardTrackingView';\n  static defaultProps = {\n    useSafeArea: false\n  };\n\n  render() {\n    return <NativeKeyboardTrackingView {...this.props} ref={r => this.ref = r} />;\n  }\n\n  async getNativeProps() {\n    if (this.ref && KeyboardTrackingViewTempManager && KeyboardTrackingViewTempManager.getNativeProps) {\n      return await KeyboardTrackingViewTempManager.getNativeProps(ReactNative.findNodeHandle(this.ref));\n    }\n\n    return {};\n  }\n\n  scrollToStart() {\n    if (this.ref && KeyboardTrackingViewTempManager && KeyboardTrackingViewTempManager.scrollToStart) {\n      KeyboardTrackingViewTempManager.scrollToStart(ReactNative.findNodeHandle(this.ref));\n    }\n  }\n\n}\n\nexport default KeyboardTrackingView;"]},"metadata":{},"sourceType":"module"}