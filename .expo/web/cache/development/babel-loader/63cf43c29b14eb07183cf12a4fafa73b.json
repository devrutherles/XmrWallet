{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors, Spacings } from \"../../style\";\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../helpers\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\n\nvar GridView = function (_UIComponent) {\n  _inherits(GridView, _UIComponent);\n\n  var _super = _createSuper(GridView);\n\n  function GridView(props) {\n    var _this;\n\n    _classCallCheck(this, GridView);\n\n    _this = _super.call(this, props);\n\n    _this.onOrientationChanged = function () {\n      if (!_this.props.viewWidth) {\n        _this.setState({\n          viewWidth: Math.floor(_this.getDefaultViewWidth()),\n          numColumns: _this.getCalculatedNumOfColumns()\n        });\n      }\n    };\n\n    _this.renderItem = function (item, index) {\n      var _this$props = _this.props,\n          items = _this$props.items,\n          itemSpacing = _this$props.itemSpacing;\n      var numColumns = _this.state.numColumns;\n\n      var itemsCount = _.size(items);\n\n      var rowCount = itemsCount / numColumns;\n      var isLastItemInRow = (index + 1) % numColumns === 0;\n      var isLastRow = index + 1 > (rowCount - 1) * numColumns;\n      var isLastItem = index === itemsCount - 1;\n      var size = typeof item.itemSize === 'object' ? {\n        width: _this.itemSize,\n        height: _.get(item.itemSize, 'height', _this.itemSize)\n      } : _this.itemSize;\n      return React.createElement(GridListItem, _extends({\n        key: index\n      }, item, {\n        itemSize: size,\n        containerStyle: [!isLastItemInRow && {\n          marginRight: itemSpacing\n        }, !isLastRow && {\n          marginBottom: itemSpacing\n        }, item.containerStyle]\n      }), isLastItem && _this.renderLastItemOverlay());\n    };\n\n    _this.state = {\n      viewWidth: Math.floor(props.viewWidth || _this.getDefaultViewWidth()),\n      numColumns: props.numColumns\n    };\n    _this.itemSize = undefined;\n    return _this;\n  }\n\n  _createClass(GridView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"shouldUpdateItemSize\",\n    value: function shouldUpdateItemSize() {\n      return !this.itemSize || !this.props.keepItemSize;\n    }\n  }, {\n    key: \"getDefaultViewWidth\",\n    value: function getDefaultViewWidth() {\n      return Constants.screenWidth - Spacings.page * 2;\n    }\n  }, {\n    key: \"getCalculatedNumOfColumns\",\n    value: function getCalculatedNumOfColumns() {\n      var _this$props2 = this.props,\n          itemSpacing = _this$props2.itemSpacing,\n          numColumns = _this$props2.numColumns;\n\n      if (!this.shouldUpdateItemSize() && Constants.orientation === 'landscape' && this.itemSize && itemSpacing) {\n        var numberOfColumns = this.getDefaultViewWidth() / (this.itemSize + itemSpacing);\n        return Math.floor(numberOfColumns);\n      }\n\n      return numColumns;\n    }\n  }, {\n    key: \"getItemSize\",\n    value: function getItemSize() {\n      var itemSpacing = this.props.itemSpacing;\n      var _this$state = this.state,\n          viewWidth = _this$state.viewWidth,\n          numColumns = _this$state.numColumns;\n\n      if (this.shouldUpdateItemSize() && viewWidth && itemSpacing && numColumns) {\n        return (viewWidth - itemSpacing * (numColumns - 1)) / numColumns;\n      }\n\n      return this.itemSize;\n    }\n  }, {\n    key: \"getThemeColor\",\n    value: function getThemeColor(placeColor) {\n      if (_.toLower(placeColor) === _.toLower(Colors.white)) {\n        return Colors.black;\n      } else if (Colors.isDark(placeColor)) {\n        return placeColor;\n      } else {\n        return Colors.getColorTint(placeColor, 30);\n      }\n    }\n  }, {\n    key: \"renderLastItemOverlay\",\n    value: function renderLastItemOverlay() {\n      var _this$props$lastItemO;\n\n      var _this$props3 = this.props,\n          lastItemLabel = _this$props3.lastItemLabel,\n          items = _this$props3.items;\n      var overlayColor = this.getThemeColor((_this$props$lastItemO = this.props.lastItemOverlayColor) != null ? _this$props$lastItemO : '');\n      var formattedLabel = formatLastItemLabel(lastItemLabel, {\n        shouldAddPlus: true\n      });\n\n      if (!lastItemLabel) {\n        return;\n      }\n\n      var imageBorderRadius = _.chain(items).first().get('imageProps.borderRadius').value();\n\n      return React.createElement(View, {\n        style: [styles.overlayContainer, {\n          backgroundColor: Colors.rgba(overlayColor, 0.6),\n          borderRadius: imageBorderRadius\n        }]\n      }, React.createElement(Text, {\n        mainBold: true,\n        white: true\n      }, formattedLabel));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          items = _this$props4.items,\n          viewWidth = _this$props4.viewWidth;\n      this.itemSize = this.getItemSize();\n      return React.createElement(View, {\n        style: [styles.container, {\n          width: viewWidth ? Math.floor(viewWidth) : undefined\n        }]\n      }, this.itemSize && _.map(items, this.renderItem));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var viewWidth;\n      var numColumns;\n\n      if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n        viewWidth = Math.floor(nextProps.viewWidth);\n      }\n\n      if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n        numColumns = nextProps.numColumns;\n      }\n\n      if (viewWidth || viewWidth) {\n        return {\n          viewWidth: viewWidth,\n          numColumns: numColumns\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return GridView;\n}(UIComponent);\n\nGridView.displayName = 'GridView';\nGridView.defaultProps = {\n  numColumns: 3,\n  itemSpacing: Spacings.s4\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center',\n    justifyContent: 'center'\n  })\n});\nexport default GridView;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/gridView/index.js"],"names":["_","React","Colors","Spacings","UIComponent","View","Text","Constants","GridListItem","formatLastItemLabel","GridView","props","onOrientationChanged","viewWidth","setState","Math","floor","getDefaultViewWidth","numColumns","getCalculatedNumOfColumns","renderItem","item","index","items","itemSpacing","state","itemsCount","size","rowCount","isLastItemInRow","isLastRow","isLastItem","itemSize","width","height","get","marginRight","marginBottom","containerStyle","renderLastItemOverlay","undefined","dimensionsChangeListener","addDimensionsEventListener","removeDimensionsEventListener","keepItemSize","screenWidth","page","shouldUpdateItemSize","orientation","numberOfColumns","placeColor","toLower","white","black","isDark","getColorTint","lastItemLabel","overlayColor","getThemeColor","lastItemOverlayColor","formattedLabel","shouldAddPlus","imageBorderRadius","chain","first","value","styles","overlayContainer","backgroundColor","rgba","borderRadius","getItemSize","container","map","nextProps","prevState","displayName","defaultProps","s4","StyleSheet","create","flexDirection","flexWrap","absoluteFillObject","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { StyleSheet } from 'react-native'; // TODO: we should use asBaseComponent here instead of using UIComponent directly\n\nimport { Colors, Spacings } from \"../../style\";\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../helpers\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\n\n/**\n * @description: A auto-generated grid view that calculate item size according to given props\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx\n */\nclass GridView extends UIComponent {\n  static displayName = 'GridView';\n  static defaultProps = {\n    numColumns: 3,\n    itemSpacing: Spacings.s4\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewWidth: Math.floor(props.viewWidth || this.getDefaultViewWidth()),\n      numColumns: props.numColumns\n    };\n    this.itemSize = undefined;\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let viewWidth;\n    let numColumns;\n\n    if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n      viewWidth = Math.floor(nextProps.viewWidth);\n    }\n\n    if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n      numColumns = nextProps.numColumns;\n    }\n\n    if (viewWidth || viewWidth) {\n      return {\n        viewWidth,\n        numColumns\n      };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n\n  onOrientationChanged = () => {\n    if (!this.props.viewWidth) {\n      this.setState({\n        viewWidth: Math.floor(this.getDefaultViewWidth()),\n        numColumns: this.getCalculatedNumOfColumns()\n      });\n    }\n  };\n\n  shouldUpdateItemSize() {\n    return !this.itemSize || !this.props.keepItemSize;\n  }\n\n  getDefaultViewWidth() {\n    // @ts-ignore\n    return Constants.screenWidth - Spacings.page * 2;\n  }\n\n  getCalculatedNumOfColumns() {\n    const {\n      itemSpacing,\n      numColumns\n    } = this.props;\n\n    if (!this.shouldUpdateItemSize() && Constants.orientation === 'landscape' && this.itemSize && itemSpacing) {\n      const numberOfColumns = this.getDefaultViewWidth() / (this.itemSize + itemSpacing);\n      return Math.floor(numberOfColumns);\n    }\n\n    return numColumns;\n  }\n\n  getItemSize() {\n    const {\n      itemSpacing\n    } = this.props;\n    const {\n      viewWidth,\n      numColumns\n    } = this.state;\n\n    if (this.shouldUpdateItemSize() && viewWidth && itemSpacing && numColumns) {\n      return (viewWidth - itemSpacing * (numColumns - 1)) / numColumns;\n    }\n\n    return this.itemSize;\n  }\n\n  getThemeColor(placeColor) {\n    if (_.toLower(placeColor) === _.toLower(Colors.white)) {\n      return Colors.black;\n    } else if (Colors.isDark(placeColor)) {\n      return placeColor;\n    } else {\n      return Colors.getColorTint(placeColor, 30);\n    }\n  }\n\n  renderLastItemOverlay() {\n    const {\n      lastItemLabel,\n      items\n    } = this.props;\n    const overlayColor = this.getThemeColor(this.props.lastItemOverlayColor ?? '');\n    const formattedLabel = formatLastItemLabel(lastItemLabel, {\n      shouldAddPlus: true\n    });\n\n    if (!lastItemLabel) {\n      return;\n    }\n\n    const imageBorderRadius = _.chain(items).first().get('imageProps.borderRadius').value();\n\n    return <View style={[styles.overlayContainer, {\n      backgroundColor: Colors.rgba(overlayColor, 0.6),\n      borderRadius: imageBorderRadius\n    }]}>\n        <Text mainBold white>\n          {formattedLabel}\n        </Text>\n      </View>;\n  }\n\n  renderItem = (item, index) => {\n    const {\n      items,\n      itemSpacing\n    } = this.props;\n    const {\n      numColumns\n    } = this.state;\n\n    const itemsCount = _.size(items);\n\n    const rowCount = itemsCount / numColumns;\n    const isLastItemInRow = (index + 1) % numColumns === 0;\n    const isLastRow = index + 1 > (rowCount - 1) * numColumns;\n    const isLastItem = index === itemsCount - 1;\n    const size = typeof item.itemSize === 'object' ? {\n      width: this.itemSize,\n      height: _.get(item.itemSize, 'height', this.itemSize)\n    } : this.itemSize;\n    return <GridListItem key={index} {...item} itemSize={size} containerStyle={[!isLastItemInRow && {\n      marginRight: itemSpacing\n    }, !isLastRow && {\n      marginBottom: itemSpacing\n    }, item.containerStyle]}>\n        {isLastItem && this.renderLastItemOverlay()}\n      </GridListItem>;\n  };\n\n  render() {\n    const {\n      items,\n      viewWidth\n    } = this.props;\n    this.itemSize = this.getItemSize();\n    return <View style={[styles.container, {\n      width: viewWidth ? Math.floor(viewWidth) : undefined\n    }]}>\n        {this.itemSize && _.map(items, this.renderItem)}\n      </View>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: { ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default GridView;"]},"metadata":{},"sourceType":"module"}