{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\nimport KeyboardRegistry from \"./KeyboardRegistry\";\n\nvar CustomKeyboardViewBase = function (_Component) {\n  _inherits(CustomKeyboardViewBase, _Component);\n\n  var _super = _createSuper(CustomKeyboardViewBase);\n\n  function CustomKeyboardViewBase(props) {\n    var _this;\n\n    _classCallCheck(this, CustomKeyboardViewBase);\n\n    _this = _super.call(this, props);\n    _this.registeredRequestShowKeyboard = false;\n    _this.keyboardEventListeners = [];\n    var component = props.component,\n        onItemSelected = props.onItemSelected;\n\n    if (component) {\n      _this.addOnItemSelectListener(onItemSelected, component);\n    }\n\n    _this.keyboardExpandedToggle = {};\n    return _this;\n  }\n\n  _createClass(CustomKeyboardViewBase, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.component !== this.props.component;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var component = this.props.component;\n      KeyboardRegistry.removeListeners('onRequestShowKeyboard');\n\n      if (this.keyboardEventListeners) {\n        this.keyboardEventListeners.forEach(function (eventListener) {\n          return eventListener.remove();\n        });\n      }\n\n      if (component) {\n        KeyboardRegistry.removeListeners(component + \".onItemSelected\");\n      }\n    }\n  }, {\n    key: \"addOnItemSelectListener\",\n    value: function addOnItemSelectListener(onItemSelected, component) {\n      if (onItemSelected) {\n        KeyboardRegistry.addListener(component + \".onItemSelected\", function (args) {\n          onItemSelected(component, args);\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var onRequestShowKeyboard = this.props.onRequestShowKeyboard;\n\n      if (onRequestShowKeyboard && !this.registeredRequestShowKeyboard) {\n        this.registeredRequestShowKeyboard = true;\n        KeyboardRegistry.addListener('onRequestShowKeyboard', function (args) {\n          onRequestShowKeyboard(args.keyboardId);\n        });\n      }\n\n      this.registerListener(prevProps, this.props);\n    }\n  }, {\n    key: \"registerListener\",\n    value: function registerListener(props, nextProps) {\n      var component = nextProps.component,\n          onItemSelected = nextProps.onItemSelected;\n\n      if (component && props.component !== component) {\n        if (props.component) {\n          KeyboardRegistry.removeListeners(props.component + \".onItemSelected\");\n        }\n\n        KeyboardRegistry.removeListeners(component + \".onItemSelected\");\n        this.addOnItemSelectListener(onItemSelected, component);\n      }\n    }\n  }]);\n\n  return CustomKeyboardViewBase;\n}(Component);\n\nCustomKeyboardViewBase.defaultProps = {\n  initialProps: {}\n};\nexport { CustomKeyboardViewBase as default };","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/CustomKeyboardViewBase.js"],"names":["Component","KeyboardRegistry","CustomKeyboardViewBase","props","registeredRequestShowKeyboard","keyboardEventListeners","component","onItemSelected","addOnItemSelectListener","keyboardExpandedToggle","nextProps","removeListeners","forEach","eventListener","remove","addListener","args","prevProps","onRequestShowKeyboard","keyboardId","registerListener","defaultProps","initialProps"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP;;IACqBC,sB;;;;;AAOnB,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AADiB,UAHnBC,6BAGmB,GAHa,KAGb;AAAA,UAFnBC,sBAEmB,GAFM,EAEN;AAEjB,QACEC,SADF,GAGIH,KAHJ,CACEG,SADF;AAAA,QAEEC,cAFF,GAGIJ,KAHJ,CAEEI,cAFF;;AAKA,QAAID,SAAJ,EAAe;AACb,YAAKE,uBAAL,CAA6BD,cAA7B,EAA6CD,SAA7C;AACD;;AAED,UAAKG,sBAAL,GAA8B,EAA9B;AAXiB;AAYlB;;;;WAED,+BAAsBC,SAAtB,EAAiC;AAC/B,aAAOA,SAAS,CAACJ,SAAV,KAAwB,KAAKH,KAAL,CAAWG,SAA1C;AACD;;;WAED,gCAAuB;AACrB,UACEA,SADF,GAEI,KAAKH,KAFT,CACEG,SADF;AAGAL,MAAAA,gBAAgB,CAACU,eAAjB,CAAiC,uBAAjC;;AAEA,UAAI,KAAKN,sBAAT,EAAiC;AAC/B,aAAKA,sBAAL,CAA4BO,OAA5B,CAAoC,UAAAC,aAAa;AAAA,iBAAIA,aAAa,CAACC,MAAd,EAAJ;AAAA,SAAjD;AACD;;AAED,UAAIR,SAAJ,EAAe;AACbL,QAAAA,gBAAgB,CAACU,eAAjB,CAAoCL,SAApC;AACD;AACF;;;WAED,iCAAwBC,cAAxB,EAAwCD,SAAxC,EAAmD;AACjD,UAAIC,cAAJ,EAAoB;AAClBN,QAAAA,gBAAgB,CAACc,WAAjB,CAAgCT,SAAhC,sBAA4D,UAAAU,IAAI,EAAI;AAClET,UAAAA,cAAc,CAACD,SAAD,EAAYU,IAAZ,CAAd;AACD,SAFD;AAGD;AACF;;;WAED,4BAAmBC,SAAnB,EAA8B;AAC5B,UACEC,qBADF,GAEI,KAAKf,KAFT,CACEe,qBADF;;AAIA,UAAIA,qBAAqB,IAAI,CAAC,KAAKd,6BAAnC,EAAkE;AAChE,aAAKA,6BAAL,GAAqC,IAArC;AACAH,QAAAA,gBAAgB,CAACc,WAAjB,CAA6B,uBAA7B,EAAsD,UAAAC,IAAI,EAAI;AAC5DE,UAAAA,qBAAqB,CAACF,IAAI,CAACG,UAAN,CAArB;AACD,SAFD;AAGD;;AAED,WAAKC,gBAAL,CAAsBH,SAAtB,EAAiC,KAAKd,KAAtC;AACD;;;WAED,0BAAiBA,KAAjB,EAAwBO,SAAxB,EAAmC;AACjC,UACEJ,SADF,GAGII,SAHJ,CACEJ,SADF;AAAA,UAEEC,cAFF,GAGIG,SAHJ,CAEEH,cAFF;;AAKA,UAAID,SAAS,IAAIH,KAAK,CAACG,SAAN,KAAoBA,SAArC,EAAgD;AAC9C,YAAIH,KAAK,CAACG,SAAV,EAAqB;AACnBL,UAAAA,gBAAgB,CAACU,eAAjB,CAAoCR,KAAK,CAACG,SAA1C;AACD;;AAEDL,QAAAA,gBAAgB,CAACU,eAAjB,CAAoCL,SAApC;AACA,aAAKE,uBAAL,CAA6BD,cAA7B,EAA6CD,SAA7C;AACD;AACF;;;;EA7EiDN,S;;AAA/BE,sB,CACZmB,Y,GAAe;AACpBC,EAAAA,YAAY,EAAE;AADM,C;SADHpB,sB","sourcesContent":["import { Component } from 'react';\nimport KeyboardRegistry from \"./KeyboardRegistry\";\nexport default class CustomKeyboardViewBase extends Component {\n  static defaultProps = {\n    initialProps: {}\n  };\n  registeredRequestShowKeyboard = false;\n  keyboardEventListeners = [];\n\n  constructor(props) {\n    super(props);\n    const {\n      component,\n      onItemSelected\n    } = props;\n\n    if (component) {\n      this.addOnItemSelectListener(onItemSelected, component);\n    }\n\n    this.keyboardExpandedToggle = {};\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.component !== this.props.component;\n  }\n\n  componentWillUnmount() {\n    const {\n      component\n    } = this.props;\n    KeyboardRegistry.removeListeners('onRequestShowKeyboard');\n\n    if (this.keyboardEventListeners) {\n      this.keyboardEventListeners.forEach(eventListener => eventListener.remove());\n    }\n\n    if (component) {\n      KeyboardRegistry.removeListeners(`${component}.onItemSelected`);\n    }\n  }\n\n  addOnItemSelectListener(onItemSelected, component) {\n    if (onItemSelected) {\n      KeyboardRegistry.addListener(`${component}.onItemSelected`, args => {\n        onItemSelected(component, args);\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      onRequestShowKeyboard\n    } = this.props;\n\n    if (onRequestShowKeyboard && !this.registeredRequestShowKeyboard) {\n      this.registeredRequestShowKeyboard = true;\n      KeyboardRegistry.addListener('onRequestShowKeyboard', args => {\n        onRequestShowKeyboard(args.keyboardId);\n      });\n    }\n\n    this.registerListener(prevProps, this.props);\n  }\n\n  registerListener(props, nextProps) {\n    const {\n      component,\n      onItemSelected\n    } = nextProps;\n\n    if (component && props.component !== component) {\n      if (props.component) {\n        KeyboardRegistry.removeListeners(`${props.component}.onItemSelected`);\n      }\n\n      KeyboardRegistry.removeListeners(`${component}.onItemSelected`);\n      this.addOnItemSelectListener(onItemSelected, component);\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}