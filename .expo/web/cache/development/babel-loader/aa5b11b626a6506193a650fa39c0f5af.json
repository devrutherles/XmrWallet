{"ast":null,"code":"import _ from 'lodash';\nimport { Colors } from \"./../../style\";\nimport formValidators from \"./validators\";\nexport function getColorByState(color, context) {\n  var finalColor;\n\n  if (_.isString(color)) {\n    finalColor = color;\n  } else if (_.isPlainObject(color)) {\n    if (context != null && context.disabled) {\n      finalColor = color == null ? void 0 : color.disabled;\n    } else if (!(context != null && context.isValid)) {\n      finalColor = color == null ? void 0 : color.error;\n    } else if (context != null && context.isFocused) {\n      finalColor = color == null ? void 0 : color.focus;\n    }\n\n    finalColor = finalColor || (color == null ? void 0 : color.default) || Colors.grey10;\n  }\n\n  return finalColor;\n}\nexport function validate(value, validator) {\n  if (_.isUndefined(validator)) {\n    return [true, undefined];\n  }\n\n  var _isValid = true;\n\n  var _failingValidatorIndex;\n\n  var _validators = _.isArray(validator) ? validator : [validator];\n\n  _.forEach(_validators, function (validator, index) {\n    if (_.isFunction(validator)) {\n      _isValid = validator(value);\n    } else if (_.isString(validator)) {\n      var _formValidators$valid;\n\n      _isValid = (_formValidators$valid = formValidators[validator]) == null ? void 0 : _formValidators$valid.call(formValidators, value || '');\n    }\n\n    if (!_isValid) {\n      _failingValidatorIndex = index;\n      return false;\n    }\n  });\n\n  return [_isValid, _failingValidatorIndex];\n}\nexport function getRelevantValidationMessage(validationMessage, failingValidatorIndex) {\n  if (_.isUndefined(failingValidatorIndex)) {\n    return validationMessage;\n  } else if (_.isUndefined(validationMessage)) {\n    return;\n  }\n\n  if (_.isString(validationMessage)) {\n    return validationMessage;\n  } else if (_.isArray(validationMessage)) {\n    return validationMessage[failingValidatorIndex];\n  }\n}","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/incubator/TextField/Presenter.js"],"names":["_","Colors","formValidators","getColorByState","color","context","finalColor","isString","isPlainObject","disabled","isValid","error","isFocused","focus","default","grey10","validate","value","validator","isUndefined","undefined","_isValid","_failingValidatorIndex","_validators","isArray","forEach","index","isFunction","getRelevantValidationMessage","validationMessage","failingValidatorIndex"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,MAAT;AACA,OAAOC,cAAP;AACA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,OAAhC,EAAyC;AAC9C,MAAIC,UAAJ;;AAEA,MAAIN,CAAC,CAACO,QAAF,CAAWH,KAAX,CAAJ,EAAuB;AACrBE,IAAAA,UAAU,GAAGF,KAAb;AACD,GAFD,MAEO,IAAIJ,CAAC,CAACQ,aAAF,CAAgBJ,KAAhB,CAAJ,EAA4B;AACjC,QAAIC,OAAJ,YAAIA,OAAO,CAAEI,QAAb,EAAuB;AACrBH,MAAAA,UAAU,GAAGF,KAAH,oBAAGA,KAAK,CAAEK,QAApB;AACD,KAFD,MAEO,IAAI,EAACJ,OAAD,YAACA,OAAO,CAAEK,OAAV,CAAJ,EAAuB;AAC5BJ,MAAAA,UAAU,GAAGF,KAAH,oBAAGA,KAAK,CAAEO,KAApB;AACD,KAFM,MAEA,IAAIN,OAAJ,YAAIA,OAAO,CAAEO,SAAb,EAAwB;AAC7BN,MAAAA,UAAU,GAAGF,KAAH,oBAAGA,KAAK,CAAES,KAApB;AACD;;AAEDP,IAAAA,UAAU,GAAGA,UAAU,KAAIF,KAAJ,oBAAIA,KAAK,CAAEU,OAAX,CAAV,IAAgCb,MAAM,CAACc,MAApD;AACD;;AAED,SAAOT,UAAP;AACD;AACD,OAAO,SAASU,QAAT,CAAkBC,KAAlB,EAAyBC,SAAzB,EAAoC;AACzC,MAAIlB,CAAC,CAACmB,WAAF,CAAcD,SAAd,CAAJ,EAA8B;AAC5B,WAAO,CAAC,IAAD,EAAOE,SAAP,CAAP;AACD;;AAED,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAIC,sBAAJ;;AAEA,MAAMC,WAAW,GAAGvB,CAAC,CAACwB,OAAF,CAAUN,SAAV,IAAuBA,SAAvB,GAAmC,CAACA,SAAD,CAAvD;;AAEAlB,EAAAA,CAAC,CAACyB,OAAF,CAAUF,WAAV,EAAuB,UAACL,SAAD,EAAYQ,KAAZ,EAAsB;AAC3C,QAAI1B,CAAC,CAAC2B,UAAF,CAAaT,SAAb,CAAJ,EAA6B;AAC3BG,MAAAA,QAAQ,GAAGH,SAAS,CAACD,KAAD,CAApB;AACD,KAFD,MAEO,IAAIjB,CAAC,CAACO,QAAF,CAAWW,SAAX,CAAJ,EAA2B;AAAA;;AAChCG,MAAAA,QAAQ,4BAAGnB,cAAc,CAACgB,SAAD,CAAjB,qBAAG,2BAAAhB,cAAc,EAAce,KAAK,IAAI,EAAvB,CAAzB;AACD;;AAED,QAAI,CAACI,QAAL,EAAe;AACbC,MAAAA,sBAAsB,GAAGI,KAAzB;AACA,aAAO,KAAP;AACD;AACF,GAXD;;AAaA,SAAO,CAACL,QAAD,EAAWC,sBAAX,CAAP;AACD;AACD,OAAO,SAASM,4BAAT,CAAsCC,iBAAtC,EAAyDC,qBAAzD,EAAgF;AACrF,MAAI9B,CAAC,CAACmB,WAAF,CAAcW,qBAAd,CAAJ,EAA0C;AACxC,WAAOD,iBAAP;AACD,GAFD,MAEO,IAAI7B,CAAC,CAACmB,WAAF,CAAcU,iBAAd,CAAJ,EAAsC;AAC3C;AACD;;AAED,MAAI7B,CAAC,CAACO,QAAF,CAAWsB,iBAAX,CAAJ,EAAmC;AACjC,WAAOA,iBAAP;AACD,GAFD,MAEO,IAAI7B,CAAC,CAACwB,OAAF,CAAUK,iBAAV,CAAJ,EAAkC;AACvC,WAAOA,iBAAiB,CAACC,qBAAD,CAAxB;AACD;AACF","sourcesContent":["import _ from 'lodash';\nimport { Colors } from \"./../../style\";\nimport formValidators from \"./validators\";\nexport function getColorByState(color, context) {\n  let finalColor;\n\n  if (_.isString(color)) {\n    finalColor = color;\n  } else if (_.isPlainObject(color)) {\n    if (context?.disabled) {\n      finalColor = color?.disabled;\n    } else if (!context?.isValid) {\n      finalColor = color?.error;\n    } else if (context?.isFocused) {\n      finalColor = color?.focus;\n    }\n\n    finalColor = finalColor || color?.default || Colors.grey10;\n  }\n\n  return finalColor;\n}\nexport function validate(value, validator) {\n  if (_.isUndefined(validator)) {\n    return [true, undefined];\n  }\n\n  let _isValid = true;\n\n  let _failingValidatorIndex;\n\n  const _validators = _.isArray(validator) ? validator : [validator];\n\n  _.forEach(_validators, (validator, index) => {\n    if (_.isFunction(validator)) {\n      _isValid = validator(value);\n    } else if (_.isString(validator)) {\n      _isValid = formValidators[validator]?.(value || '');\n    }\n\n    if (!_isValid) {\n      _failingValidatorIndex = index;\n      return false;\n    }\n  });\n\n  return [_isValid, _failingValidatorIndex];\n}\nexport function getRelevantValidationMessage(validationMessage, failingValidatorIndex) {\n  if (_.isUndefined(failingValidatorIndex)) {\n    return validationMessage;\n  } else if (_.isUndefined(validationMessage)) {\n    return;\n  }\n\n  if (_.isString(validationMessage)) {\n    return validationMessage;\n  } else if (_.isArray(validationMessage)) {\n    return validationMessage[failingValidatorIndex];\n  }\n}"]},"metadata":{},"sourceType":"module"}