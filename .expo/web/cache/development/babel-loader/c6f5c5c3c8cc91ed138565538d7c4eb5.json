{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport { Constants } from \"../../helpers\";\nimport { HapticService, HapticType } from \"../../services\";\nvar DRAG_TOSS = 0.05;\nvar LEFT_TOGGLE_THRESHOLD = 0.6;\n\nif (!Math.sign) {\n  Math.sign = function (x) {\n    return Number(x > 0) - Number(x < 0) || +x;\n  };\n}\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, props);\n\n    _this._triggerHaptic = function () {\n      return !_this.props.disableHaptic && HapticService.triggerHaptic(HapticType.impactMedium, 'Drawer');\n    };\n\n    _this._handleDrag = function (e) {\n      var onToggleSwipeLeft = _this.props.onToggleSwipeLeft;\n\n      if (onToggleSwipeLeft) {\n        var _this$state = _this.state,\n            rowWidth = _this$state.rowWidth,\n            leftWidth = _this$state.leftWidth;\n        var x = e.nativeEvent.translationX;\n        var threshold = rowWidth * LEFT_TOGGLE_THRESHOLD;\n\n        if (!_this.dragThresholdReached && x >= threshold && x < threshold + 10) {\n          _this.dragThresholdReached = true;\n\n          _this._triggerHaptic();\n\n          onToggleSwipeLeft({\n            rowWidth: rowWidth,\n            leftWidth: leftWidth,\n            dragX: x\n          });\n        }\n\n        if (_this.dragThresholdReached && x < threshold - 10) {\n          _this.dragThresholdReached = false;\n          onToggleSwipeLeft({\n            rowWidth: rowWidth,\n            leftWidth: leftWidth,\n            dragX: x,\n            resetItemPosition: true\n          });\n        }\n      }\n    };\n\n    _this.getTransX = function () {\n      var _this$props = _this.props,\n          friction = _this$props.friction,\n          overshootFriction = _this$props.overshootFriction;\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation,\n          _this$state2$leftWidt = _this$state2.leftWidth,\n          leftWidth = _this$state2$leftWidt === void 0 ? 0 : _this$state2$leftWidt,\n          _this$state2$rowWidth = _this$state2.rowWidth,\n          rowWidth = _this$state2$rowWidth === void 0 ? 0 : _this$state2$rowWidth;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _this$props2 = _this.props,\n          _this$props2$overshoo = _this$props2.overshootLeft,\n          overshootLeft = _this$props2$overshoo === void 0 ? leftWidth > 0 : _this$props2$overshoo,\n          _this$props2$overshoo2 = _this$props2.overshootRight,\n          overshootRight = _this$props2$overshoo2 === void 0 ? rightWidth > 0 : _this$props2$overshoo2;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      return transX;\n    };\n\n    _this.getShowLeftAction = function () {\n      var transX = _this.getTransX();\n\n      var _this$state$leftWidth = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth;\n      var showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      return showLeftAction;\n    };\n\n    _this.getLeftActionTranslate = function () {\n      var showLeftAction = _this.getShowLeftAction();\n\n      var leftActionTranslate = showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      return leftActionTranslate;\n    };\n\n    _this.getShowRightAction = function () {\n      var transX = _this.getTransX();\n\n      var _this$state$rowWidth = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      return showRightAction;\n    };\n\n    _this.getRightActionTranslate = function () {\n      var showRightAction = _this.getShowRightAction();\n\n      var rightActionTranslate = showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      return rightActionTranslate;\n    };\n\n    _this._onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (_this.rowState !== 0) {\n        if (nativeEvent.oldState === State.ACTIVE) {\n          _this.close();\n        }\n      }\n    };\n\n    _this._onHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      }\n\n      if (nativeEvent.state === State.ACTIVE) {\n        _this.props.onDragStart && _this.props.onDragStart(_this.props);\n      }\n    };\n\n    _this._hasLeftActions = _this.props.renderLeftActions !== undefined;\n    _this._hasRightActions = _this.props.renderRightActions !== undefined;\n\n    _this._handleRelease = function (nativeEvent) {\n      var velocityX = nativeEvent.velocityX,\n          dragX = nativeEvent.translationX;\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props3 = _this.props,\n          fullSwipeLeft = _this$props3.fullSwipeLeft,\n          fullSwipeRight = _this$props3.fullSwipeRight,\n          friction = _this$props3.friction,\n          _this$props3$leftThre = _this$props3.leftThreshold,\n          leftThreshold = _this$props3$leftThre === void 0 ? leftWidth / 2 : _this$props3$leftThre,\n          _this$props3$rightThr = _this$props3.rightThreshold,\n          rightThreshold = _this$props3$rightThr === void 0 ? rightWidth / 2 : _this$props3$rightThr,\n          fullLeftThreshold = _this$props3.fullLeftThreshold,\n          fullRightThreshold = _this$props3.fullRightThreshold,\n          onToggleSwipeLeft = _this$props3.onToggleSwipeLeft;\n      var startOffsetX = _this._currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (_this.rowState === 0) {\n        if (_this._hasLeftActions && onToggleSwipeLeft && translationX > rowWidth * LEFT_TOGGLE_THRESHOLD && !_this.dragThresholdReached) {\n          toValue = rowWidth * LEFT_TOGGLE_THRESHOLD;\n        } else if (!onToggleSwipeLeft && fullSwipeLeft && translationX > rowWidth * fullLeftThreshold) {\n          _this._triggerHaptic();\n\n          toValue = rowWidth;\n        } else if (_this._hasRightActions && fullSwipeRight && translationX < -rowWidth * fullRightThreshold) {\n          _this._triggerHaptic();\n\n          toValue = -rowWidth;\n        } else if (_this._hasLeftActions && translationX > leftThreshold) {\n          if (!onToggleSwipeLeft || onToggleSwipeLeft && translationX < rowWidth * LEFT_TOGGLE_THRESHOLD) {\n            toValue = leftWidth;\n          }\n        } else if (_this._hasRightActions && translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (_this.rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this._animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    _this._animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state4 = _this.state,\n          dragX = _this$state4.dragX,\n          rowTranslation = _this$state4.rowTranslation,\n          rowWidth = _this$state4.rowWidth,\n          leftWidth = _this$state4.leftWidth;\n      var _this$props4 = _this.props,\n          useNativeAnimations = _this$props4.useNativeAnimations,\n          animationOptions = _this$props4.animationOptions,\n          onSwipeableLeftOpen = _this$props4.onSwipeableLeftOpen,\n          onSwipeableRightOpen = _this$props4.onSwipeableRightOpen,\n          onSwipeableClose = _this$props4.onSwipeableClose,\n          onSwipeableOpen = _this$props4.onSwipeableOpen,\n          onSwipeableLeftWillOpen = _this$props4.onSwipeableLeftWillOpen,\n          onSwipeableRightWillOpen = _this$props4.onSwipeableRightWillOpen,\n          onSwipeableWillClose = _this$props4.onSwipeableWillClose,\n          onSwipeableWillOpen = _this$props4.onSwipeableWillOpen,\n          onFullSwipeLeft = _this$props4.onFullSwipeLeft,\n          onToggleSwipeLeft = _this$props4.onToggleSwipeLeft,\n          onWillFullSwipeLeft = _this$props4.onWillFullSwipeLeft,\n          onFullSwipeRight = _this$props4.onFullSwipeRight,\n          onWillFullSwipeRight = _this$props4.onWillFullSwipeRight;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.rowState = Math.sign(toValue);\n      Animated.spring(rowTranslation, _objectSpread({\n        toValue: toValue,\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        useNativeDriver: useNativeAnimations\n      }, animationOptions)).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        if (finished) {\n          if (toValue === rowWidth && onFullSwipeLeft) {\n            onFullSwipeLeft();\n          } else if (toValue === -rowWidth && onFullSwipeRight) {\n            onFullSwipeRight();\n          } else if (toValue > 0 && onSwipeableLeftOpen) {\n            onSwipeableLeftOpen();\n          } else if (toValue < 0 && onSwipeableRightOpen) {\n            onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            onSwipeableClose && onSwipeableClose();\n          } else {\n            onSwipeableOpen && onSwipeableOpen();\n          }\n        }\n      });\n\n      if ((toValue === rowWidth * LEFT_TOGGLE_THRESHOLD || _this.dragThresholdReached) && onToggleSwipeLeft) {\n        onToggleSwipeLeft({\n          rowWidth: rowWidth,\n          leftWidth: leftWidth,\n          released: true,\n          triggerHaptic: !_this.dragThresholdReached\n        });\n        _this.dragThresholdReached = false;\n      } else if (toValue === rowWidth && onWillFullSwipeLeft) {\n        onWillFullSwipeLeft();\n      } else if (toValue === -rowWidth && onWillFullSwipeRight) {\n        onWillFullSwipeRight();\n      } else if (toValue > 0 && onSwipeableLeftWillOpen) {\n        onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && onSwipeableRightWillOpen) {\n        onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        onSwipeableWillClose && onSwipeableWillClose();\n      } else {\n        onSwipeableWillOpen && onSwipeableWillOpen();\n      }\n    };\n\n    _this._currentOffset = function () {\n      var _this$state5 = _this.state,\n          _this$state5$leftWidt = _this$state5.leftWidth,\n          leftWidth = _this$state5$leftWidt === void 0 ? 0 : _this$state5$leftWidt,\n          _this$state5$rowWidth = _this$state5.rowWidth,\n          rowWidth = _this$state5$rowWidth === void 0 ? 0 : _this$state5$rowWidth;\n      var _this$state$rightOffs4 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs4 === void 0 ? rowWidth : _this$state$rightOffs4;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (_this.rowState === 1) {\n        return leftWidth;\n      } else if (_this.rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    };\n\n    _this.close = function () {\n      _this._animateRow(_this._currentOffset(), 0);\n    };\n\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this._animateRow(_this._currentOffset(), leftWidth);\n    };\n\n    _this.openLeftFull = function () {\n      if (_this._hasLeftActions) {\n        var rowWidth = _this.state.rowWidth;\n\n        _this._animateRow(_this._currentOffset(), rowWidth);\n      }\n    };\n\n    _this.toggleLeft = function () {\n      if (_this._hasLeftActions) {\n        var rowWidth = _this.state.rowWidth;\n\n        _this._animateRow(_this._currentOffset(), rowWidth * LEFT_TOGGLE_THRESHOLD);\n      }\n    };\n\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs5 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs5 === void 0 ? rowWidth : _this$state$rightOffs5;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this._animateRow(_this._currentOffset(), -rightWidth);\n    };\n\n    _this.openRightFull = function () {\n      if (_this._hasRightActions) {\n        var rowWidth = _this.state.rowWidth;\n\n        _this._animateRow(_this._currentOffset(), -rowWidth);\n      }\n    };\n\n    _this._onRowLayout = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      return _this.handleMeasure('rowWidth', nativeEvent);\n    };\n\n    _this._onLeftLayout = function (_ref5) {\n      var nativeEvent = _ref5.nativeEvent;\n      return _this.handleMeasure('leftWidth', nativeEvent);\n    };\n\n    _this._onRightLayout = function (_ref6) {\n      var nativeEvent = _ref6.nativeEvent;\n      return _this.handleMeasure('rightOffset', nativeEvent);\n    };\n\n    _this.handleMeasure = function (name, nativeEvent) {\n      var _nativeEvent$layout = nativeEvent.layout,\n          width = _nativeEvent$layout.width,\n          x = _nativeEvent$layout.x;\n\n      switch (name) {\n        case 'rowWidth':\n          _this.rowWidth = width;\n          break;\n\n        case 'leftWidth':\n          _this.leftWidth = x;\n          break;\n\n        case 'rightOffset':\n          _this.rightOffset = x;\n          break;\n\n        default:\n          break;\n      }\n\n      var leftRender = _this._hasLeftActions ? _this.leftWidth : true;\n      var rightRender = _this._hasRightActions ? _this.rightOffset : true;\n\n      if (_this.rowWidth && leftRender && rightRender) {\n        _this.setState({\n          rowWidth: _this.rowWidth,\n          leftWidth: _this.leftWidth,\n          rightOffset: _this.rightOffset,\n          measureCompleted: true\n        });\n      }\n    };\n\n    var _dragX = new Animated.Value(0);\n\n    _this.rowState = 0;\n    _this.dragThresholdReached = false;\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowWidth: Constants.screenWidth,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      measureCompleted: false\n    };\n    _this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations,\n      listener: _this._handleDrag\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          renderLeftActions = _this$props5.renderLeftActions,\n          renderRightActions = _this$props5.renderRightActions,\n          leftActionsContainerStyle = _this$props5.leftActionsContainerStyle,\n          rightActionsContainerStyle = _this$props5.rightActionsContainerStyle,\n          containerStyle = _this$props5.containerStyle,\n          childrenContainerStyle = _this$props5.childrenContainerStyle,\n          testID = _this$props5.testID;\n      var left = this._hasLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, leftActionsContainerStyle, {\n          transform: [{\n            translateX: this.getLeftActionTranslate()\n          }]\n        }]\n      }, renderLeftActions(this.getShowLeftAction(), this.getTransX()), React.createElement(View, {\n        onLayout: this._onLeftLayout\n      }));\n      var right = this._hasRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, rightActionsContainerStyle, {\n          transform: [{\n            translateX: this.getRightActionTranslate()\n          }]\n        }]\n      }, renderRightActions(this.getShowRightAction(), this.getTransX()), React.createElement(View, {\n        onLayout: this._onRightLayout\n      }));\n      return React.createElement(PanGestureHandler, _extends({}, this.props, {\n        activeOffsetX: [-10, Constants.isIOS ? 44 : 10],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._onHandlerStateChange\n      }), React.createElement(Animated.View, {\n        onLayout: this._onRowLayout,\n        style: [styles.container, containerStyle]\n      }, left, right, React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this._onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        testID: testID,\n        style: [{\n          transform: [{\n            translateX: this.getTransX()\n          }]\n        }, childrenContainerStyle]\n      }, children))));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\nSwipeable.propTypes = {\n  children: _pt.any.isRequired,\n  friction: _pt.number,\n  leftThreshold: _pt.number,\n  rightThreshold: _pt.number,\n  fullLeftThreshold: _pt.number,\n  fullSwipeLeft: _pt.bool,\n  fullRightThreshold: _pt.number,\n  fullSwipeRight: _pt.bool,\n  overshootLeft: _pt.bool,\n  overshootRight: _pt.bool,\n  overshootFriction: _pt.number,\n  renderLeftActions: _pt.func,\n  renderRightActions: _pt.func,\n  leftActionsContainerStyle: _pt.any.isRequired,\n  rightActionsContainerStyle: _pt.any.isRequired,\n  useNativeAnimations: _pt.bool,\n  disableHaptic: _pt.bool\n};\nSwipeable.displayName = 'IGNORE';\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: false,\n  fullLeftThreshold: 0.45,\n  fullRightThreshold: 0.45\n};\nexport { Swipeable as default };\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/drawer/Swipeable.js"],"names":["_pt","React","Component","PanGestureHandler","TapGestureHandler","State","Constants","HapticService","HapticType","DRAG_TOSS","LEFT_TOGGLE_THRESHOLD","Math","sign","x","Number","Swipeable","props","_triggerHaptic","disableHaptic","triggerHaptic","impactMedium","_handleDrag","e","onToggleSwipeLeft","state","rowWidth","leftWidth","nativeEvent","translationX","threshold","dragThresholdReached","dragX","resetItemPosition","getTransX","friction","overshootFriction","rowTranslation","rightOffset","rightWidth","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","getShowLeftAction","showLeftAction","Value","getLeftActionTranslate","leftActionTranslate","MIN_VALUE","extrapolate","getShowRightAction","showRightAction","getRightActionTranslate","rightActionTranslate","_onTapHandlerStateChange","rowState","oldState","ACTIVE","close","_onHandlerStateChange","_handleRelease","onDragStart","_hasLeftActions","renderLeftActions","undefined","_hasRightActions","renderRightActions","velocityX","fullSwipeLeft","fullSwipeRight","leftThreshold","rightThreshold","fullLeftThreshold","fullRightThreshold","startOffsetX","_currentOffset","toValue","_animateRow","fromValue","useNativeAnimations","animationOptions","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","onFullSwipeLeft","onWillFullSwipeLeft","onFullSwipeRight","onWillFullSwipeRight","setValue","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","start","finished","released","openLeft","openLeftFull","toggleLeft","openRight","openRightFull","_onRowLayout","handleMeasure","_onLeftLayout","_onRightLayout","name","layout","width","leftRender","rightRender","setState","measureCompleted","screenWidth","_onGestureEvent","event","listener","children","leftActionsContainerStyle","rightActionsContainerStyle","containerStyle","childrenContainerStyle","testID","left","styles","leftActions","transform","translateX","right","rightActions","isIOS","container","propTypes","any","isRequired","number","bool","func","displayName","defaultProps","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n// @ts-nocheck\n// @flow\n// Similarly to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n// TODO: use Swipeable from react-native-gesture-handler once they support RTL\n\n/* eslint-disable */\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport { Constants } from \"../../helpers\";\nimport { HapticService, HapticType } from \"../../services\";\nconst DRAG_TOSS = 0.05;\nconst LEFT_TOGGLE_THRESHOLD = 0.6; // Math.sign polyfill for iOS 8.x\n\nif (!Math.sign) {\n  Math.sign = function (x) {\n    return Number(x > 0) - Number(x < 0) || +x;\n  };\n}\n\nexport default class Swipeable extends Component {\n  static propTypes = {\n    children: _pt.any.isRequired,\n    friction: _pt.number,\n    leftThreshold: _pt.number,\n    rightThreshold: _pt.number,\n    fullLeftThreshold: _pt.number,\n    fullSwipeLeft: _pt.bool,\n    fullRightThreshold: _pt.number,\n    fullSwipeRight: _pt.bool,\n    overshootLeft: _pt.bool,\n    overshootRight: _pt.bool,\n    overshootFriction: _pt.number,\n    renderLeftActions: _pt.func,\n    renderRightActions: _pt.func,\n    leftActionsContainerStyle: _pt.any.isRequired,\n    rightActionsContainerStyle: _pt.any.isRequired,\n    useNativeAnimations: _pt.bool,\n    disableHaptic: _pt.bool\n  };\n  static displayName = 'IGNORE';\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: false,\n    // issue in iPhone5\n    fullLeftThreshold: 0.45,\n    fullRightThreshold: 0.45\n  }; // _onGestureEvent: ?Animated.Event;\n  // _transX: ?Animated.Interpolation;\n  // _showLeftAction: ?Animated.Interpolation | ?Animated.Value;\n  // _leftActionTranslate: ?Animated.Interpolation;\n  // _showRightAction: ?Animated.Interpolation | ?Animated.Value;\n  // _rightActionTranslate: ?Animated.Interpolation;\n\n  constructor(props) {\n    super(props);\n    const dragX = new Animated.Value(0); // 0 -> open from either left/right,\n    // 1 -> closing to the left\n    // -1 -> closing to the right\n\n    this.rowState = 0;\n    this.dragThresholdReached = false;\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowWidth: Constants.screenWidth,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      measureCompleted: false\n    };\n    this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations,\n      listener: this._handleDrag\n    });\n  }\n\n  _triggerHaptic = () => {\n    return !this.props.disableHaptic && HapticService.triggerHaptic(HapticType.impactMedium, 'Drawer');\n  };\n  _handleDrag = e => {\n    const {\n      onToggleSwipeLeft\n    } = this.props;\n\n    if (onToggleSwipeLeft) {\n      // Drag left toggle\n      const {\n        rowWidth,\n        leftWidth\n      } = this.state;\n      const x = e.nativeEvent.translationX;\n      const threshold = rowWidth * LEFT_TOGGLE_THRESHOLD;\n\n      if (!this.dragThresholdReached && x >= threshold && x < threshold + 10) {\n        // move item right\n        this.dragThresholdReached = true;\n\n        this._triggerHaptic();\n\n        onToggleSwipeLeft({\n          rowWidth,\n          leftWidth,\n          dragX: x\n        });\n      }\n\n      if (this.dragThresholdReached && x < threshold - 10) {\n        // move item left\n        this.dragThresholdReached = false;\n        onToggleSwipeLeft({\n          rowWidth,\n          leftWidth,\n          dragX: x,\n          resetItemPosition: true\n        });\n      }\n    }\n  };\n  getTransX = () => {\n    const {\n      friction,\n      overshootFriction\n    } = this.props;\n    const {\n      dragX,\n      rowTranslation,\n      leftWidth = 0,\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0\n    } = this.props;\n    const transX = Animated.add(rowTranslation, dragX.interpolate({\n      inputRange: [0, friction],\n      outputRange: [0, 1]\n    })).interpolate({\n      inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n      outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n    });\n    return transX;\n  };\n  getShowLeftAction = () => {\n    const transX = this.getTransX();\n    const {\n      leftWidth = 0\n    } = this.state;\n    const showLeftAction = leftWidth > 0 ? transX.interpolate({\n      inputRange: [-1, 0, leftWidth],\n      outputRange: [0, 0, 1]\n    }) : new Animated.Value(0);\n    return showLeftAction;\n  };\n  getLeftActionTranslate = () => {\n    const showLeftAction = this.getShowLeftAction();\n    const leftActionTranslate = showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n    return leftActionTranslate;\n  };\n  getShowRightAction = () => {\n    const transX = this.getTransX();\n    const {\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n    const showRightAction = rightWidth > 0 ? transX.interpolate({\n      inputRange: [-rightWidth, 0, 1],\n      outputRange: [1, 0, 0]\n    }) : new Animated.Value(0);\n    return showRightAction;\n  };\n  getRightActionTranslate = () => {\n    const showRightAction = this.getShowRightAction();\n    const rightActionTranslate = showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n    return rightActionTranslate;\n  };\n  _onTapHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (this.rowState !== 0) {\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.close();\n      }\n    }\n  };\n  _onHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    }\n\n    if (nativeEvent.state === State.ACTIVE) {\n      this.props.onDragStart && this.props.onDragStart(this.props);\n    }\n  };\n  _hasLeftActions = this.props.renderLeftActions !== undefined;\n  _hasRightActions = this.props.renderRightActions !== undefined;\n  _handleRelease = nativeEvent => {\n    const {\n      velocityX,\n      translationX: dragX\n    } = nativeEvent;\n    const {\n      leftWidth = 0,\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      fullSwipeLeft,\n      fullSwipeRight,\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n      fullLeftThreshold,\n      fullRightThreshold,\n      onToggleSwipeLeft\n    } = this.props;\n    const startOffsetX = this._currentOffset() + dragX / friction;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n    let toValue = 0;\n\n    if (this.rowState === 0) {\n      if (this._hasLeftActions && onToggleSwipeLeft && translationX > rowWidth * LEFT_TOGGLE_THRESHOLD && !this.dragThresholdReached) {\n        // Swipe left toggle\n        toValue = rowWidth * LEFT_TOGGLE_THRESHOLD;\n      } else if (!onToggleSwipeLeft && fullSwipeLeft && translationX > rowWidth * fullLeftThreshold) {\n        // Full left swipe\n        this._triggerHaptic();\n\n        toValue = rowWidth;\n      } else if (this._hasRightActions && fullSwipeRight && translationX < -rowWidth * fullRightThreshold) {\n        // Full right swipe\n        this._triggerHaptic();\n\n        toValue = -rowWidth;\n      } else if (this._hasLeftActions && translationX > leftThreshold) {\n        // left swipe\n        if (!onToggleSwipeLeft || onToggleSwipeLeft && translationX < rowWidth * LEFT_TOGGLE_THRESHOLD) {\n          // left swipe with toggle\n          toValue = leftWidth;\n        }\n      } else if (this._hasRightActions && translationX < -rightThreshold) {\n        // right swipe\n        toValue = -rightWidth;\n      }\n    } else if (this.rowState === 1) {\n      // swiped to the right (left swipe)\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to the left (right swipe)\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this._animateRow(startOffsetX, toValue, velocityX / friction);\n  };\n  _animateRow = (fromValue, toValue, velocityX) => {\n    const {\n      dragX,\n      rowTranslation,\n      rowWidth,\n      leftWidth\n    } = this.state;\n    const {\n      useNativeAnimations,\n      animationOptions,\n      onSwipeableLeftOpen,\n      onSwipeableRightOpen,\n      onSwipeableClose,\n      onSwipeableOpen,\n      onSwipeableLeftWillOpen,\n      onSwipeableRightWillOpen,\n      onSwipeableWillClose,\n      onSwipeableWillOpen,\n      onFullSwipeLeft,\n      onToggleSwipeLeft,\n      onWillFullSwipeLeft,\n      onFullSwipeRight,\n      onWillFullSwipeRight\n    } = this.props;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n    this.rowState = Math.sign(toValue);\n    Animated.spring(rowTranslation, {\n      toValue,\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      useNativeDriver: useNativeAnimations,\n      ...animationOptions\n    }).start(({\n      finished\n    }) => {\n      if (finished) {\n        if (toValue === rowWidth && onFullSwipeLeft) {\n          onFullSwipeLeft();\n        } else if (toValue === -rowWidth && onFullSwipeRight) {\n          onFullSwipeRight();\n        } else if (toValue > 0 && onSwipeableLeftOpen) {\n          onSwipeableLeftOpen();\n        } else if (toValue < 0 && onSwipeableRightOpen) {\n          onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          onSwipeableClose && onSwipeableClose();\n        } else {\n          onSwipeableOpen && onSwipeableOpen();\n        }\n      }\n    });\n\n    if ((toValue === rowWidth * LEFT_TOGGLE_THRESHOLD || this.dragThresholdReached) && onToggleSwipeLeft) {\n      onToggleSwipeLeft({\n        rowWidth,\n        leftWidth,\n        released: true,\n        triggerHaptic: !this.dragThresholdReached\n      });\n      this.dragThresholdReached = false;\n    } else if (toValue === rowWidth && onWillFullSwipeLeft) {\n      onWillFullSwipeLeft();\n    } else if (toValue === -rowWidth && onWillFullSwipeRight) {\n      onWillFullSwipeRight();\n    } else if (toValue > 0 && onSwipeableLeftWillOpen) {\n      onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && onSwipeableRightWillOpen) {\n      onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      onSwipeableWillClose && onSwipeableWillClose();\n    } else {\n      onSwipeableWillOpen && onSwipeableWillOpen();\n    }\n  };\n  _currentOffset = () => {\n    const {\n      leftWidth = 0,\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n\n    if (this.rowState === 1) {\n      return leftWidth;\n    } else if (this.rowState === -1) {\n      return -rightWidth;\n    }\n\n    return 0;\n  };\n  close = () => {\n    this._animateRow(this._currentOffset(), 0);\n  };\n  openLeft = () => {\n    const {\n      leftWidth = 0\n    } = this.state;\n\n    this._animateRow(this._currentOffset(), leftWidth);\n  };\n  openLeftFull = () => {\n    if (this._hasLeftActions) {\n      const {\n        rowWidth\n      } = this.state;\n\n      this._animateRow(this._currentOffset(), rowWidth);\n    }\n  };\n  toggleLeft = () => {\n    // Programmatically left toggle\n    if (this._hasLeftActions) {\n      const {\n        rowWidth\n      } = this.state;\n\n      this._animateRow(this._currentOffset(), rowWidth * LEFT_TOGGLE_THRESHOLD);\n    }\n  };\n  openRight = () => {\n    const {\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n\n    this._animateRow(this._currentOffset(), -rightWidth);\n  };\n  openRightFull = () => {\n    if (this._hasRightActions) {\n      const {\n        rowWidth\n      } = this.state;\n\n      this._animateRow(this._currentOffset(), -rowWidth);\n    }\n  };\n  _onRowLayout = ({\n    nativeEvent\n  }) => this.handleMeasure('rowWidth', nativeEvent);\n  _onLeftLayout = ({\n    nativeEvent\n  }) => this.handleMeasure('leftWidth', nativeEvent);\n  _onRightLayout = ({\n    nativeEvent\n  }) => this.handleMeasure('rightOffset', nativeEvent);\n  handleMeasure = (name, nativeEvent) => {\n    const {\n      width,\n      x\n    } = nativeEvent.layout;\n\n    switch (name) {\n      case 'rowWidth':\n        this.rowWidth = width;\n        break;\n\n      case 'leftWidth':\n        this.leftWidth = x;\n        break;\n\n      case 'rightOffset':\n        this.rightOffset = x;\n        break;\n\n      default:\n        break;\n    }\n\n    const leftRender = this._hasLeftActions ? this.leftWidth : true;\n    const rightRender = this._hasRightActions ? this.rightOffset : true;\n\n    if (this.rowWidth && leftRender && rightRender) {\n      this.setState({\n        rowWidth: this.rowWidth,\n        leftWidth: this.leftWidth,\n        rightOffset: this.rightOffset,\n        measureCompleted: true\n      });\n    }\n  };\n\n  render() {\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      leftActionsContainerStyle,\n      rightActionsContainerStyle,\n      containerStyle,\n      childrenContainerStyle,\n      testID\n    } = this.props;\n    const left = this._hasLeftActions && <Animated.View style={[styles.leftActions, leftActionsContainerStyle, {\n      transform: [{\n        translateX: this.getLeftActionTranslate()\n      }]\n    }]}>\n        {renderLeftActions(this.getShowLeftAction(), this.getTransX())}\n        <View onLayout={this._onLeftLayout} />\n      </Animated.View>;\n    const right = this._hasRightActions && <Animated.View style={[styles.rightActions, rightActionsContainerStyle, {\n      transform: [{\n        translateX: this.getRightActionTranslate()\n      }]\n    }]}>\n        {renderRightActions(this.getShowRightAction(), this.getTransX())}\n        <View onLayout={this._onRightLayout} />\n      </Animated.View>;\n    return <PanGestureHandler {...this.props} // minDeltaX={10}\n    activeOffsetX={[-10, Constants.isIOS ? 44 : 10]} onGestureEvent={this._onGestureEvent} onHandlerStateChange={this._onHandlerStateChange}>\n        <Animated.View onLayout={this._onRowLayout} style={[styles.container, containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n            <Animated.View testID={testID} style={[{\n            transform: [{\n              translateX: this.getTransX()\n            }]\n          }, childrenContainerStyle]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>;\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: { ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  },\n  rightActions: { ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  }\n});"]},"metadata":{},"sourceType":"module"}