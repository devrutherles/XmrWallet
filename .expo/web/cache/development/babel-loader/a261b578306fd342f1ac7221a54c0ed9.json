{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport React from 'react';\nexport var WizardStepStates;\n\n(function (WizardStepStates) {\n  WizardStepStates[\"ENABLED\"] = \"enabled\";\n  WizardStepStates[\"DISABLED\"] = \"disabled\";\n  WizardStepStates[\"ERROR\"] = \"error\";\n  WizardStepStates[\"SKIPPED\"] = \"skipped\";\n  WizardStepStates[\"COMPLETED\"] = \"completed\";\n})(WizardStepStates || (WizardStepStates = {}));\n\nvar WizardTypesForDocs = function (_React$Component) {\n  _inherits(WizardTypesForDocs, _React$Component);\n\n  var _super = _createSuper(WizardTypesForDocs);\n\n  function WizardTypesForDocs() {\n    _classCallCheck(this, WizardTypesForDocs);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WizardTypesForDocs, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return WizardTypesForDocs;\n}(React.Component);\n\nWizardTypesForDocs.propTypes = {\n  activeIndex: _pt.number.isRequired,\n  activeConfig: _pt.shape({\n    state: _pt.oneOf([\"enabled\", \"disabled\", \"error\", \"skipped\", \"completed\"]).isRequired,\n    label: _pt.string,\n    color: _pt.string,\n    circleColor: _pt.string,\n    circleSize: _pt.number,\n    circleBackgroundColor: _pt.string,\n    enabled: _pt.bool,\n    accessibilityInfo: _pt.string\n  }),\n  onActiveIndexChanged: _pt.func,\n  testID: _pt.string\n};\nWizardTypesForDocs.displayName = 'Wizard';\n\nvar WizardStepTypesForDocs = function (_React$Component2) {\n  _inherits(WizardStepTypesForDocs, _React$Component2);\n\n  var _super2 = _createSuper(WizardStepTypesForDocs);\n\n  function WizardStepTypesForDocs() {\n    _classCallCheck(this, WizardStepTypesForDocs);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(WizardStepTypesForDocs, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return WizardStepTypesForDocs;\n}(React.Component);\n\nWizardStepTypesForDocs.propTypes = {\n  state: _pt.oneOf([\"enabled\", \"disabled\", \"error\", \"skipped\", \"completed\"]).isRequired,\n  label: _pt.string,\n  color: _pt.string,\n  circleColor: _pt.string,\n  circleSize: _pt.number,\n  circleBackgroundColor: _pt.string,\n  enabled: _pt.bool,\n  accessibilityInfo: _pt.string\n};\nWizardStepTypesForDocs.displayName = 'Wizard.Step';","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/√Årea de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/wizard/types.js"],"names":["_pt","React","WizardStepStates","WizardTypesForDocs","Component","propTypes","activeIndex","number","isRequired","activeConfig","shape","state","oneOf","label","string","color","circleColor","circleSize","circleBackgroundColor","enabled","bool","accessibilityInfo","onActiveIndexChanged","func","testID","displayName","WizardStepTypesForDocs"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAIC,gBAAJ;;AAEP,CAAC,UAAUA,gBAAV,EAA4B;AAC3BA,EAAAA,gBAAgB,CAAC,SAAD,CAAhB,GAA8B,SAA9B;AACAA,EAAAA,gBAAgB,CAAC,UAAD,CAAhB,GAA+B,UAA/B;AACAA,EAAAA,gBAAgB,CAAC,OAAD,CAAhB,GAA4B,OAA5B;AACAA,EAAAA,gBAAgB,CAAC,SAAD,CAAhB,GAA8B,SAA9B;AACAA,EAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgC,WAAhC;AACD,CAND,EAMGA,gBAAgB,KAAKA,gBAAgB,GAAG,EAAxB,CANnB;;IASMC,kB;;;;;;;;;;;;;WA8DJ,kBAAS;AACP,aAAO,IAAP;AACD;;;;EAhE8BF,KAAK,CAACG,S;;AAAjCD,kB,CACGE,S,GAAY;AAIjBC,EAAAA,WAAW,EAAEN,GAAG,CAACO,MAAJ,CAAWC,UAJP;AASjBC,EAAAA,YAAY,EAAET,GAAG,CAACU,KAAJ,CAAU;AAItBC,IAAAA,KAAK,EAAEX,GAAG,CAACY,KAAJ,CAAU,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,SAAjC,EAA4C,WAA5C,CAAV,EAAoEJ,UAJrD;AAStBK,IAAAA,KAAK,EAAEb,GAAG,CAACc,MATW;AActBC,IAAAA,KAAK,EAAEf,GAAG,CAACc,MAdW;AAmBtBE,IAAAA,WAAW,EAAEhB,GAAG,CAACc,MAnBK;AAwBtBG,IAAAA,UAAU,EAAEjB,GAAG,CAACO,MAxBM;AA6BtBW,IAAAA,qBAAqB,EAAElB,GAAG,CAACc,MA7BL;AAkCtBK,IAAAA,OAAO,EAAEnB,GAAG,CAACoB,IAlCS;AAuCtBC,IAAAA,iBAAiB,EAAErB,GAAG,CAACc;AAvCD,GAAV,CATG;AAuDjBQ,EAAAA,oBAAoB,EAAEtB,GAAG,CAACuB,IAvDT;AAwDjBC,EAAAA,MAAM,EAAExB,GAAG,CAACc;AAxDK,C;AADfX,kB,CA4DGsB,W,GAAc,Q;;IASjBC,sB;;;;;;;;;;;;;WA6CJ,kBAAS;AACP,aAAO,IAAP;AACD;;;;EA/CkCzB,KAAK,CAACG,S;;AAArCsB,sB,CACGrB,S,GAAY;AAIjBM,EAAAA,KAAK,EAAEX,GAAG,CAACY,KAAJ,CAAU,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,SAAjC,EAA4C,WAA5C,CAAV,EAAoEJ,UAJ1D;AASjBK,EAAAA,KAAK,EAAEb,GAAG,CAACc,MATM;AAcjBC,EAAAA,KAAK,EAAEf,GAAG,CAACc,MAdM;AAmBjBE,EAAAA,WAAW,EAAEhB,GAAG,CAACc,MAnBA;AAwBjBG,EAAAA,UAAU,EAAEjB,GAAG,CAACO,MAxBC;AA6BjBW,EAAAA,qBAAqB,EAAElB,GAAG,CAACc,MA7BV;AAkCjBK,EAAAA,OAAO,EAAEnB,GAAG,CAACoB,IAlCI;AAuCjBC,EAAAA,iBAAiB,EAAErB,GAAG,CAACc;AAvCN,C;AADfY,sB,CA2CGD,W,GAAc,a","sourcesContent":["import _pt from \"prop-types\";\nimport React from 'react';\nexport let WizardStepStates;\n\n(function (WizardStepStates) {\n  WizardStepStates[\"ENABLED\"] = \"enabled\";\n  WizardStepStates[\"DISABLED\"] = \"disabled\";\n  WizardStepStates[\"ERROR\"] = \"error\";\n  WizardStepStates[\"SKIPPED\"] = \"skipped\";\n  WizardStepStates[\"COMPLETED\"] = \"completed\";\n})(WizardStepStates || (WizardStepStates = {}));\n\n// @ts-ignore\nclass WizardTypesForDocs extends React.Component {\n  static propTypes = {\n    /**\n       * The active step's index\n       */\n    activeIndex: _pt.number.isRequired,\n\n    /**\n       * The configuration of the active step (see Wizard.Step.propTypes)\n       */\n    activeConfig: _pt.shape({\n      /**\n         * The state of the step (Wizard.States.X)\n         */\n      state: _pt.oneOf([\"enabled\", \"disabled\", \"error\", \"skipped\", \"completed\"]).isRequired,\n\n      /**\n         * The label of the item\n         */\n      label: _pt.string,\n\n      /**\n         * Color of the step index (or of the icon, when provided)\n         */\n      color: _pt.string,\n\n      /**\n         * Color of the circle\n         */\n      circleColor: _pt.string,\n\n      /**\n         * The step's circle size (diameter)\n         */\n      circleSize: _pt.number,\n\n      /**\n         * Circle's background color\n         */\n      circleBackgroundColor: _pt.string,\n\n      /**\n         * Whether the step should be enabled\n         */\n      enabled: _pt.bool,\n\n      /**\n         * Extra text to be read in accessibility mode\n         */\n      accessibilityInfo: _pt.string\n    }),\n\n    /**\n       * Callback that is called when the active step is changed (i.e. a step was clicked on).\n       * The new activeIndex will be the input of the callback.\n       */\n    onActiveIndexChanged: _pt.func,\n    testID: _pt.string\n  };\n  // eslint-disable-line\n  static displayName = 'Wizard';\n\n  render() {\n    return null;\n  }\n\n} // @ts-ignore\n\n\nclass WizardStepTypesForDocs extends React.Component {\n  static propTypes = {\n    /**\n       * The state of the step (Wizard.States.X)\n       */\n    state: _pt.oneOf([\"enabled\", \"disabled\", \"error\", \"skipped\", \"completed\"]).isRequired,\n\n    /**\n       * The label of the item\n       */\n    label: _pt.string,\n\n    /**\n       * Color of the step index (or of the icon, when provided)\n       */\n    color: _pt.string,\n\n    /**\n       * Color of the circle\n       */\n    circleColor: _pt.string,\n\n    /**\n       * The step's circle size (diameter)\n       */\n    circleSize: _pt.number,\n\n    /**\n       * Circle's background color\n       */\n    circleBackgroundColor: _pt.string,\n\n    /**\n       * Whether the step should be enabled\n       */\n    enabled: _pt.bool,\n\n    /**\n       * Extra text to be read in accessibility mode\n       */\n    accessibilityInfo: _pt.string\n  };\n  // eslint-disable-line\n  static displayName = 'Wizard.Step';\n\n  render() {\n    return null;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}