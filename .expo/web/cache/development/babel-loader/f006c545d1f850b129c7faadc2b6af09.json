{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { useCallback, useMemo, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { interpolateColor, useAnimatedStyle } from 'react-native-reanimated';\nimport Text from \"../../components/text\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport { Colors, Spacings } from \"../../../src/style\";\nimport { asBaseComponent } from \"../../commons/new\";\nvar AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nvar WheelPickerItem = memo(function (_ref) {\n  var index = _ref.index,\n      label = _ref.label,\n      fakeLabel = _ref.fakeLabel,\n      fakeLabelStyle = _ref.fakeLabelStyle,\n      fakeLabelProps = _ref.fakeLabelProps,\n      itemHeight = _ref.itemHeight,\n      onSelect = _ref.onSelect,\n      offset = _ref.offset,\n      _ref$activeColor = _ref.activeColor,\n      activeColor = _ref$activeColor === void 0 ? Colors.primary : _ref$activeColor,\n      _ref$inactiveColor = _ref.inactiveColor,\n      inactiveColor = _ref$inactiveColor === void 0 ? Colors.grey20 : _ref$inactiveColor,\n      style = _ref.style,\n      testID = _ref.testID,\n      _ref$centerH = _ref.centerH,\n      centerH = _ref$centerH === void 0 ? true : _ref$centerH;\n  var selectItem = useCallback(function () {\n    return onSelect(index);\n  }, [index]);\n  var itemOffset = index * itemHeight;\n  var animatedColorStyle = useAnimatedStyle(function () {\n    const _f = function () {\n      var color = interpolateColor(offset.value, [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight], [inactiveColor, activeColor, inactiveColor]);\n      return {\n        color: color\n      };\n    };\n\n    _f._closure = {\n      interpolateColor,\n      offset,\n      itemOffset,\n      itemHeight,\n      inactiveColor,\n      activeColor\n    };\n    _f.asString = \"function _f(){const{interpolateColor,offset,itemOffset,itemHeight,inactiveColor,activeColor}=jsThis._closure;{var color=interpolateColor(offset.value,[itemOffset-itemHeight,itemOffset,itemOffset+itemHeight],[inactiveColor,activeColor,inactiveColor]);return{color:color};}}\";\n    _f.__workletHash = 4401715554566;\n    _f.__location = \"C:\\\\Users\\\\ruthe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\projetos\\\\xmrwallet\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\incubator\\\\WheelPicker\\\\Item.js (27:46)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [itemHeight]);\n  var containerStyle = useMemo(function () {\n    return [{\n      height: itemHeight\n    }, styles.container];\n  }, [itemHeight]);\n  return React.createElement(AnimatedTouchableOpacity, {\n    activeOpacity: 1,\n    style: containerStyle,\n    key: index,\n    centerV: true,\n    centerH: centerH,\n    right: !centerH,\n    onPress: selectItem,\n    index: index,\n    testID: testID,\n    row: true\n  }, React.createElement(AnimatedText, {\n    text60R: true,\n    style: [animatedColorStyle, style, fakeLabel ? styles.textWithLabelPadding : styles.textPadding]\n  }, label), fakeLabel && React.createElement(Text, _extends({\n    \"marginL-s2\": true,\n    \"marginR-s5\": true,\n    text80M: true,\n    color: 'white'\n  }, fakeLabelProps, {\n    style: fakeLabelStyle\n  }), fakeLabel));\n});\nWheelPickerItem.displayName = 'Incubator.WheelPickerItem';\nexport default asBaseComponent(WheelPickerItem);\nvar styles = StyleSheet.create({\n  container: {\n    minWidth: Spacings.s10\n  },\n  textPadding: {\n    paddingHorizontal: Spacings.s5\n  },\n  textWithLabelPadding: {\n    paddingLeft: Spacings.s5\n  }\n});","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/incubator/WheelPicker/Item.js"],"names":["React","useCallback","useMemo","memo","Animated","interpolateColor","useAnimatedStyle","Text","TouchableOpacity","Colors","Spacings","asBaseComponent","AnimatedTouchableOpacity","createAnimatedComponent","AnimatedText","WheelPickerItem","index","label","fakeLabel","fakeLabelStyle","fakeLabelProps","itemHeight","onSelect","offset","activeColor","primary","inactiveColor","grey20","style","testID","centerH","selectItem","itemOffset","animatedColorStyle","color","value","containerStyle","height","styles","container","textWithLabelPadding","textPadding","displayName","StyleSheet","create","minWidth","s10","paddingHorizontal","s5","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, { interpolateColor, useAnimatedStyle } from 'react-native-reanimated';\nimport Text from \"../../components/text\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport { Colors, Spacings } from \"../../../src/style\";\nimport { asBaseComponent } from \"../../commons/new\";\nconst AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\nconst AnimatedText = Animated.createAnimatedComponent(Text);\nconst WheelPickerItem = memo(({\n  index,\n  label,\n  fakeLabel,\n  fakeLabelStyle,\n  fakeLabelProps,\n  itemHeight,\n  onSelect,\n  offset,\n  activeColor = Colors.primary,\n  inactiveColor = Colors.grey20,\n  style,\n  testID,\n  centerH = true\n}) => {\n  const selectItem = useCallback(() => onSelect(index), [index]);\n  const itemOffset = index * itemHeight;\n  const animatedColorStyle = useAnimatedStyle(() => {\n    const color = interpolateColor(offset.value, [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight], [inactiveColor, activeColor, inactiveColor]);\n    return {\n      color\n    };\n  }, [itemHeight]);\n  const containerStyle = useMemo(() => {\n    return [{\n      height: itemHeight\n    }, styles.container];\n  }, [itemHeight]);\n  return <AnimatedTouchableOpacity activeOpacity={1} style={containerStyle} key={index} centerV centerH={centerH} right={!centerH} onPress={selectItem} // @ts-ignore reanimated2\n  index={index} testID={testID} row>\n      <AnimatedText text60R style={[animatedColorStyle, style, fakeLabel ? styles.textWithLabelPadding : styles.textPadding]}>\n        {label}\n      </AnimatedText>\n      {fakeLabel && <Text marginL-s2 marginR-s5 text80M color={'white'} {...fakeLabelProps} style={fakeLabelStyle}>\n          {fakeLabel}\n        </Text>}\n    </AnimatedTouchableOpacity>;\n});\nWheelPickerItem.displayName = 'Incubator.WheelPickerItem';\nexport default asBaseComponent(WheelPickerItem);\nconst styles = StyleSheet.create({\n  container: {\n    minWidth: Spacings.s10\n  },\n  textPadding: {\n    paddingHorizontal: Spacings.s5\n  },\n  textWithLabelPadding: {\n    paddingLeft: Spacings.s5\n  }\n});"]},"metadata":{},"sourceType":"module"}