{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"style\", \"placeholderTextColor\", \"multiline\", \"numberOfLines\", \"expandable\", \"rightIconSource\", \"color\"],\n    _excluded2 = [\"lineHeight\"],\n    _excluded3 = [\"style\", \"iconSource\", \"iconColor\", \"accessibilityLabel\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport RNTextInput from \"react-native-web/dist/exports/TextInput\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport memoize from 'memoize-one';\nimport { Constants } from \"../../helpers\";\nimport { Colors, Typography, Spacings } from \"../../style\";\nimport BaseInput from \"../baseInput\";\nimport Modal from \"../modal\";\nimport TextArea from \"../textArea\";\nimport View from \"../view\";\nimport Image from \"../image\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nvar COLOR_BY_STATE = {\n  default: Colors.grey10,\n  focus: Colors.grey10,\n  error: Colors.grey10,\n  disabled: Colors.grey50\n};\nvar UNDERLINE_COLOR_BY_STATE = {\n  default: Colors.grey50,\n  focus: Colors.primary,\n  error: Colors.red30\n};\nvar PLACEHOLDER_COLOR_BY_STATE = {\n  default: Colors.grey30,\n  focus: Colors.primary\n};\nvar CHAR_COUNTER_COLOR_BY_STATE = {\n  default: Colors.grey30,\n  error: Colors.red30\n};\nvar LABEL_TYPOGRAPHY = Typography.text80;\nvar ICON_SIZE = 24;\nvar ICON_LEFT_PADDING = 6;\nvar FLOATING_PLACEHOLDER_SCALE = 0.875;\n\nvar TextField = function (_BaseInput) {\n  _inherits(TextField, _BaseInput);\n\n  var _super = _createSuper(TextField);\n\n  function TextField(props) {\n    var _this;\n\n    _classCallCheck(this, TextField);\n\n    _this = _super.call(this, props);\n\n    _this.onPlaceholderLayout = function (event) {\n      var width = event.nativeEvent.layout.width;\n      var translate = width / 2 - width * FLOATING_PLACEHOLDER_SCALE / 2;\n\n      _this.setState({\n        floatingPlaceholderTranslate: translate / FLOATING_PLACEHOLDER_SCALE\n      });\n    };\n\n    _this.toggleExpandableModal = function (value) {\n      _this.setState({\n        showExpandableModal: value\n      });\n\n      _.invoke(_this.props, 'onToggleExpandableModal', value);\n    };\n\n    _this.updateFloatingPlaceholderState = function (withoutAnimation) {\n      if (withoutAnimation) {\n        _this.state.floatingPlaceholderState.setValue(_this.shouldFloatPlaceholder() ? 1 : 0);\n      } else {\n        Animated.spring(_this.state.floatingPlaceholderState, {\n          toValue: _this.shouldFloatPlaceholder() ? 1 : 0,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      }\n    };\n\n    _this.getPlaceholderText = memoize(function () {\n      var _this$props = _this.props,\n          placeholder = _this$props.placeholder,\n          helperText = _this$props.helperText;\n      var text = _this.shouldFakePlaceholder() ? _this.shouldShowHelperText() ? helperText : ' ' : _this.shouldShowTopError() && _this.shouldShowHelperText() ? helperText : _this.getRequiredPlaceholder(placeholder);\n      return text;\n    });\n\n    _this.onPressRightButton = function () {\n      _.invoke(_this.props, 'rightButtonProps.onPress');\n    };\n\n    _this.onDoneEditingExpandableInput = function () {\n      var expandableInputValue = _.get(_this.expandableInput, 'state.value');\n\n      _this.setState({\n        value: expandableInputValue\n      });\n\n      _this.state.floatingPlaceholderState.setValue(expandableInputValue ? 1 : 0);\n\n      _.invoke(_this.props, 'onChangeText', expandableInputValue);\n\n      _this.toggleExpandableModal(false);\n    };\n\n    _this.onKeyPress = function (event) {\n      _this.lastKey = event.nativeEvent.key;\n\n      _this.setCharCountColor(_this.lastKey);\n\n      _.invoke(_this.props, 'onKeyPress', event);\n    };\n\n    _this.onChangeText = function (text) {\n      if (text === '' && _this.lastKey && _this.lastKey !== Constants.backspaceKey) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          transformer = _this$props2.transformer,\n          validateOnChange = _this$props2.validateOnChange;\n      var transformedText = text;\n\n      if (_.isFunction(transformer)) {\n        transformedText = transformer(text);\n      }\n\n      _.invoke(_this.props, 'onChangeText', transformedText);\n\n      _this.setState({\n        value: transformedText\n      }, function () {\n        if (validateOnChange) {\n          setImmediate(_this.validate);\n        }\n      });\n    };\n\n    _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n      value: props.value,\n      floatingPlaceholderState: new Animated.Value(_this.shouldFloatPlaceholder(props.value) ? 1 : 0),\n      showExpandableModal: false,\n      floatingPlaceholderTranslate: 0,\n      charCountColor: CHAR_COUNTER_COLOR_BY_STATE.default\n    });\n\n    _this.generatePropsWarnings(props);\n\n    return _this;\n  }\n\n  _createClass(TextField, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        }, function () {\n          _this2.updateFloatingPlaceholderState();\n\n          if (nextProps.validateOnChange) {\n            _this2.validate();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      if (_.isEmpty(prevState.value) !== _.isEmpty(this.state.value) || prevState.focused !== this.state.focused) {\n        this.updateFloatingPlaceholderState();\n      }\n    }\n  }, {\n    key: \"generatePropsWarnings\",\n    value: function generatePropsWarnings(props) {\n      if (props.maxLength === 0) {\n        console.warn('Setting maxLength to zero will block typing in this input');\n      }\n\n      if (props.showCharacterCounter && !props.maxLength) {\n        console.warn('In order to use showCharacterCount please pass \\'maxLength\\' prop');\n      }\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.getThemeProps(), this.getTopPaddings());\n    }\n  }, {\n    key: \"getAccessibilityInfo\",\n    value: function getAccessibilityInfo() {\n      var _this$getThemeProps = this.getThemeProps(),\n          floatingPlaceholder = _this$getThemeProps.floatingPlaceholder,\n          placeholder = _this$getThemeProps.placeholder;\n\n      var accessibilityState = this.isDisabled() ? {\n        disabled: true\n      } : undefined;\n      var accessibilityLabel = floatingPlaceholder ? this.props.accessibilityLabel || placeholder : '';\n\n      if (this.isRequiredField()) {\n        accessibilityLabel = accessibilityLabel + \". Mandatory\";\n      }\n\n      return {\n        accessibilityLabel: accessibilityLabel,\n        accessibilityState: Constants.isIOS ? accessibilityState : undefined\n      };\n    }\n  }, {\n    key: \"getStateColor\",\n    value: function getStateColor() {\n      var colorProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var focused = this.state.focused;\n      var error = this.getErrorMessage();\n\n      var _this$getThemeProps2 = this.getThemeProps(),\n          disabledColor = _this$getThemeProps2.disabledColor;\n\n      if (_.isString(colorProp)) {\n        return colorProp || Colors.grey10;\n      } else if (_.isPlainObject(colorProp)) {\n        var mergedColorState = _objectSpread(_objectSpread({}, COLOR_BY_STATE), colorProp);\n\n        if (this.isDisabled()) {\n          return disabledColor || mergedColorState.disabled;\n        } else if (error) {\n          return mergedColorState.error;\n        } else if (focused) {\n          return mergedColorState.focus;\n        } else {\n          return mergedColorState.default;\n        }\n      }\n\n      return colorProp || Colors.grey10;\n    }\n  }, {\n    key: \"getCharCount\",\n    value: function getCharCount() {\n      var value = this.state.value;\n\n      if (value) {\n        return value.length;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"setCharCountColor\",\n    value: function setCharCountColor(key) {\n      this.maxReached = key === Constants.backspaceKey ? false : this.isCounterLimit();\n      var color = this.state.focused && this.maxReached ? CHAR_COUNTER_COLOR_BY_STATE.error : CHAR_COUNTER_COLOR_BY_STATE.default;\n\n      if (color !== this.state.charCountColor) {\n        this.setState({\n          charCountColor: color\n        });\n      }\n    }\n  }, {\n    key: \"getCharCountColor\",\n    value: function getCharCountColor() {\n      var charCountColor = this.state.charCountColor;\n\n      var _this$getThemeProps3 = this.getThemeProps(),\n          disabledColor = _this$getThemeProps3.disabledColor;\n\n      return this.isDisabled() && disabledColor ? disabledColor : charCountColor;\n    }\n  }, {\n    key: \"getTopPaddings\",\n    value: function getTopPaddings() {\n      return this.shouldFakePlaceholder() ? this.shouldShowTopError() ? undefined : 25 : undefined;\n    }\n  }, {\n    key: \"getTopErrorsPosition\",\n    value: function getTopErrorsPosition() {\n      return !this.props.title && this.shouldShowTopError() ? {\n        top: Constants.isIOS ? -25 : -27\n      } : undefined;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return this.props.editable === false;\n    }\n  }, {\n    key: \"isCounterLimit\",\n    value: function isCounterLimit() {\n      var _this$getThemeProps4 = this.getThemeProps(),\n          maxLength = _this$getThemeProps4.maxLength;\n\n      var counter = this.getCharCount();\n      return counter === 0 ? false : maxLength <= counter;\n    }\n  }, {\n    key: \"hasText\",\n    value: function hasText(value) {\n      return !_.isEmpty(value || this.state.value);\n    }\n  }, {\n    key: \"shouldShowHelperText\",\n    value: function shouldShowHelperText() {\n      var focused = this.state.focused;\n      var helperText = this.props.helperText;\n      return focused && helperText;\n    }\n  }, {\n    key: \"shouldFloatOnFocus\",\n    value: function shouldFloatOnFocus() {\n      var focused = this.state.focused;\n\n      var _this$getThemeProps5 = this.getThemeProps(),\n          floatOnFocus = _this$getThemeProps5.floatOnFocus;\n\n      return focused && floatOnFocus;\n    }\n  }, {\n    key: \"shouldFloatPlaceholder\",\n    value: function shouldFloatPlaceholder(text) {\n      return this.hasText(text) || this.shouldShowHelperText() || this.shouldFloatOnFocus();\n    }\n  }, {\n    key: \"shouldFakePlaceholder\",\n    value: function shouldFakePlaceholder() {\n      var _this$getThemeProps6 = this.getThemeProps(),\n          floatingPlaceholder = _this$getThemeProps6.floatingPlaceholder,\n          centered = _this$getThemeProps6.centered,\n          leadingIcon = _this$getThemeProps6.leadingIcon,\n          prefix = _this$getThemeProps6.prefix;\n\n      return !leadingIcon && !prefix && Boolean(floatingPlaceholder && !centered && !this.shouldShowTopError());\n    }\n  }, {\n    key: \"shouldShowError\",\n    value: function shouldShowError() {\n      var _this$getThemeProps7 = this.getThemeProps(),\n          enableErrors = _this$getThemeProps7.enableErrors;\n\n      var error = this.getErrorMessage();\n      return enableErrors && error;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function getErrorMessage() {\n      var _this$props3, _this$state;\n\n      return ((_this$props3 = this.props) == null ? void 0 : _this$props3.error) || ((_this$state = this.state) == null ? void 0 : _this$state.error);\n    }\n  }, {\n    key: \"shouldShowTopError\",\n    value: function shouldShowTopError() {\n      var _this$getThemeProps8 = this.getThemeProps(),\n          useTopErrors = _this$getThemeProps8.useTopErrors;\n\n      return this.shouldShowError() && useTopErrors;\n    }\n  }, {\n    key: \"shouldDisplayRightButton\",\n    value: function shouldDisplayRightButton() {\n      var _this$getThemeProps9 = this.getThemeProps(),\n          rightButtonProps = _this$getThemeProps9.rightButtonProps,\n          expandable = _this$getThemeProps9.expandable;\n\n      return !expandable && rightButtonProps && rightButtonProps.iconSource;\n    }\n  }, {\n    key: \"shouldRenderTitle\",\n    value: function shouldRenderTitle() {\n      var _this$getThemeProps10 = this.getThemeProps(),\n          floatingPlaceholder = _this$getThemeProps10.floatingPlaceholder,\n          title = _this$getThemeProps10.title;\n\n      return !floatingPlaceholder && title;\n    }\n  }, {\n    key: \"renderPlaceholder\",\n    value: function renderPlaceholder() {\n      var _this$state2 = this.state,\n          floatingPlaceholderState = _this$state2.floatingPlaceholderState,\n          floatingPlaceholderTranslate = _this$state2.floatingPlaceholderTranslate;\n\n      var _this$getThemeProps11 = this.getThemeProps(),\n          placeholder = _this$getThemeProps11.placeholder,\n          placeholderTextColor = _this$getThemeProps11.placeholderTextColor,\n          floatingPlaceholderColor = _this$getThemeProps11.floatingPlaceholderColor,\n          floatingPlaceholderStyle = _this$getThemeProps11.floatingPlaceholderStyle;\n\n      var typography = this.getTypography();\n      var placeholderColor = this.getStateColor(placeholderTextColor || PLACEHOLDER_COLOR_BY_STATE.default);\n\n      if (this.shouldFakePlaceholder()) {\n        return React.createElement(View, {\n          absF: true,\n          left: true\n        }, React.createElement(Animated.Text, {\n          pointerEvents: \"none\",\n          numberOfLines: 1,\n          suppressHighlighting: true,\n          accessible: false,\n          onLayout: this.onPlaceholderLayout,\n          style: [this.styles.placeholder, this.getTopErrorsPosition(), typography, {\n            lineHeight: undefined\n          }, {\n            transform: [{\n              scale: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, FLOATING_PLACEHOLDER_SCALE]\n              })\n            }, {\n              translateY: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [25, 0]\n              })\n            }, {\n              translateX: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, -floatingPlaceholderTranslate]\n              })\n            }],\n            color: this.shouldFloatPlaceholder() ? this.getStateColor(floatingPlaceholderColor || PLACEHOLDER_COLOR_BY_STATE) : placeholderColor\n          }, floatingPlaceholderStyle]\n        }, this.getRequiredPlaceholder(placeholder)));\n      }\n    }\n  }, {\n    key: \"renderPrefix\",\n    value: function renderPrefix() {\n      var _this$props4 = this.props,\n          prefix = _this$props4.prefix,\n          prefixStyle = _this$props4.prefixStyle;\n\n      if (prefix) {\n        var typography = this.getTypography();\n        return React.createElement(Text, {\n          style: [this.styles.prefix, typography, {\n            lineHeight: undefined\n          }, prefixStyle]\n        }, prefix);\n      }\n    }\n  }, {\n    key: \"renderTitle\",\n    value: function renderTitle() {\n      var _this$getThemeProps12 = this.getThemeProps(),\n          title = _this$getThemeProps12.title,\n          titleColor = _this$getThemeProps12.titleColor,\n          titleStyle = _this$getThemeProps12.titleStyle;\n\n      var color = this.getStateColor(titleColor || PLACEHOLDER_COLOR_BY_STATE);\n\n      if (this.shouldRenderTitle()) {\n        return React.createElement(Text, {\n          style: [{\n            color: color\n          }, this.styles.topLabel, this.styles.label, titleStyle]\n        }, title);\n      }\n    }\n  }, {\n    key: \"renderCharCounter\",\n    value: function renderCharCounter() {\n      var _this$getThemeProps13 = this.getThemeProps(),\n          maxLength = _this$getThemeProps13.maxLength,\n          showCharacterCounter = _this$getThemeProps13.showCharacterCounter;\n\n      if (maxLength && showCharacterCounter) {\n        var counter = this.getCharCount();\n        var color = this.getCharCountColor();\n        return React.createElement(Text, {\n          style: [{\n            color: color\n          }, this.styles.bottomLabel, this.styles.label],\n          accessibilityLabel: counter + \" out of \" + maxLength + \" max characters\"\n        }, counter, \" / \", maxLength);\n      }\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError(visible) {\n      var _this$getThemeProps14 = this.getThemeProps(),\n          enableErrors = _this$getThemeProps14.enableErrors,\n          useTopErrors = _this$getThemeProps14.useTopErrors,\n          errorColor = _this$getThemeProps14.errorColor;\n\n      var textColor = errorColor ? {\n        color: errorColor\n      } : undefined;\n      var positionStyle = useTopErrors ? this.styles.topLabel : this.styles.bottomLabel;\n      var error = this.getErrorMessage();\n\n      if (visible && enableErrors) {\n        return React.createElement(Text, {\n          style: [this.styles.errorMessage, this.styles.label, positionStyle, textColor],\n          accessible: !_.isEmpty(error) && !useTopErrors\n        }, error);\n      }\n    }\n  }, {\n    key: \"renderExpandableModal\",\n    value: function renderExpandableModal() {\n      var _this3 = this;\n\n      var _this$getThemeProps15 = this.getThemeProps(),\n          renderExpandable = _this$getThemeProps15.renderExpandable,\n          topBarProps = _this$getThemeProps15.topBarProps;\n\n      var showExpandableModal = this.state.showExpandableModal;\n\n      if (_.isFunction(renderExpandable) && showExpandableModal) {\n        return renderExpandable(this.getThemeProps(), this.state);\n      }\n\n      var textInputProps = TextField.extractOwnProps(this.props, ['error', 'testID']);\n      return React.createElement(Modal, {\n        animationType: 'slide',\n        visible: showExpandableModal,\n        onRequestClose: function onRequestClose() {\n          return _this3.toggleExpandableModal(false);\n        }\n      }, React.createElement(Modal.TopBar, _extends({}, topBarProps, {\n        onCancel: function onCancel() {\n          return _this3.toggleExpandableModal(false);\n        },\n        onDone: this.onDoneEditingExpandableInput\n      })), React.createElement(View, {\n        style: this.styles.expandableModalContent\n      }, React.createElement(TextArea, _extends({\n        ref: function ref(textarea) {\n          _this3.expandableInput = textarea;\n        }\n      }, textInputProps, {\n        value: this.state.value\n      }))));\n    }\n  }, {\n    key: \"renderExpandableInput\",\n    value: function renderExpandableInput() {\n      var _this4 = this;\n\n      var _this$getThemeProps16 = this.getThemeProps(),\n          renderExpandableInput = _this$getThemeProps16.renderExpandableInput,\n          testID = _this$getThemeProps16.testID;\n\n      if (_.isFunction(renderExpandableInput)) {\n        return renderExpandableInput(this.getThemeProps(), this.toggleExpandableModal);\n      }\n\n      return React.createElement(TouchableOpacity, _extends({\n        style: this.styles.expandableInput,\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return !_this4.isDisabled() && _this4.toggleExpandableModal(true);\n        },\n        testID: testID + \".expandable\"\n      }, this.getAccessibilityInfo()), this.renderTextInput());\n    }\n  }, {\n    key: \"renderTextInput\",\n    value: function renderTextInput() {\n      var _this5 = this;\n\n      var value = this.state.value;\n\n      var _this$getThemeProps17 = this.getThemeProps(),\n          style = _this$getThemeProps17.style,\n          placeholderTextColor = _this$getThemeProps17.placeholderTextColor,\n          multiline = _this$getThemeProps17.multiline,\n          numberOfLines = _this$getThemeProps17.numberOfLines,\n          expandable = _this$getThemeProps17.expandable,\n          rightIconSource = _this$getThemeProps17.rightIconSource,\n          color = _this$getThemeProps17.color,\n          others = _objectWithoutProperties(_this$getThemeProps17, _excluded);\n\n      var typography = this.getTypography();\n\n      var lineHeight = typography.lineHeight,\n          typographyStyle = _objectWithoutProperties(typography, _excluded2);\n\n      var textColor = this.getStateColor(color || this.extractColorValue());\n      var hasRightElement = this.shouldDisplayRightButton() || rightIconSource;\n      var shouldUseMultiline = multiline;\n      var inputStyle = [hasRightElement && this.styles.rightElement, this.styles.input, _objectSpread({}, typographyStyle), expandable && {\n        maxHeight: lineHeight * (Constants.isAndroid ? 3 : 3.3)\n      }, Constants.isRTL && {\n        minHeight: lineHeight + 3\n      }, Constants.isIOS && shouldUseMultiline && {\n        paddingTop: 0\n      }, {\n        color: textColor\n      }, style];\n      var placeholderText = this.getPlaceholderText();\n      var placeholderColor = this.getStateColor(placeholderTextColor || PLACEHOLDER_COLOR_BY_STATE.default);\n      var isEditable = !this.isDisabled() && !expandable;\n      return React.createElement(RNTextInput, _extends({}, this.getAccessibilityInfo(), {\n        pointerEvents: expandable ? 'none' : undefined\n      }, others, {\n        value: value,\n        placeholder: placeholderText,\n        placeholderTextColor: placeholderColor,\n        underlineColorAndroid: \"transparent\",\n        style: inputStyle,\n        multiline: shouldUseMultiline,\n        numberOfLines: numberOfLines,\n        onKeyPress: this.onKeyPress,\n        onChangeText: this.onChangeText,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        ref: function ref(input) {\n          _this5.input = input;\n        },\n        editable: isEditable\n      }));\n    }\n  }, {\n    key: \"renderRightButton\",\n    value: function renderRightButton() {\n      if (this.shouldDisplayRightButton()) {\n        var _this$getThemeProps18 = this.getThemeProps(),\n            rightButtonProps = _this$getThemeProps18.rightButtonProps;\n\n        var style = rightButtonProps.style,\n            iconSource = rightButtonProps.iconSource,\n            iconColor = rightButtonProps.iconColor,\n            accessibilityLabel = rightButtonProps.accessibilityLabel,\n            others = _objectWithoutProperties(rightButtonProps, _excluded3);\n\n        return React.createElement(TouchableOpacity, _extends({}, others, {\n          accessibilityLabel: accessibilityLabel,\n          style: [this.styles.rightButton, this.getTopErrorsPosition(), style],\n          onPress: this.onPressRightButton\n        }), React.createElement(Image, {\n          pointerEvents: \"none\",\n          source: iconSource,\n          resizeMode: 'contain',\n          style: [this.styles.rightButtonImage, {\n            tintColor: iconColor || Colors.primary\n          }]\n        }));\n      }\n    }\n  }, {\n    key: \"renderRightIcon\",\n    value: function renderRightIcon() {\n      var _this$getThemeProps19 = this.getThemeProps(),\n          rightIconSource = _this$getThemeProps19.rightIconSource,\n          rightIconStyle = _this$getThemeProps19.rightIconStyle;\n\n      if (rightIconSource) {\n        return React.createElement(View, {\n          style: [this.styles.rightButton, this.getTopErrorsPosition()],\n          pointerEvents: \"none\"\n        }, React.createElement(Image, {\n          source: rightIconSource,\n          resizeMode: 'center',\n          style: [this.styles.rightButtonImage, rightIconStyle]\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getThemeProps20 = this.getThemeProps(),\n          expandable = _this$getThemeProps20.expandable,\n          containerStyle = _this$getThemeProps20.containerStyle,\n          underlineColor = _this$getThemeProps20.underlineColor,\n          useTopErrors = _this$getThemeProps20.useTopErrors,\n          hideUnderline = _this$getThemeProps20.hideUnderline,\n          leadingIcon = _this$getThemeProps20.leadingIcon;\n\n      var underlineStateColor = this.getStateColor(underlineColor || UNDERLINE_COLOR_BY_STATE);\n      return React.createElement(View, {\n        style: [this.styles.container, containerStyle],\n        collapsable: false\n      }, this.shouldShowTopError() ? this.renderError(useTopErrors) : this.renderTitle(), React.createElement(View, {\n        style: [this.styles.innerContainer, hideUnderline && this.styles.innerContainerWithoutUnderline, {\n          borderColor: underlineStateColor\n        }, {\n          paddingTop: this.getTopPaddings()\n        }]\n      }, leadingIcon && React.createElement(Image, _extends({}, leadingIcon, {\n        style: [this.styles.leadingIcon, leadingIcon.style]\n      })), this.renderPrefix(), this.renderPlaceholder(), expandable ? this.renderExpandableInput() : this.renderTextInput(), this.renderRightButton(), this.renderRightIcon(), expandable && this.renderExpandableModal()), !_.isUndefined(this.getErrorMessage()) && useTopErrors && React.createElement(View, {\n        style: this.styles.accessibilityDummyErrorMessage,\n        accessible: true,\n        accessibilityLabel: this.getErrorMessage()\n      }), React.createElement(View, {\n        row: true\n      }, React.createElement(View, {\n        flex: true\n      }, this.renderError(!useTopErrors)), this.renderCharCounter()));\n    }\n  }]);\n\n  return TextField;\n}(BaseInput);\n\nTextField.displayName = 'TextField';\nTextField.propTypes = _objectSpread(_objectSpread(_objectSpread({}, RNTextInput.propTypes), BaseInput.propTypes), {}, {\n  floatingPlaceholder: PropTypes.bool,\n  floatingPlaceholderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  floatingPlaceholderStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  helperText: PropTypes.string,\n  hideUnderline: PropTypes.bool,\n  underlineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  disabledColor: PropTypes.string,\n  centered: PropTypes.bool,\n  error: PropTypes.string,\n  enableErrors: PropTypes.bool,\n  errorColor: PropTypes.string,\n  expandable: PropTypes.bool,\n  renderExpandableInput: PropTypes.elementType,\n  renderExpandable: PropTypes.elementType,\n  onToggleExpandableModal: PropTypes.func,\n  topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n  transformer: PropTypes.func,\n  prefix: PropTypes.string,\n  prefixStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  title: PropTypes.string,\n  titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  titleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  showCharacterCounter: PropTypes.bool,\n  floatOnFocus: PropTypes.bool,\n  useTopErrors: PropTypes.bool,\n  rightIconSource: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  rightIconStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  rightButtonProps: PropTypes.shape({\n    iconSource: RNImage.propTypes.source,\n    iconColor: PropTypes.string,\n    onPress: PropTypes.func,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    accessibilityLabel: PropTypes.string\n  }),\n  leadingIcon: PropTypes.shape(Image.propTypes)\n});\nTextField.defaultProps = {\n  enableErrors: true,\n  validateOnBlur: true\n};\nexport { TextField as default };\n\nfunction createStyles(_ref) {\n  var centered = _ref.centered,\n      multiline = _ref.multiline;\n  var rightItemTopPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var itemTopPadding = Constants.isIOS ? rightItemTopPadding - 3 : rightItemTopPadding - 1;\n  return StyleSheet.create({\n    container: {},\n    innerContainer: {\n      flexDirection: 'row',\n      justifyContent: centered ? 'center' : undefined,\n      borderBottomWidth: 1,\n      borderColor: Colors.grey70,\n      paddingBottom: Constants.isIOS ? 10 : 5\n    },\n    innerContainerWithoutUnderline: {\n      borderBottomWidth: 0,\n      paddingBottom: 0\n    },\n    input: {\n      flexGrow: 1,\n      textAlign: centered ? 'center' : Constants.isRTL ? 'right' : 'left',\n      backgroundColor: 'transparent',\n      padding: 0,\n      borderColor: 'transparent',\n      borderWidth: Constants.isAndroid ? 1 : undefined\n    },\n    expandableInput: {\n      flexGrow: 1,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    expandableModalContent: {\n      flex: 1,\n      paddingTop: 15,\n      paddingHorizontal: 20\n    },\n    prefix: {\n      color: Colors.grey30,\n      marginRight: Spacings.s1,\n      textAlignVertical: 'center'\n    },\n    placeholder: {\n      textAlign: 'left'\n    },\n    errorMessage: {\n      color: Colors.red30,\n      textAlign: centered ? 'center' : 'left'\n    },\n    topLabel: {\n      marginBottom: Constants.isIOS ? multiline ? 1 : 5 : 7\n    },\n    bottomLabel: {\n      marginTop: 9\n    },\n    label: _objectSpread(_objectSpread({}, LABEL_TYPOGRAPHY), {}, {\n      height: LABEL_TYPOGRAPHY.lineHeight\n    }),\n    rightElement: {\n      paddingRight: ICON_SIZE + ICON_LEFT_PADDING\n    },\n    rightButton: {\n      position: 'absolute',\n      right: 0,\n      alignSelf: 'flex-start',\n      paddingTop: itemTopPadding\n    },\n    rightButtonImage: {\n      width: ICON_SIZE,\n      height: ICON_SIZE\n    },\n    leadingIcon: {\n      alignSelf: 'center'\n    },\n    accessibilityDummyErrorMessage: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: 1,\n      height: 1\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/textField/index.js"],"names":["_","PropTypes","React","memoize","Constants","Colors","Typography","Spacings","BaseInput","Modal","TextArea","View","Image","Text","TouchableOpacity","COLOR_BY_STATE","default","grey10","focus","error","disabled","grey50","UNDERLINE_COLOR_BY_STATE","primary","red30","PLACEHOLDER_COLOR_BY_STATE","grey30","CHAR_COUNTER_COLOR_BY_STATE","LABEL_TYPOGRAPHY","text80","ICON_SIZE","ICON_LEFT_PADDING","FLOATING_PLACEHOLDER_SCALE","TextField","props","onPlaceholderLayout","event","width","nativeEvent","layout","translate","setState","floatingPlaceholderTranslate","toggleExpandableModal","value","showExpandableModal","invoke","updateFloatingPlaceholderState","withoutAnimation","state","floatingPlaceholderState","setValue","shouldFloatPlaceholder","Animated","spring","toValue","duration","useNativeDriver","start","getPlaceholderText","placeholder","helperText","text","shouldFakePlaceholder","shouldShowHelperText","shouldShowTopError","getRequiredPlaceholder","onPressRightButton","onDoneEditingExpandableInput","expandableInputValue","get","expandableInput","onKeyPress","lastKey","key","setCharCountColor","onChangeText","backspaceKey","transformer","validateOnChange","transformedText","isFunction","setImmediate","validate","Value","charCountColor","generatePropsWarnings","nextProps","_prevProps","prevState","isEmpty","focused","maxLength","console","warn","showCharacterCounter","styles","createStyles","getThemeProps","getTopPaddings","floatingPlaceholder","accessibilityState","isDisabled","undefined","accessibilityLabel","isRequiredField","isIOS","colorProp","getErrorMessage","disabledColor","isString","isPlainObject","mergedColorState","length","maxReached","isCounterLimit","color","title","top","editable","counter","getCharCount","floatOnFocus","hasText","shouldFloatOnFocus","centered","leadingIcon","prefix","Boolean","enableErrors","useTopErrors","shouldShowError","rightButtonProps","expandable","iconSource","placeholderTextColor","floatingPlaceholderColor","floatingPlaceholderStyle","typography","getTypography","placeholderColor","getStateColor","getTopErrorsPosition","lineHeight","transform","scale","interpolate","inputRange","outputRange","translateY","translateX","prefixStyle","titleColor","titleStyle","shouldRenderTitle","topLabel","label","getCharCountColor","bottomLabel","visible","errorColor","textColor","positionStyle","errorMessage","renderExpandable","topBarProps","textInputProps","extractOwnProps","expandableModalContent","textarea","renderExpandableInput","testID","getAccessibilityInfo","renderTextInput","style","multiline","numberOfLines","rightIconSource","others","typographyStyle","extractColorValue","hasRightElement","shouldDisplayRightButton","shouldUseMultiline","inputStyle","rightElement","input","maxHeight","isAndroid","isRTL","minHeight","paddingTop","placeholderText","isEditable","onChange","onFocus","onBlur","iconColor","rightButton","rightButtonImage","tintColor","rightIconStyle","containerStyle","underlineColor","hideUnderline","underlineStateColor","container","renderError","renderTitle","innerContainer","innerContainerWithoutUnderline","borderColor","renderPrefix","renderPlaceholder","renderRightButton","renderRightIcon","renderExpandableModal","isUndefined","accessibilityDummyErrorMessage","renderCharCounter","displayName","propTypes","RNTextInput","bool","oneOfType","string","object","number","array","elementType","onToggleExpandableModal","func","shape","TopBar","RNImage","source","onPress","defaultProps","validateOnBlur","rightItemTopPadding","itemTopPadding","StyleSheet","create","flexDirection","justifyContent","borderBottomWidth","grey70","paddingBottom","flexGrow","textAlign","backgroundColor","padding","borderWidth","alignItems","flex","paddingHorizontal","marginRight","s1","textAlignVertical","marginBottom","marginTop","height","paddingRight","position","right","alignSelf","bottom","left"],"mappings":";;;;;;;;;;;;;;;;;;;;AAMA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,SAAR;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA4BC,QAA5B;AACA,OAAOC,SAAP;AACA,OAAOC,KAAP;AACA,OAAOC,QAAP;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,IAAP;AACA,OAAOC,gBAAP;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEX,MAAM,CAACY,MADK;AAErBC,EAAAA,KAAK,EAAEb,MAAM,CAACY,MAFO;AAGrBE,EAAAA,KAAK,EAAEd,MAAM,CAACY,MAHO;AAIrBG,EAAAA,QAAQ,EAAEf,MAAM,CAACgB;AAJI,CAAvB;AAMA,IAAMC,wBAAwB,GAAG;AAC/BN,EAAAA,OAAO,EAAEX,MAAM,CAACgB,MADe;AAE/BH,EAAAA,KAAK,EAAEb,MAAM,CAACkB,OAFiB;AAG/BJ,EAAAA,KAAK,EAAEd,MAAM,CAACmB;AAHiB,CAAjC;AAKA,IAAMC,0BAA0B,GAAG;AACjCT,EAAAA,OAAO,EAAEX,MAAM,CAACqB,MADiB;AAEjCR,EAAAA,KAAK,EAAEb,MAAM,CAACkB;AAFmB,CAAnC;AAIA,IAAMI,2BAA2B,GAAG;AAClCX,EAAAA,OAAO,EAAEX,MAAM,CAACqB,MADkB;AAElCP,EAAAA,KAAK,EAAEd,MAAM,CAACmB;AAFoB,CAApC;AAKA,IAAMI,gBAAgB,GAAGtB,UAAU,CAACuB,MAApC;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA,IAAMC,0BAA0B,GAAG,KAAnC;;IAUqBC,S;;;;;AA0InB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAgCnBC,mBAhCmB,GAgCG,UAACC,KAAD,EAAW;AAC/B,UAAOC,KAAP,GAAgBD,KAAK,CAACE,WAAN,CAAkBC,MAAlC,CAAOF,KAAP;AACA,UAAMG,SAAS,GAAGH,KAAK,GAAG,CAAR,GAAaA,KAAK,GAAGL,0BAAT,GAAuC,CAArE;;AACA,YAAKS,QAAL,CAAc;AAACC,QAAAA,4BAA4B,EAAEF,SAAS,GAAGR;AAA3C,OAAd;AACD,KApCkB;;AAAA,UAoEnBW,qBApEmB,GAoEK,UAACC,KAAD,EAAW;AACjC,YAAKH,QAAL,CAAc;AAACI,QAAAA,mBAAmB,EAAED;AAAtB,OAAd;;AACA5C,MAAAA,CAAC,CAAC8C,MAAF,CAAS,MAAKZ,KAAd,EAAqB,yBAArB,EAAgDU,KAAhD;AACD,KAvEkB;;AAAA,UAyEnBG,8BAzEmB,GAyEc,UAAAC,gBAAgB,EAAI;AACnD,UAAIA,gBAAJ,EAAsB;AACpB,cAAKC,KAAL,CAAWC,wBAAX,CAAoCC,QAApC,CAA6C,MAAKC,sBAAL,KAAgC,CAAhC,GAAoC,CAAjF;AACD,OAFD,MAEO;AACLC,QAAAA,QAAQ,CAACC,MAAT,CAAgB,MAAKL,KAAL,CAAWC,wBAA3B,EAAqD;AACnDK,UAAAA,OAAO,EAAE,MAAKH,sBAAL,KAAgC,CAAhC,GAAoC,CADM;AAEnDI,UAAAA,QAAQ,EAAE,GAFyC;AAGnDC,UAAAA,eAAe,EAAE;AAHkC,SAArD,EAIGC,KAJH;AAKD;AACF,KAnFkB;;AAAA,UAqFnBC,kBArFmB,GAqFExD,OAAO,CAAC,YAAM;AAEjC,wBAAkC,MAAK+B,KAAvC;AAAA,UAAO0B,WAAP,eAAOA,WAAP;AAAA,UAAoBC,UAApB,eAAoBA,UAApB;AACA,UAAMC,IAAI,GAAG,MAAKC,qBAAL,KACT,MAAKC,oBAAL,KACEH,UADF,GAEE,GAHO,GAIT,MAAKI,kBAAL,MAA6B,MAAKD,oBAAL,EAA7B,GACEH,UADF,GAEE,MAAKK,sBAAL,CAA4BN,WAA5B,CANN;AAOA,aAAOE,IAAP;AACD,KAX2B,CArFT;;AAAA,UAyNnBK,kBAzNmB,GAyNE,YAAM;AACzBnE,MAAAA,CAAC,CAAC8C,MAAF,CAAS,MAAKZ,KAAd,EAAqB,0BAArB;AACD,KA3NkB;;AAAA,UA4gBnBkC,4BA5gBmB,GA4gBY,YAAM;AACnC,UAAMC,oBAAoB,GAAGrE,CAAC,CAACsE,GAAF,CAAM,MAAKC,eAAX,EAA4B,aAA5B,CAA7B;;AACA,YAAK9B,QAAL,CAAc;AAACG,QAAAA,KAAK,EAAEyB;AAAR,OAAd;;AACA,YAAKpB,KAAL,CAAWC,wBAAX,CAAoCC,QAApC,CAA6CkB,oBAAoB,GAAG,CAAH,GAAO,CAAxE;;AACArE,MAAAA,CAAC,CAAC8C,MAAF,CAAS,MAAKZ,KAAd,EAAqB,cAArB,EAAqCmC,oBAArC;;AACA,YAAK1B,qBAAL,CAA2B,KAA3B;AACD,KAlhBkB;;AAAA,UAohBnB6B,UAphBmB,GAohBN,UAAApC,KAAK,EAAI;AACpB,YAAKqC,OAAL,GAAerC,KAAK,CAACE,WAAN,CAAkBoC,GAAjC;;AACA,YAAKC,iBAAL,CAAuB,MAAKF,OAA5B;;AACAzE,MAAAA,CAAC,CAAC8C,MAAF,CAAS,MAAKZ,KAAd,EAAqB,YAArB,EAAmCE,KAAnC;AACD,KAxhBkB;;AAAA,UA0hBnBwC,YA1hBmB,GA0hBJ,UAAAd,IAAI,EAAI;AAGrB,UAAIA,IAAI,KAAK,EAAT,IAAe,MAAKW,OAApB,IAA+B,MAAKA,OAAL,KAAiBrE,SAAS,CAACyE,YAA9D,EAA4E;AAC1E;AACD;;AAED,yBAAwC,MAAK3C,KAA7C;AAAA,UAAO4C,WAAP,gBAAOA,WAAP;AAAA,UAAoBC,gBAApB,gBAAoBA,gBAApB;AACA,UAAIC,eAAe,GAAGlB,IAAtB;;AACA,UAAI9D,CAAC,CAACiF,UAAF,CAAaH,WAAb,CAAJ,EAA+B;AAC7BE,QAAAA,eAAe,GAAGF,WAAW,CAAChB,IAAD,CAA7B;AACD;;AAED9D,MAAAA,CAAC,CAAC8C,MAAF,CAAS,MAAKZ,KAAd,EAAqB,cAArB,EAAqC8C,eAArC;;AACA,YAAKvC,QAAL,CAAc;AAACG,QAAAA,KAAK,EAAEoC;AAAR,OAAd,EAAwC,YAAM;AAC5C,YAAID,gBAAJ,EAAsB;AACpBG,UAAAA,YAAY,CAAC,MAAKC,QAAN,CAAZ;AACD;AACF,OAJD;AAKD,KA7iBkB;;AAGjB,UAAKlC,KAAL,mCACK,MAAKA,KADV;AAEEL,MAAAA,KAAK,EAAEV,KAAK,CAACU,KAFf;AAGEM,MAAAA,wBAAwB,EAAE,IAAIG,QAAQ,CAAC+B,KAAb,CAAmB,MAAKhC,sBAAL,CAA4BlB,KAAK,CAACU,KAAlC,IAA2C,CAA3C,GAA+C,CAAlE,CAH5B;AAIEC,MAAAA,mBAAmB,EAAE,KAJvB;AAKEH,MAAAA,4BAA4B,EAAE,CALhC;AAME2C,MAAAA,cAAc,EAAE1D,2BAA2B,CAACX;AAN9C;;AASA,UAAKsE,qBAAL,CAA2BpD,KAA3B;;AAZiB;AAalB;;;;WAED,0CAAiCqD,SAAjC,EAA4C;AAAA;;AAC1C,UAAIA,SAAS,CAAC3C,KAAV,KAAoB,KAAKV,KAAL,CAAWU,KAAnC,EAA0C;AACxC,aAAKH,QAAL,CAAc;AAACG,UAAAA,KAAK,EAAE2C,SAAS,CAAC3C;AAAlB,SAAd,EAAwC,YAAM;AAC5C,UAAA,MAAI,CAACG,8BAAL;;AACA,cAAIwC,SAAS,CAACR,gBAAd,EAAgC;AAC9B,YAAA,MAAI,CAACI,QAAL;AACD;AACF,SALD;AAMD;AACF;;;WAED,4BAAmBK,UAAnB,EAA+BC,SAA/B,EAA0C;AACxC,UAAIzF,CAAC,CAAC0F,OAAF,CAAUD,SAAS,CAAC7C,KAApB,MAA+B5C,CAAC,CAAC0F,OAAF,CAAU,KAAKzC,KAAL,CAAWL,KAArB,CAA/B,IAA8D6C,SAAS,CAACE,OAAV,KAAsB,KAAK1C,KAAL,CAAW0C,OAAnG,EAA4G;AAC1G,aAAK5C,8BAAL;AACD;AACF;;;WASD,+BAAsBb,KAAtB,EAA6B;AAC3B,UAAIA,KAAK,CAAC0D,SAAN,KAAoB,CAAxB,EAA2B;AACzBC,QAAAA,OAAO,CAACC,IAAR,CAAa,2DAAb;AACD;;AACD,UAAI5D,KAAK,CAAC6D,oBAAN,IAA8B,CAAC7D,KAAK,CAAC0D,SAAzC,EAAoD;AAClDC,QAAAA,OAAO,CAACC,IAAR,CAAa,mEAAb;AACD;AACF;;;WAED,0BAAiB;AACf,WAAKE,MAAL,GAAcC,YAAY,CAAC,KAAKC,aAAL,EAAD,EAAuB,KAAKC,cAAL,EAAvB,CAA1B;AACD;;;WAED,gCAAuB;AACrB,gCAA2C,KAAKD,aAAL,EAA3C;AAAA,UAAOE,mBAAP,uBAAOA,mBAAP;AAAA,UAA4BxC,WAA5B,uBAA4BA,WAA5B;;AACA,UAAMyC,kBAAkB,GAAG,KAAKC,UAAL,KAAoB;AAAClF,QAAAA,QAAQ,EAAE;AAAX,OAApB,GAAuCmF,SAAlE;AACA,UAAIC,kBAAkB,GAAGJ,mBAAmB,GAAG,KAAKlE,KAAL,CAAWsE,kBAAX,IAAiC5C,WAApC,GAAkD,EAA9F;;AAEA,UAAI,KAAK6C,eAAL,EAAJ,EAA4B;AAC1BD,QAAAA,kBAAkB,GAAMA,kBAAN,gBAAlB;AACD;;AAED,aAAO;AACLA,QAAAA,kBAAkB,EAAlBA,kBADK;AAGLH,QAAAA,kBAAkB,EAAEjG,SAAS,CAACsG,KAAV,GAAkBL,kBAAlB,GAAuCE;AAHtD,OAAP;AAKD;;;WAgCD,yBAA8B;AAAA,UAAhBI,SAAgB,uEAAJ,EAAI;AAC5B,UAAOhB,OAAP,GAAkB,KAAK1C,KAAvB,CAAO0C,OAAP;AACA,UAAMxE,KAAK,GAAG,KAAKyF,eAAL,EAAd;;AACA,iCAAwB,KAAKV,aAAL,EAAxB;AAAA,UAAOW,aAAP,wBAAOA,aAAP;;AAEA,UAAI7G,CAAC,CAAC8G,QAAF,CAAWH,SAAX,CAAJ,EAA2B;AACzB,eAAOA,SAAS,IAAItG,MAAM,CAACY,MAA3B;AACD,OAFD,MAEO,IAAIjB,CAAC,CAAC+G,aAAF,CAAgBJ,SAAhB,CAAJ,EAAgC;AACrC,YAAMK,gBAAgB,mCAAOjG,cAAP,GAA0B4F,SAA1B,CAAtB;;AAEA,YAAI,KAAKL,UAAL,EAAJ,EAAuB;AACrB,iBAAOO,aAAa,IAAIG,gBAAgB,CAAC5F,QAAzC;AACD,SAFD,MAEO,IAAID,KAAJ,EAAW;AAChB,iBAAO6F,gBAAgB,CAAC7F,KAAxB;AACD,SAFM,MAEA,IAAIwE,OAAJ,EAAa;AAClB,iBAAOqB,gBAAgB,CAAC9F,KAAxB;AACD,SAFM,MAEA;AACL,iBAAO8F,gBAAgB,CAAChG,OAAxB;AACD;AACF;;AAED,aAAO2F,SAAS,IAAItG,MAAM,CAACY,MAA3B;AACD;;;WAED,wBAAe;AACb,UAAO2B,KAAP,GAAgB,KAAKK,KAArB,CAAOL,KAAP;;AACA,UAAIA,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACqE,MAAb;AACD;;AACD,aAAO,CAAP;AACD;;;WAED,2BAAkBvC,GAAlB,EAAuB;AACrB,WAAKwC,UAAL,GAAkBxC,GAAG,KAAKtE,SAAS,CAACyE,YAAlB,GAAiC,KAAjC,GAAyC,KAAKsC,cAAL,EAA3D;AACA,UAAMC,KAAK,GAAG,KAAKnE,KAAL,CAAW0C,OAAX,IAAsB,KAAKuB,UAA3B,GACZvF,2BAA2B,CAACR,KADhB,GACwBQ,2BAA2B,CAACX,OADlE;;AAGA,UAAIoG,KAAK,KAAK,KAAKnE,KAAL,CAAWoC,cAAzB,EAAyC;AACvC,aAAK5C,QAAL,CAAc;AAAC4C,UAAAA,cAAc,EAAE+B;AAAjB,SAAd;AACD;AACF;;;WAED,6BAAoB;AAClB,UAAO/B,cAAP,GAAyB,KAAKpC,KAA9B,CAAOoC,cAAP;;AACA,iCAAwB,KAAKa,aAAL,EAAxB;AAAA,UAAOW,aAAP,wBAAOA,aAAP;;AAEA,aAAO,KAAKP,UAAL,MAAqBO,aAArB,GAAqCA,aAArC,GAAqDxB,cAA5D;AACD;;;WAED,0BAAiB;AACf,aAAO,KAAKtB,qBAAL,KAAgC,KAAKE,kBAAL,KAA4BsC,SAA5B,GAAwC,EAAxE,GAA8EA,SAArF;AACD;;;WAED,gCAAuB;AACrB,aAAO,CAAC,KAAKrE,KAAL,CAAWmF,KAAZ,IAAqB,KAAKpD,kBAAL,EAArB,GAAiD;AAACqD,QAAAA,GAAG,EAAElH,SAAS,CAACsG,KAAV,GAAkB,CAAC,EAAnB,GAAwB,CAAC;AAA/B,OAAjD,GAAsFH,SAA7F;AACD;;;WAED,sBAAa;AACX,aAAO,KAAKrE,KAAL,CAAWqF,QAAX,KAAwB,KAA/B;AACD;;;WAED,0BAAiB;AACf,iCAAoB,KAAKrB,aAAL,EAApB;AAAA,UAAON,SAAP,wBAAOA,SAAP;;AACA,UAAM4B,OAAO,GAAG,KAAKC,YAAL,EAAhB;AACA,aAAOD,OAAO,KAAK,CAAZ,GAAgB,KAAhB,GAAwB5B,SAAS,IAAI4B,OAA5C;AACD;;;WAED,iBAAQ5E,KAAR,EAAe;AACb,aAAO,CAAC5C,CAAC,CAAC0F,OAAF,CAAU9C,KAAK,IAAI,KAAKK,KAAL,CAAWL,KAA9B,CAAR;AACD;;;WAED,gCAAuB;AACrB,UAAO+C,OAAP,GAAkB,KAAK1C,KAAvB,CAAO0C,OAAP;AACA,UAAO9B,UAAP,GAAqB,KAAK3B,KAA1B,CAAO2B,UAAP;AACA,aAAO8B,OAAO,IAAI9B,UAAlB;AACD;;;WAED,8BAAqB;AACnB,UAAO8B,OAAP,GAAkB,KAAK1C,KAAvB,CAAO0C,OAAP;;AACA,iCAAuB,KAAKO,aAAL,EAAvB;AAAA,UAAOwB,YAAP,wBAAOA,YAAP;;AACA,aAAO/B,OAAO,IAAI+B,YAAlB;AACD;;;WAED,gCAAuB5D,IAAvB,EAA6B;AAC3B,aAAO,KAAK6D,OAAL,CAAa7D,IAAb,KAAsB,KAAKE,oBAAL,EAAtB,IAAqD,KAAK4D,kBAAL,EAA5D;AACD;;;WAED,iCAAwB;AACtB,iCAA6D,KAAK1B,aAAL,EAA7D;AAAA,UAAOE,mBAAP,wBAAOA,mBAAP;AAAA,UAA4ByB,QAA5B,wBAA4BA,QAA5B;AAAA,UAAsCC,WAAtC,wBAAsCA,WAAtC;AAAA,UAAmDC,MAAnD,wBAAmDA,MAAnD;;AAEA,aAAO,CAACD,WAAD,IAAgB,CAACC,MAAjB,IAA2BC,OAAO,CAAC5B,mBAAmB,IAAI,CAACyB,QAAxB,IAAoC,CAAC,KAAK5D,kBAAL,EAAtC,CAAzC;AACD;;;WAED,2BAAkB;AAChB,iCAAuB,KAAKiC,aAAL,EAAvB;AAAA,UAAO+B,YAAP,wBAAOA,YAAP;;AACA,UAAM9G,KAAK,GAAG,KAAKyF,eAAL,EAAd;AAEA,aAAOqB,YAAY,IAAI9G,KAAvB;AACD;;;WAED,2BAAkB;AAAA;;AAChB,aAAO,sBAAKe,KAAL,kCAAYf,KAAZ,qBAAqB,KAAK8B,KAA1B,qBAAqB,YAAY9B,KAAjC,CAAP;AACD;;;WAED,8BAAqB;AACnB,iCAAuB,KAAK+E,aAAL,EAAvB;AAAA,UAAOgC,YAAP,wBAAOA,YAAP;;AACA,aAAO,KAAKC,eAAL,MAA0BD,YAAjC;AACD;;;WAED,oCAA2B;AACzB,iCAAuC,KAAKhC,aAAL,EAAvC;AAAA,UAAOkC,gBAAP,wBAAOA,gBAAP;AAAA,UAAyBC,UAAzB,wBAAyBA,UAAzB;;AACA,aAAO,CAACA,UAAD,IAAeD,gBAAf,IAAmCA,gBAAgB,CAACE,UAA3D;AACD;;;WAED,6BAAoB;AAClB,kCAAqC,KAAKpC,aAAL,EAArC;AAAA,UAAOE,mBAAP,yBAAOA,mBAAP;AAAA,UAA4BiB,KAA5B,yBAA4BA,KAA5B;;AACA,aAAO,CAACjB,mBAAD,IAAwBiB,KAA/B;AACD;;;WAOD,6BAAoB;AAClB,yBAAiE,KAAKpE,KAAtE;AAAA,UAAOC,wBAAP,gBAAOA,wBAAP;AAAA,UAAiCR,4BAAjC,gBAAiCA,4BAAjC;;AACA,kCAAgG,KAAKwD,aAAL,EAAhG;AAAA,UAAOtC,WAAP,yBAAOA,WAAP;AAAA,UAAoB2E,oBAApB,yBAAoBA,oBAApB;AAAA,UAA0CC,wBAA1C,yBAA0CA,wBAA1C;AAAA,UAAoEC,wBAApE,yBAAoEA,wBAApE;;AACA,UAAMC,UAAU,GAAG,KAAKC,aAAL,EAAnB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,aAAL,CAAmBN,oBAAoB,IAAI9G,0BAA0B,CAACT,OAAtE,CAAzB;;AAEA,UAAI,KAAK+C,qBAAL,EAAJ,EAAkC;AAChC,eACE,oBAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,IAAI;AAAf,WACE,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,aAAa,EAAC,MADhB;AAEE,UAAA,aAAa,EAAE,CAFjB;AAGE,UAAA,oBAAoB,MAHtB;AAIE,UAAA,UAAU,EAAE,KAJd;AAKE,UAAA,QAAQ,EAAE,KAAK5B,mBALjB;AAME,UAAA,KAAK,EAAE,CACL,KAAK6D,MAAL,CAAYpC,WADP,EAEL,KAAKkF,oBAAL,EAFK,EAGLJ,UAHK,EAML;AAACK,YAAAA,UAAU,EAAExC;AAAb,WANK,EAOL;AACEyC,YAAAA,SAAS,EAAE,CACT;AACEC,cAAAA,KAAK,EAAE/F,wBAAwB,CAACgG,WAAzB,CAAqC;AAC1CC,gBAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD8B;AAE1CC,gBAAAA,WAAW,EAAE,CAAC,CAAD,EAAIpH,0BAAJ;AAF6B,eAArC;AADT,aADS,EAOT;AACEqH,cAAAA,UAAU,EAAEnG,wBAAwB,CAACgG,WAAzB,CAAqC;AAC/CC,gBAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADmC;AAE/CC,gBAAAA,WAAW,EAAE,CAAC,EAAD,EAAK,CAAL;AAFkC,eAArC;AADd,aAPS,EAaT;AACEE,cAAAA,UAAU,EAAEpG,wBAAwB,CAACgG,WAAzB,CAAqC;AAC/CC,gBAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADmC;AAE/CC,gBAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAC1G,4BAAL;AAFkC,eAArC;AADd,aAbS,CADb;AAqBE0E,YAAAA,KAAK,EAAE,KAAKhE,sBAAL,KACH,KAAKyF,aAAL,CAAmBL,wBAAwB,IAAI/G,0BAA/C,CADG,GAEHmH;AAvBN,WAPK,EAgCLH,wBAhCK;AANT,WAyCG,KAAKvE,sBAAL,CAA4BN,WAA5B,CAzCH,CADF,CADF;AA+CD;AACF;;;WAED,wBAAe;AACb,yBAA8B,KAAK1B,KAAnC;AAAA,UAAO6F,MAAP,gBAAOA,MAAP;AAAA,UAAewB,WAAf,gBAAeA,WAAf;;AACA,UAAIxB,MAAJ,EAAY;AACV,YAAMW,UAAU,GAAG,KAAKC,aAAL,EAAnB;AACA,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAAC,KAAK3C,MAAL,CAAY+B,MAAb,EAAqBW,UAArB,EAAiC;AAACK,YAAAA,UAAU,EAAExC;AAAb,WAAjC,EAA0DgD,WAA1D;AAAb,WAAsFxB,MAAtF,CAAP;AACD;AACF;;;WAED,uBAAc;AACZ,kCAAwC,KAAK7B,aAAL,EAAxC;AAAA,UAAOmB,KAAP,yBAAOA,KAAP;AAAA,UAAcmC,UAAd,yBAAcA,UAAd;AAAA,UAA0BC,UAA1B,yBAA0BA,UAA1B;;AACA,UAAMrC,KAAK,GAAG,KAAKyB,aAAL,CAAmBW,UAAU,IAAI/H,0BAAjC,CAAd;;AAEA,UAAI,KAAKiI,iBAAL,EAAJ,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAAC;AAACtC,YAAAA,KAAK,EAALA;AAAD,WAAD,EAAU,KAAKpB,MAAL,CAAY2D,QAAtB,EAAgC,KAAK3D,MAAL,CAAY4D,KAA5C,EAAmDH,UAAnD;AAAb,WAA8EpC,KAA9E,CAAP;AACD;AACF;;;WAED,6BAAoB;AAClB,kCAA0C,KAAKnB,aAAL,EAA1C;AAAA,UAAON,SAAP,yBAAOA,SAAP;AAAA,UAAkBG,oBAAlB,yBAAkBA,oBAAlB;;AAEA,UAAIH,SAAS,IAAIG,oBAAjB,EAAuC;AACrC,YAAMyB,OAAO,GAAG,KAAKC,YAAL,EAAhB;AACA,YAAML,KAAK,GAAG,KAAKyC,iBAAL,EAAd;AAEA,eACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE,CAAC;AAACzC,YAAAA,KAAK,EAALA;AAAD,WAAD,EAAU,KAAKpB,MAAL,CAAY8D,WAAtB,EAAmC,KAAK9D,MAAL,CAAY4D,KAA/C,CADT;AAEE,UAAA,kBAAkB,EAAKpC,OAAL,gBAAuB5B,SAAvB;AAFpB,WAIG4B,OAJH,SAIe5B,SAJf,CADF;AAQD;AACF;;;WAED,qBAAYmE,OAAZ,EAAqB;AACnB,kCAAiD,KAAK7D,aAAL,EAAjD;AAAA,UAAO+B,YAAP,yBAAOA,YAAP;AAAA,UAAqBC,YAArB,yBAAqBA,YAArB;AAAA,UAAmC8B,UAAnC,yBAAmCA,UAAnC;;AACA,UAAMC,SAAS,GAAGD,UAAU,GAAG;AAAC5C,QAAAA,KAAK,EAAE4C;AAAR,OAAH,GAAyBzD,SAArD;AACA,UAAM2D,aAAa,GAAGhC,YAAY,GAAG,KAAKlC,MAAL,CAAY2D,QAAf,GAA0B,KAAK3D,MAAL,CAAY8D,WAAxE;AACA,UAAM3I,KAAK,GAAG,KAAKyF,eAAL,EAAd;;AAEA,UAAImD,OAAO,IAAI9B,YAAf,EAA6B;AAC3B,eACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE,CAAC,KAAKjC,MAAL,CAAYmE,YAAb,EAA2B,KAAKnE,MAAL,CAAY4D,KAAvC,EAA8CM,aAA9C,EAA6DD,SAA7D,CADT;AAEE,UAAA,UAAU,EAAE,CAACjK,CAAC,CAAC0F,OAAF,CAAUvE,KAAV,CAAD,IAAqB,CAAC+G;AAFpC,WAIG/G,KAJH,CADF;AAQD;AACF;;;WAED,iCAAwB;AAAA;;AACtB,kCAAwC,KAAK+E,aAAL,EAAxC;AAAA,UAAOkE,gBAAP,yBAAOA,gBAAP;AAAA,UAAyBC,WAAzB,yBAAyBA,WAAzB;;AACA,UAAOxH,mBAAP,GAA8B,KAAKI,KAAnC,CAAOJ,mBAAP;;AAEA,UAAI7C,CAAC,CAACiF,UAAF,CAAamF,gBAAb,KAAkCvH,mBAAtC,EAA2D;AACzD,eAAOuH,gBAAgB,CAAC,KAAKlE,aAAL,EAAD,EAAuB,KAAKjD,KAA5B,CAAvB;AACD;;AAED,UAAMqH,cAAc,GAAGrI,SAAS,CAACsI,eAAV,CAA0B,KAAKrI,KAA/B,EAAsC,CAAC,OAAD,EAAU,QAAV,CAAtC,CAAvB;AAEA,aACE,oBAAC,KAAD;AACE,QAAA,aAAa,EAAE,OADjB;AAEE,QAAA,OAAO,EAAEW,mBAFX;AAGE,QAAA,cAAc,EAAE;AAAA,iBAAM,MAAI,CAACF,qBAAL,CAA2B,KAA3B,CAAN;AAAA;AAHlB,SAKE,oBAAC,KAAD,CAAO,MAAP,eACM0H,WADN;AAEE,QAAA,QAAQ,EAAE;AAAA,iBAAM,MAAI,CAAC1H,qBAAL,CAA2B,KAA3B,CAAN;AAAA,SAFZ;AAGE,QAAA,MAAM,EAAE,KAAKyB;AAHf,SALF,EAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAK4B,MAAL,CAAYwE;AAAzB,SACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAE,aAAAC,QAAQ,EAAI;AACf,UAAA,MAAI,CAAClG,eAAL,GAAuBkG,QAAvB;AACD;AAHH,SAIMH,cAJN;AAKE,QAAA,KAAK,EAAE,KAAKrH,KAAL,CAAWL;AALpB,SADF,CAVF,CADF;AAsBD;;;WAED,iCAAwB;AAAA;;AACtB,kCAAwC,KAAKsD,aAAL,EAAxC;AAAA,UAAOwE,qBAAP,yBAAOA,qBAAP;AAAA,UAA8BC,MAA9B,yBAA8BA,MAA9B;;AAEA,UAAI3K,CAAC,CAACiF,UAAF,CAAayF,qBAAb,CAAJ,EAAyC;AACvC,eAAOA,qBAAqB,CAAC,KAAKxE,aAAL,EAAD,EAAuB,KAAKvD,qBAA5B,CAA5B;AACD;;AAED,aACE,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAE,KAAKqD,MAAL,CAAYzB,eADrB;AAEE,QAAA,aAAa,EAAE,CAFjB;AAGE,QAAA,OAAO,EAAE;AAAA,iBAAM,CAAC,MAAI,CAAC+B,UAAL,EAAD,IAAsB,MAAI,CAAC3D,qBAAL,CAA2B,IAA3B,CAA5B;AAAA,SAHX;AAIE,QAAA,MAAM,EAAKgI,MAAL;AAJR,SAMM,KAAKC,oBAAL,EANN,GAQG,KAAKC,eAAL,EARH,CADF;AAYD;;;WAED,2BAAkB;AAAA;;AAChB,UAAOjI,KAAP,GAAgB,KAAKK,KAArB,CAAOL,KAAP;;AACA,kCAUI,KAAKsD,aAAL,EAVJ;AAAA,UACE4E,KADF,yBACEA,KADF;AAAA,UAEEvC,oBAFF,yBAEEA,oBAFF;AAAA,UAGEwC,SAHF,yBAGEA,SAHF;AAAA,UAKEC,aALF,yBAKEA,aALF;AAAA,UAME3C,UANF,yBAMEA,UANF;AAAA,UAOE4C,eAPF,yBAOEA,eAPF;AAAA,UAQE7D,KARF,yBAQEA,KARF;AAAA,UASK8D,MATL;;AAYA,UAAMxC,UAAU,GAAG,KAAKC,aAAL,EAAnB;;AACA,UAAOI,UAAP,GAAyCL,UAAzC,CAAOK,UAAP;AAAA,UAAsBoC,eAAtB,4BAAyCzC,UAAzC;;AACA,UAAMuB,SAAS,GAAG,KAAKpB,aAAL,CAAmBzB,KAAK,IAAI,KAAKgE,iBAAL,EAA5B,CAAlB;AACA,UAAMC,eAAe,GAAG,KAAKC,wBAAL,MAAmCL,eAA3D;AACA,UAAMM,kBAAkB,GAAGR,SAA3B;AAEA,UAAMS,UAAU,GAAG,CACjBH,eAAe,IAAI,KAAKrF,MAAL,CAAYyF,YADd,EAEjB,KAAKzF,MAAL,CAAY0F,KAFK,oBAIbP,eAJa,GAMjB9C,UAAU,IAAI;AAACsD,QAAAA,SAAS,EAAE5C,UAAU,IAAI3I,SAAS,CAACwL,SAAV,GAAsB,CAAtB,GAA0B,GAA9B;AAAtB,OANG,EAOjBxL,SAAS,CAACyL,KAAV,IAAmB;AAACC,QAAAA,SAAS,EAAE/C,UAAU,GAAG;AAAzB,OAPF,EAQjB3I,SAAS,CAACsG,KAAV,IAAmB6E,kBAAnB,IAAyC;AAACQ,QAAAA,UAAU,EAAE;AAAb,OARxB,EASjB;AAAC3E,QAAAA,KAAK,EAAE6C;AAAR,OATiB,EAUjBa,KAViB,CAAnB;AAaA,UAAMkB,eAAe,GAAG,KAAKrI,kBAAL,EAAxB;AACA,UAAMiF,gBAAgB,GAAG,KAAKC,aAAL,CAAmBN,oBAAoB,IAAI9G,0BAA0B,CAACT,OAAtE,CAAzB;AACA,UAAMiL,UAAU,GAAG,CAAC,KAAK3F,UAAL,EAAD,IAAsB,CAAC+B,UAA1C;AAEA,aACE,oBAAC,WAAD,eACM,KAAKuC,oBAAL,EADN;AAEE,QAAA,aAAa,EAAEvC,UAAU,GAAG,MAAH,GAAY9B;AAFvC,SAGM2E,MAHN;AAIE,QAAA,KAAK,EAAEtI,KAJT;AAKE,QAAA,WAAW,EAAEoJ,eALf;AAME,QAAA,oBAAoB,EAAEpD,gBANxB;AAOE,QAAA,qBAAqB,EAAC,aAPxB;AAQE,QAAA,KAAK,EAAE4C,UART;AASE,QAAA,SAAS,EAAED,kBATb;AAUE,QAAA,aAAa,EAAEP,aAVjB;AAWE,QAAA,UAAU,EAAE,KAAKxG,UAXnB;AAYE,QAAA,YAAY,EAAE,KAAKI,YAZrB;AAaE,QAAA,QAAQ,EAAE,KAAKsH,QAbjB;AAcE,QAAA,OAAO,EAAE,KAAKC,OAdhB;AAeE,QAAA,MAAM,EAAE,KAAKC,MAff;AAgBE,QAAA,GAAG,EAAE,aAAAV,KAAK,EAAI;AACZ,UAAA,MAAI,CAACA,KAAL,GAAaA,KAAb;AACD,SAlBH;AAmBE,QAAA,QAAQ,EAAEO;AAnBZ,SADF;AAuBD;;;WAED,6BAAoB;AAClB,UAAI,KAAKX,wBAAL,EAAJ,EAAqC;AACnC,oCAA2B,KAAKpF,aAAL,EAA3B;AAAA,YAAOkC,gBAAP,yBAAOA,gBAAP;;AACA,YAAO0C,KAAP,GAAsE1C,gBAAtE,CAAO0C,KAAP;AAAA,YAAcxC,UAAd,GAAsEF,gBAAtE,CAAcE,UAAd;AAAA,YAA0B+D,SAA1B,GAAsEjE,gBAAtE,CAA0BiE,SAA1B;AAAA,YAAqC7F,kBAArC,GAAsE4B,gBAAtE,CAAqC5B,kBAArC;AAAA,YAA4D0E,MAA5D,4BAAsE9C,gBAAtE;;AAEA,eACE,oBAAC,gBAAD,eACM8C,MADN;AACc,UAAA,kBAAkB,EAAE1E,kBADlC;AAEE,UAAA,KAAK,EAAE,CAAC,KAAKR,MAAL,CAAYsG,WAAb,EAA0B,KAAKxD,oBAAL,EAA1B,EAAuDgC,KAAvD,CAFT;AAEwE,UAAA,OAAO,EAAE,KAAK3G;AAFtF,YAIE,oBAAC,KAAD;AACE,UAAA,aAAa,EAAC,MADhB;AAEE,UAAA,MAAM,EAAEmE,UAFV;AAGE,UAAA,UAAU,EAAE,SAHd;AAIE,UAAA,KAAK,EAAE,CAAC,KAAKtC,MAAL,CAAYuG,gBAAb,EAA+B;AAACC,YAAAA,SAAS,EAAEH,SAAS,IAAIhM,MAAM,CAACkB;AAAhC,WAA/B;AAJT,UAJF,CADF;AAaD;AACF;;;WAED,2BAAkB;AAChB,kCAA0C,KAAK2E,aAAL,EAA1C;AAAA,UAAO+E,eAAP,yBAAOA,eAAP;AAAA,UAAwBwB,cAAxB,yBAAwBA,cAAxB;;AAEA,UAAIxB,eAAJ,EAAqB;AACnB,eACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAAC,KAAKjF,MAAL,CAAYsG,WAAb,EAA0B,KAAKxD,oBAAL,EAA1B,CAAb;AAAqE,UAAA,aAAa,EAAC;AAAnF,WACE,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAEmC,eAAf;AAAgC,UAAA,UAAU,EAAE,QAA5C;AAAsD,UAAA,KAAK,EAAE,CAAC,KAAKjF,MAAL,CAAYuG,gBAAb,EAA+BE,cAA/B;AAA7D,UADF,CADF;AAKD;AACF;;;WAED,kBAAS;AACP,kCAA+F,KAAKvG,aAAL,EAA/F;AAAA,UAAOmC,UAAP,yBAAOA,UAAP;AAAA,UAAmBqE,cAAnB,yBAAmBA,cAAnB;AAAA,UAAmCC,cAAnC,yBAAmCA,cAAnC;AAAA,UAAmDzE,YAAnD,yBAAmDA,YAAnD;AAAA,UAAiE0E,aAAjE,yBAAiEA,aAAjE;AAAA,UAAgF9E,WAAhF,yBAAgFA,WAAhF;;AACA,UAAM+E,mBAAmB,GAAG,KAAKhE,aAAL,CAAmB8D,cAAc,IAAIrL,wBAArC,CAA5B;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC,KAAK0E,MAAL,CAAY8G,SAAb,EAAwBJ,cAAxB,CAAb;AAAsD,QAAA,WAAW,EAAE;AAAnE,SACG,KAAKzI,kBAAL,KAA4B,KAAK8I,WAAL,CAAiB7E,YAAjB,CAA5B,GAA6D,KAAK8E,WAAL,EADhE,EAGE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACL,KAAKhH,MAAL,CAAYiH,cADP,EAELL,aAAa,IAAI,KAAK5G,MAAL,CAAYkH,8BAFxB,EAGL;AAACC,UAAAA,WAAW,EAAEN;AAAd,SAHK,EAIL;AAACd,UAAAA,UAAU,EAAE,KAAK5F,cAAL;AAAb,SAJK;AADT,SAQG2B,WAAW,IAAI,oBAAC,KAAD,eAAWA,WAAX;AAAwB,QAAA,KAAK,EAAE,CAAC,KAAK9B,MAAL,CAAY8B,WAAb,EAA0BA,WAAW,CAACgD,KAAtC;AAA/B,SARlB,EASG,KAAKsC,YAAL,EATH,EAUG,KAAKC,iBAAL,EAVH,EAWGhF,UAAU,GAAG,KAAKqC,qBAAL,EAAH,GAAkC,KAAKG,eAAL,EAX/C,EAYG,KAAKyC,iBAAL,EAZH,EAaG,KAAKC,eAAL,EAbH,EAcGlF,UAAU,IAAI,KAAKmF,qBAAL,EAdjB,CAHF,EAoBG,CAACxN,CAAC,CAACyN,WAAF,CAAc,KAAK7G,eAAL,EAAd,CAAD,IAA0CsB,YAA1C,IACC,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,KAAKlC,MAAL,CAAY0H,8BADrB;AAEE,QAAA,UAAU,MAFZ;AAGE,QAAA,kBAAkB,EAAE,KAAK9G,eAAL;AAHtB,QArBJ,EA4BE,oBAAC,IAAD;AAAM,QAAA,GAAG;AAAT,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI;AAAV,SAAY,KAAKmG,WAAL,CAAiB,CAAC7E,YAAlB,CAAZ,CADF,EAEG,KAAKyF,iBAAL,EAFH,CA5BF,CADF;AAmCD;;;;EAnpBoCnN,S;;AAAlByB,S,CACZ2L,W,GAAc,W;AADF3L,S,CAGZ4L,S,iDACFC,WAAW,CAACD,S,GACZrN,SAAS,CAACqN,S;AAIbzH,EAAAA,mBAAmB,EAAEnG,SAAS,CAAC8N,I;AAI/BvF,EAAAA,wBAAwB,EAAEvI,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACgO,MAAX,EAAmBhO,SAAS,CAACiO,MAA7B,CAApB,C;AAI1BzF,EAAAA,wBAAwB,EAAExI,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACiO,MAAX,EAAmBjO,SAAS,CAACkO,MAA7B,EAAqClO,SAAS,CAACmO,KAA/C,CAApB,C;AAK1BvK,EAAAA,UAAU,EAAE5D,SAAS,CAACgO,M;AAItBrB,EAAAA,aAAa,EAAE3M,SAAS,CAAC8N,I;AAIzBpB,EAAAA,cAAc,EAAE1M,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACgO,MAAX,EAAmBhO,SAAS,CAACiO,MAA7B,CAApB,C;AAIhBrH,EAAAA,aAAa,EAAE5G,SAAS,CAACgO,M;AAIzBpG,EAAAA,QAAQ,EAAE5H,SAAS,CAAC8N,I;AAIpB5M,EAAAA,KAAK,EAAElB,SAAS,CAACgO,M;AAIjBhG,EAAAA,YAAY,EAAEhI,SAAS,CAAC8N,I;AAIxB/D,EAAAA,UAAU,EAAE/J,SAAS,CAACgO,M;AAItB5F,EAAAA,UAAU,EAAEpI,SAAS,CAAC8N,I;AAItBrD,EAAAA,qBAAqB,EAAEzK,SAAS,CAACoO,W;AAMjCjE,EAAAA,gBAAgB,EAAEnK,SAAS,CAACoO,W;AAI5BC,EAAAA,uBAAuB,EAAErO,SAAS,CAACsO,I;AAInClE,EAAAA,WAAW,EAAEpK,SAAS,CAACuO,KAAV,CAAgB/N,KAAK,CAACgO,MAAN,CAAaZ,SAA7B,C;AAIb/I,EAAAA,WAAW,EAAE7E,SAAS,CAACsO,I;AAIvBxG,EAAAA,MAAM,EAAE9H,SAAS,CAACgO,M;AAIlB1E,EAAAA,WAAW,EAAEtJ,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACiO,MAAX,EAAmBjO,SAAS,CAACkO,MAA7B,EAAqClO,SAAS,CAACmO,KAA/C,CAApB,C;AAIb/G,EAAAA,KAAK,EAAEpH,SAAS,CAACgO,M;AAIjBzE,EAAAA,UAAU,EAAEvJ,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACgO,MAAX,EAAmBhO,SAAS,CAACiO,MAA7B,CAApB,C;AAIZzE,EAAAA,UAAU,EAAExJ,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACiO,MAAX,EAAmBjO,SAAS,CAACkO,MAA7B,EAAqClO,SAAS,CAACmO,KAA/C,CAApB,C;AAIZrI,EAAAA,oBAAoB,EAAE9F,SAAS,CAAC8N,I;AAIhCrG,EAAAA,YAAY,EAAEzH,SAAS,CAAC8N,I;AAIxB7F,EAAAA,YAAY,EAAEjI,SAAS,CAAC8N,I;AAIxB9C,EAAAA,eAAe,EAAEhL,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACiO,MAAX,EAAmBjO,SAAS,CAACkO,MAA7B,CAApB,C;AAIjB1B,EAAAA,cAAc,EAAExM,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACiO,MAAX,EAAmBjO,SAAS,CAACkO,MAA7B,CAApB,C;AAIhB/F,EAAAA,gBAAgB,EAAEnI,SAAS,CAACuO,KAAV,CAAgB;AAChClG,IAAAA,UAAU,EAAEoG,OAAO,CAACb,SAAR,CAAkBc,MADE;AAEhCtC,IAAAA,SAAS,EAAEpM,SAAS,CAACgO,MAFW;AAGhCW,IAAAA,OAAO,EAAE3O,SAAS,CAACsO,IAHa;AAIhCzD,IAAAA,KAAK,EAAE7K,SAAS,CAAC+N,SAAV,CAAoB,CAAC/N,SAAS,CAACiO,MAAX,EAAmBjO,SAAS,CAACkO,MAA7B,CAApB,CAJyB;AAKhC3H,IAAAA,kBAAkB,EAAEvG,SAAS,CAACgO;AALE,GAAhB,C;AAUlBnG,EAAAA,WAAW,EAAE7H,SAAS,CAACuO,KAAV,CAAgB5N,KAAK,CAACiN,SAAtB;;AAlII5L,S,CAqIZ4M,Y,GAAe;AACpB5G,EAAAA,YAAY,EAAE,IADM;AAEpB6G,EAAAA,cAAc,EAAE;AAFI,C;SArIH7M,S;;AA0rBrB,SAASgE,YAAT,OAAsE;AAAA,MAA/C4B,QAA+C,QAA/CA,QAA+C;AAAA,MAArCkD,SAAqC,QAArCA,SAAqC;AAAA,MAAzBgE,mBAAyB,uEAAH,CAAG;AACpE,MAAMC,cAAc,GAAG5O,SAAS,CAACsG,KAAV,GAAmBqI,mBAAmB,GAAG,CAAzC,GAA+CA,mBAAmB,GAAG,CAA5F;AAEA,SAAOE,UAAU,CAACC,MAAX,CAAkB;AACvBpC,IAAAA,SAAS,EAAE,EADY;AAGvBG,IAAAA,cAAc,EAAE;AAEdkC,MAAAA,aAAa,EAAE,KAFD;AAGdC,MAAAA,cAAc,EAAEvH,QAAQ,GAAG,QAAH,GAActB,SAHxB;AAId8I,MAAAA,iBAAiB,EAAE,CAJL;AAKdlC,MAAAA,WAAW,EAAE9M,MAAM,CAACiP,MALN;AAMdC,MAAAA,aAAa,EAAEnP,SAAS,CAACsG,KAAV,GAAkB,EAAlB,GAAuB;AANxB,KAHO;AAWvBwG,IAAAA,8BAA8B,EAAE;AAC9BmC,MAAAA,iBAAiB,EAAE,CADW;AAE9BE,MAAAA,aAAa,EAAE;AAFe,KAXT;AAevB7D,IAAAA,KAAK,EAAE;AACL8D,MAAAA,QAAQ,EAAE,CADL;AAELC,MAAAA,SAAS,EAAE5H,QAAQ,GAAG,QAAH,GAAczH,SAAS,CAACyL,KAAV,GAAkB,OAAlB,GAA4B,MAFxD;AAGL6D,MAAAA,eAAe,EAAE,aAHZ;AAKLC,MAAAA,OAAO,EAAE,CALJ;AAOLxC,MAAAA,WAAW,EAAE,aAPR;AAQLyC,MAAAA,WAAW,EAAExP,SAAS,CAACwL,SAAV,GAAsB,CAAtB,GAA0BrF;AARlC,KAfgB;AAyBvBhC,IAAAA,eAAe,EAAE;AACfiL,MAAAA,QAAQ,EAAE,CADK;AAEfL,MAAAA,aAAa,EAAE,KAFA;AAGfU,MAAAA,UAAU,EAAE;AAHG,KAzBM;AAiCvBrF,IAAAA,sBAAsB,EAAE;AACtBsF,MAAAA,IAAI,EAAE,CADgB;AAEtB/D,MAAAA,UAAU,EAAE,EAFU;AAGtBgE,MAAAA,iBAAiB,EAAE;AAHG,KAjCD;AAsCvBhI,IAAAA,MAAM,EAAE;AACNX,MAAAA,KAAK,EAAE/G,MAAM,CAACqB,MADR;AAENsO,MAAAA,WAAW,EAAEzP,QAAQ,CAAC0P,EAFhB;AAGNC,MAAAA,iBAAiB,EAAE;AAHb,KAtCe;AA2CvBtM,IAAAA,WAAW,EAAE;AACX6L,MAAAA,SAAS,EAAE;AADA,KA3CU;AA8CvBtF,IAAAA,YAAY,EAAE;AACZ/C,MAAAA,KAAK,EAAE/G,MAAM,CAACmB,KADF;AAEZiO,MAAAA,SAAS,EAAE5H,QAAQ,GAAG,QAAH,GAAc;AAFrB,KA9CS;AAkDvB8B,IAAAA,QAAQ,EAAE;AACRwG,MAAAA,YAAY,EAAE/P,SAAS,CAACsG,KAAV,GAAmBqE,SAAS,GAAG,CAAH,GAAO,CAAnC,GAAwC;AAD9C,KAlDa;AAqDvBjB,IAAAA,WAAW,EAAE;AACXsG,MAAAA,SAAS,EAAE;AADA,KArDU;AAwDvBxG,IAAAA,KAAK,kCACAhI,gBADA;AAEHyO,MAAAA,MAAM,EAAEzO,gBAAgB,CAACmH;AAFtB,MAxDkB;AA4DvB0C,IAAAA,YAAY,EAAE;AACZ6E,MAAAA,YAAY,EAAExO,SAAS,GAAGC;AADd,KA5DS;AA+DvBuK,IAAAA,WAAW,EAAE;AACXiE,MAAAA,QAAQ,EAAE,UADC;AAEXC,MAAAA,KAAK,EAAE,CAFI;AAGXC,MAAAA,SAAS,EAAE,YAHA;AAIX1E,MAAAA,UAAU,EAAEiD;AAJD,KA/DU;AAqEvBzC,IAAAA,gBAAgB,EAAE;AAChBlK,MAAAA,KAAK,EAAEP,SADS;AAEhBuO,MAAAA,MAAM,EAAEvO;AAFQ,KArEK;AAyEvBgG,IAAAA,WAAW,EAAE;AACX2I,MAAAA,SAAS,EAAE;AADA,KAzEU;AA4EvB/C,IAAAA,8BAA8B,EAAE;AAC9B6C,MAAAA,QAAQ,EAAE,UADoB;AAE9BG,MAAAA,MAAM,EAAE,CAFsB;AAG9BC,MAAAA,IAAI,EAAE,CAHwB;AAI9BtO,MAAAA,KAAK,EAAE,CAJuB;AAK9BgO,MAAAA,MAAM,EAAE;AALsB;AA5ET,GAAlB,CAAP;AAoFD","sourcesContent":["// TODO: hideUnderline should be true by default\n// TODO: enableErrors should be false by default\n// TODO: enableErrors should derived from errorMessage prop\n// TODO: use forwardRef to allow access to inner TextInput API\n// TODO: add trailing/leading icon props\n// TODO: support margin modifiers\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, Animated, TextInput as RNTextInput, Image as RNImage} from 'react-native';\nimport memoize from 'memoize-one';\nimport {Constants} from '../../helpers';\nimport {Colors, Typography, Spacings} from '../../style';\nimport BaseInput from '../baseInput';\nimport Modal from '../modal';\nimport TextArea from '../textArea';\nimport View from '../view';\nimport Image from '../image';\nimport Text from '../text';\nimport TouchableOpacity from '../touchableOpacity';\n\nconst COLOR_BY_STATE = {\n  default: Colors.grey10,\n  focus: Colors.grey10,\n  error: Colors.grey10,\n  disabled: Colors.grey50\n};\nconst UNDERLINE_COLOR_BY_STATE = {\n  default: Colors.grey50,\n  focus: Colors.primary,\n  error: Colors.red30\n};\nconst PLACEHOLDER_COLOR_BY_STATE = {\n  default: Colors.grey30,\n  focus: Colors.primary\n};\nconst CHAR_COUNTER_COLOR_BY_STATE = {\n  default: Colors.grey30,\n  error: Colors.red30\n};\n\nconst LABEL_TYPOGRAPHY = Typography.text80;\nconst ICON_SIZE = 24;\nconst ICON_LEFT_PADDING = 6;\nconst FLOATING_PLACEHOLDER_SCALE = 0.875;\n\n/**\n * @description: A wrapper for TextInput component with extra functionality like floating placeholder and validations (This is an uncontrolled component)\n * @modifiers: Typography\n * @extends: TextInput\n * @extendsLink: https://reactnative.dev/docs/textinput\n * @gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/BasicTextFieldScreen.js\n */\nexport default class TextField extends BaseInput {\n  static displayName = 'TextField';\n\n  static propTypes = {\n    ...RNTextInput.propTypes,\n    ...BaseInput.propTypes,\n    /**\n     * should placeholder have floating behavior\n     */\n    floatingPlaceholder: PropTypes.bool,\n    /**\n     * floating placeholder color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}\n     */\n    floatingPlaceholderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * Custom style for floating placeholder\n     */\n    floatingPlaceholderStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * This text will appear as a placeholder when the textInput becomes focused, only when passing floatingPlaceholder\n     * as well (NOT for expandable textInputs)\n     */\n    helperText: PropTypes.string,\n    /**\n     * hide text input underline, by default false\n     */\n    hideUnderline: PropTypes.bool,\n    /**\n     * underline color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}\n     */\n    underlineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * the color of all text when the input is disabled (if undefined will not apply color)\n     */\n    disabledColor: PropTypes.string,\n    /**\n     * should text input be align to center\n     */\n    centered: PropTypes.bool,\n    /**\n     * input error message, should be empty if no error exists\n     */\n    error: PropTypes.string,\n    /**\n     * should the input component support error messages\n     */\n    enableErrors: PropTypes.bool,\n    /**\n     * input error message's text color\n     */\n    errorColor: PropTypes.string,\n    /**\n     * should the input expand to another text area modal\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Render custom expandable input (requires expandable to be true)\n     */\n    renderExpandableInput: PropTypes.elementType,\n    /**\n     * allow custom rendering of expandable content when clicking on the input (useful for pickers)\n     * accept props and state as params, ex. (props, state) => {...}\n     * use toggleExpandableModal(false) method to toggle off the expandable content\n     */\n    renderExpandable: PropTypes.elementType,\n    /**\n     * Callback for the modal toggle. Pass with renderExpandable to control the modal toggle\n     */\n    onToggleExpandableModal: PropTypes.func,\n    /**\n     * The picker modal top bar props\n     */\n    topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n    /**\n     * transform function executed on value and return transformed value\n     */\n    transformer: PropTypes.func,\n    /**\n     * Pass to render a prefix text as part of the input (doesn't work with floatingPlaceholder)\n     */\n    prefix: PropTypes.string,\n    /**\n     * The prefix style\n     */\n    prefixStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * Fixed title that will displayed above the input (note: floatingPlaceholder MUST be 'false')\n     */\n    title: PropTypes.string,\n    /**\n     * The title's color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}\n     */\n    titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * Additional styles for the title (not including 'color')\n     */\n    titleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * should the input display a character counter (only when passing 'maxLength')\n     */\n    showCharacterCounter: PropTypes.bool,\n    /**\n     * should float the placeholder when focused (instead of when typing)\n     */\n    floatOnFocus: PropTypes.bool,\n    /**\n     * should the errors be displayed at the top\n     */\n    useTopErrors: PropTypes.bool,\n    /**\n     * Icon asset source for showing on the right side, appropriate for dropdown icon and such\n     */\n    rightIconSource: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * Pass to style the right icon source\n     */\n    rightIconStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * Props for the right button {iconSource, onPress, style}\n     */\n    rightButtonProps: PropTypes.shape({\n      iconSource: RNImage.propTypes.source,\n      iconColor: PropTypes.string,\n      onPress: PropTypes.func,\n      style: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n      accessibilityLabel: PropTypes.string\n    }),\n    /**\n     * Pass to render a leading icon to the TextInput value. Accepts Image props (doesn't work with floatingPlaceholder)\n     */\n    leadingIcon: PropTypes.shape(Image.propTypes)\n  };\n\n  static defaultProps = {\n    enableErrors: true,\n    validateOnBlur: true\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...this.state,\n      value: props.value, // for floatingPlaceholder functionality\n      floatingPlaceholderState: new Animated.Value(this.shouldFloatPlaceholder(props.value) ? 1 : 0),\n      showExpandableModal: false,\n      floatingPlaceholderTranslate: 0,\n      charCountColor: CHAR_COUNTER_COLOR_BY_STATE.default\n    };\n\n    this.generatePropsWarnings(props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({value: nextProps.value}, () => {\n        this.updateFloatingPlaceholderState();\n        if (nextProps.validateOnChange) {\n          this.validate();\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (_.isEmpty(prevState.value) !== _.isEmpty(this.state.value) || prevState.focused !== this.state.focused) {\n      this.updateFloatingPlaceholderState();\n    }\n  }\n\n  onPlaceholderLayout = (event) => {\n    const {width} = event.nativeEvent.layout;\n    const translate = width / 2 - (width * FLOATING_PLACEHOLDER_SCALE) / 2;\n    this.setState({floatingPlaceholderTranslate: translate / FLOATING_PLACEHOLDER_SCALE});\n  };\n\n  /** Actions */\n  generatePropsWarnings(props) {\n    if (props.maxLength === 0) {\n      console.warn('Setting maxLength to zero will block typing in this input');\n    }\n    if (props.showCharacterCounter && !props.maxLength) {\n      console.warn('In order to use showCharacterCount please pass \\'maxLength\\' prop');\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.getThemeProps(), this.getTopPaddings());\n  }\n\n  getAccessibilityInfo() {\n    const {floatingPlaceholder, placeholder} = this.getThemeProps();\n    const accessibilityState = this.isDisabled() ? {disabled: true} : undefined;\n    let accessibilityLabel = floatingPlaceholder ? this.props.accessibilityLabel || placeholder : '';\n\n    if (this.isRequiredField()) {\n      accessibilityLabel = `${accessibilityLabel}. Mandatory`;\n    }\n\n    return {\n      accessibilityLabel,\n      // on Android accessibilityStates cause issues with expandable input\n      accessibilityState: Constants.isIOS ? accessibilityState : undefined\n    };\n  }\n\n  toggleExpandableModal = (value) => {\n    this.setState({showExpandableModal: value});\n    _.invoke(this.props, 'onToggleExpandableModal', value);\n  }\n\n  updateFloatingPlaceholderState = withoutAnimation => {\n    if (withoutAnimation) {\n      this.state.floatingPlaceholderState.setValue(this.shouldFloatPlaceholder() ? 1 : 0);\n    } else {\n      Animated.spring(this.state.floatingPlaceholderState, {\n        toValue: this.shouldFloatPlaceholder() ? 1 : 0,\n        duration: 150,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  getPlaceholderText = memoize(() => {\n    // HACK: passing whitespace instead of undefined. Issue fixed in RN56\n    const {placeholder, helperText} = this.props;\n    const text = this.shouldFakePlaceholder()\n      ? this.shouldShowHelperText()\n        ? helperText\n        : ' '\n      : this.shouldShowTopError() && this.shouldShowHelperText()\n        ? helperText\n        : this.getRequiredPlaceholder(placeholder);\n    return text;\n  });\n\n  getStateColor(colorProp = {}) {\n    const {focused} = this.state;\n    const error = this.getErrorMessage();\n    const {disabledColor} = this.getThemeProps();\n\n    if (_.isString(colorProp)) {\n      return colorProp || Colors.grey10;\n    } else if (_.isPlainObject(colorProp)) {\n      const mergedColorState = {...COLOR_BY_STATE, ...colorProp};\n\n      if (this.isDisabled()) {\n        return disabledColor || mergedColorState.disabled;\n      } else if (error) {\n        return mergedColorState.error;\n      } else if (focused) {\n        return mergedColorState.focus;\n      } else {\n        return mergedColorState.default;\n      }\n    }\n\n    return colorProp || Colors.grey10;\n  }\n\n  getCharCount() {\n    const {value} = this.state;\n    if (value) {\n      return value.length;\n    }\n    return 0;\n  }\n\n  setCharCountColor(key) {\n    this.maxReached = key === Constants.backspaceKey ? false : this.isCounterLimit();\n    const color = this.state.focused && this.maxReached ?\n      CHAR_COUNTER_COLOR_BY_STATE.error : CHAR_COUNTER_COLOR_BY_STATE.default;\n\n    if (color !== this.state.charCountColor) {\n      this.setState({charCountColor: color});\n    }\n  }\n\n  getCharCountColor() {\n    const {charCountColor} = this.state;\n    const {disabledColor} = this.getThemeProps();\n\n    return this.isDisabled() && disabledColor ? disabledColor : charCountColor;\n  }\n\n  getTopPaddings() {\n    return this.shouldFakePlaceholder() ? (this.shouldShowTopError() ? undefined : 25) : undefined;\n  }\n\n  getTopErrorsPosition() {\n    return !this.props.title && this.shouldShowTopError() ? {top: Constants.isIOS ? -25 : -27} : undefined;\n  }\n\n  isDisabled() {\n    return this.props.editable === false;\n  }\n\n  isCounterLimit() {\n    const {maxLength} = this.getThemeProps();\n    const counter = this.getCharCount();\n    return counter === 0 ? false : maxLength <= counter;\n  }\n\n  hasText(value) {\n    return !_.isEmpty(value || this.state.value);\n  }\n\n  shouldShowHelperText() {\n    const {focused} = this.state;\n    const {helperText} = this.props;\n    return focused && helperText;\n  }\n\n  shouldFloatOnFocus() {\n    const {focused} = this.state;\n    const {floatOnFocus} = this.getThemeProps();\n    return focused && floatOnFocus;\n  }\n\n  shouldFloatPlaceholder(text) {\n    return this.hasText(text) || this.shouldShowHelperText() || this.shouldFloatOnFocus();\n  }\n\n  shouldFakePlaceholder() {\n    const {floatingPlaceholder, centered, leadingIcon, prefix} = this.getThemeProps();\n\n    return !leadingIcon && !prefix && Boolean(floatingPlaceholder && !centered && !this.shouldShowTopError());\n  }\n\n  shouldShowError() {\n    const {enableErrors} = this.getThemeProps();\n    const error = this.getErrorMessage();\n\n    return enableErrors && error;\n  }\n\n  getErrorMessage() {\n    return this.props?.error || this.state?.error;\n  }\n\n  shouldShowTopError() {\n    const {useTopErrors} = this.getThemeProps();\n    return this.shouldShowError() && useTopErrors;\n  }\n\n  shouldDisplayRightButton() {\n    const {rightButtonProps, expandable} = this.getThemeProps();\n    return !expandable && rightButtonProps && rightButtonProps.iconSource;\n  }\n\n  shouldRenderTitle() {\n    const {floatingPlaceholder, title} = this.getThemeProps();\n    return !floatingPlaceholder && title;\n  }\n\n  onPressRightButton = () => {\n    _.invoke(this.props, 'rightButtonProps.onPress');\n  };\n\n  /** Renders */\n  renderPlaceholder() {\n    const {floatingPlaceholderState, floatingPlaceholderTranslate} = this.state;\n    const {placeholder, placeholderTextColor, floatingPlaceholderColor, floatingPlaceholderStyle} = this.getThemeProps();\n    const typography = this.getTypography();\n    const placeholderColor = this.getStateColor(placeholderTextColor || PLACEHOLDER_COLOR_BY_STATE.default);\n\n    if (this.shouldFakePlaceholder()) {\n      return (\n        <View absF left>\n          <Animated.Text\n            pointerEvents=\"none\"\n            numberOfLines={1}\n            suppressHighlighting\n            accessible={false}\n            onLayout={this.onPlaceholderLayout}\n            style={[\n              this.styles.placeholder,\n              this.getTopErrorsPosition(),\n              typography,\n              // TODO: we need to exclude completely any dependency on line height\n              // in this component since it always breaks alignments\n              {lineHeight: undefined},\n              {\n                transform: [\n                  {\n                    scale: floatingPlaceholderState.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [1, FLOATING_PLACEHOLDER_SCALE]\n                    })\n                  },\n                  {\n                    translateY: floatingPlaceholderState.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [25, 0]\n                    })\n                  },\n                  {\n                    translateX: floatingPlaceholderState.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0, -floatingPlaceholderTranslate]\n                    })\n                  }\n                ],\n                color: this.shouldFloatPlaceholder()\n                  ? this.getStateColor(floatingPlaceholderColor || PLACEHOLDER_COLOR_BY_STATE)\n                  : placeholderColor\n              },\n              floatingPlaceholderStyle\n            ]}\n          >\n            {this.getRequiredPlaceholder(placeholder)}\n          </Animated.Text>\n        </View>\n      );\n    }\n  }\n\n  renderPrefix() {\n    const {prefix, prefixStyle} = this.props;\n    if (prefix) {\n      const typography = this.getTypography();\n      return <Text style={[this.styles.prefix, typography, {lineHeight: undefined}, prefixStyle]}>{prefix}</Text>;\n    }\n  }\n\n  renderTitle() {\n    const {title, titleColor, titleStyle} = this.getThemeProps();\n    const color = this.getStateColor(titleColor || PLACEHOLDER_COLOR_BY_STATE);\n\n    if (this.shouldRenderTitle()) {\n      return <Text style={[{color}, this.styles.topLabel, this.styles.label, titleStyle]}>{title}</Text>;\n    }\n  }\n\n  renderCharCounter() {\n    const {maxLength, showCharacterCounter} = this.getThemeProps();\n\n    if (maxLength && showCharacterCounter) {\n      const counter = this.getCharCount();\n      const color = this.getCharCountColor();\n\n      return (\n        <Text\n          style={[{color}, this.styles.bottomLabel, this.styles.label]}\n          accessibilityLabel={`${counter} out of ${maxLength} max characters`}\n        >\n          {counter} / {maxLength}\n        </Text>\n      );\n    }\n  }\n\n  renderError(visible) {\n    const {enableErrors, useTopErrors, errorColor} = this.getThemeProps();\n    const textColor = errorColor ? {color: errorColor} : undefined;\n    const positionStyle = useTopErrors ? this.styles.topLabel : this.styles.bottomLabel;\n    const error = this.getErrorMessage();\n\n    if (visible && enableErrors) {\n      return (\n        <Text\n          style={[this.styles.errorMessage, this.styles.label, positionStyle, textColor]}\n          accessible={!_.isEmpty(error) && !useTopErrors}\n        >\n          {error}\n        </Text>\n      );\n    }\n  }\n\n  renderExpandableModal() {\n    const {renderExpandable, topBarProps} = this.getThemeProps();\n    const {showExpandableModal} = this.state;\n\n    if (_.isFunction(renderExpandable) && showExpandableModal) {\n      return renderExpandable(this.getThemeProps(), this.state);\n    }\n\n    const textInputProps = TextField.extractOwnProps(this.props, ['error', 'testID']);\n\n    return (\n      <Modal\n        animationType={'slide'}\n        visible={showExpandableModal}\n        onRequestClose={() => this.toggleExpandableModal(false)}\n      >\n        <Modal.TopBar\n          {...topBarProps}\n          onCancel={() => this.toggleExpandableModal(false)}\n          onDone={this.onDoneEditingExpandableInput}\n        />\n        <View style={this.styles.expandableModalContent}>\n          <TextArea\n            ref={textarea => {\n              this.expandableInput = textarea;\n            }}\n            {...textInputProps}\n            value={this.state.value}\n          />\n        </View>\n      </Modal>\n    );\n  }\n\n  renderExpandableInput() {\n    const {renderExpandableInput, testID} = this.getThemeProps();\n\n    if (_.isFunction(renderExpandableInput)) {\n      return renderExpandableInput(this.getThemeProps(), this.toggleExpandableModal);\n    }\n\n    return (\n      <TouchableOpacity\n        style={this.styles.expandableInput}\n        activeOpacity={1}\n        onPress={() => !this.isDisabled() && this.toggleExpandableModal(true)}\n        testID={`${testID}.expandable`}\n        // {...this.extractAccessibilityProps()}\n        {...this.getAccessibilityInfo()}\n      >\n        {this.renderTextInput()}\n      </TouchableOpacity>\n    );\n  }\n\n  renderTextInput() {\n    const {value} = this.state; // value set on state for floatingPlaceholder functionality\n    const {\n      style,\n      placeholderTextColor,\n      multiline,\n      // hideUnderline,\n      numberOfLines,\n      expandable,\n      rightIconSource,\n      color,\n      ...others\n    } = this.getThemeProps();\n\n    const typography = this.getTypography();\n    const {lineHeight, ...typographyStyle} = typography;\n    const textColor = this.getStateColor(color || this.extractColorValue());\n    const hasRightElement = this.shouldDisplayRightButton() || rightIconSource;\n    const shouldUseMultiline = multiline/*  || expandable */;\n\n    const inputStyle = [\n      hasRightElement && this.styles.rightElement,\n      this.styles.input,\n      // hideUnderline && this.styles.inputWithoutUnderline,\n      {...typographyStyle},\n      // Constants.isAndroid && {lineHeight},\n      expandable && {maxHeight: lineHeight * (Constants.isAndroid ? 3 : 3.3)},\n      Constants.isRTL && {minHeight: lineHeight + 3},\n      Constants.isIOS && shouldUseMultiline && {paddingTop: 0}, // fix for iOS topPadding in multiline TextInput\n      {color: textColor},\n      style\n    ];\n\n    const placeholderText = this.getPlaceholderText();\n    const placeholderColor = this.getStateColor(placeholderTextColor || PLACEHOLDER_COLOR_BY_STATE.default);\n    const isEditable = !this.isDisabled() && !expandable;\n\n    return (\n      <RNTextInput\n        {...this.getAccessibilityInfo()}\n        pointerEvents={expandable ? 'none' : undefined}\n        {...others}\n        value={value}\n        placeholder={placeholderText}\n        placeholderTextColor={placeholderColor}\n        underlineColorAndroid=\"transparent\"\n        style={inputStyle}\n        multiline={shouldUseMultiline}\n        numberOfLines={numberOfLines}\n        onKeyPress={this.onKeyPress}\n        onChangeText={this.onChangeText}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        ref={input => {\n          this.input = input;\n        }}\n        editable={isEditable}\n      />\n    );\n  }\n\n  renderRightButton() {\n    if (this.shouldDisplayRightButton()) {\n      const {rightButtonProps} = this.getThemeProps();\n      const {style, iconSource, iconColor, accessibilityLabel, ...others} = rightButtonProps;\n\n      return (\n        <TouchableOpacity\n          {...others} accessibilityLabel={accessibilityLabel}\n          style={[this.styles.rightButton, this.getTopErrorsPosition(), style]} onPress={this.onPressRightButton}\n        >\n          <Image\n            pointerEvents=\"none\"\n            source={iconSource}\n            resizeMode={'contain'}\n            style={[this.styles.rightButtonImage, {tintColor: iconColor || Colors.primary}]}\n          />\n        </TouchableOpacity>\n      );\n    }\n  }\n\n  renderRightIcon() {\n    const {rightIconSource, rightIconStyle} = this.getThemeProps();\n\n    if (rightIconSource) {\n      return (\n        <View style={[this.styles.rightButton, this.getTopErrorsPosition()]} pointerEvents=\"none\">\n          <Image source={rightIconSource} resizeMode={'center'} style={[this.styles.rightButtonImage, rightIconStyle]}/>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    const {expandable, containerStyle, underlineColor, useTopErrors, hideUnderline, leadingIcon} = this.getThemeProps();\n    const underlineStateColor = this.getStateColor(underlineColor || UNDERLINE_COLOR_BY_STATE);\n\n    return (\n      <View style={[this.styles.container, containerStyle]} collapsable={false}>\n        {this.shouldShowTopError() ? this.renderError(useTopErrors) : this.renderTitle()}\n\n        <View\n          style={[\n            this.styles.innerContainer,\n            hideUnderline && this.styles.innerContainerWithoutUnderline,\n            {borderColor: underlineStateColor},\n            {paddingTop: this.getTopPaddings()}\n          ]}\n        >\n          {leadingIcon && <Image {...leadingIcon} style={[this.styles.leadingIcon, leadingIcon.style]}/>}\n          {this.renderPrefix()}\n          {this.renderPlaceholder()}\n          {expandable ? this.renderExpandableInput() : this.renderTextInput()}\n          {this.renderRightButton()}\n          {this.renderRightIcon()}\n          {expandable && this.renderExpandableModal()}\n        </View>\n\n        {!_.isUndefined(this.getErrorMessage()) && useTopErrors && (\n          <View\n            style={this.styles.accessibilityDummyErrorMessage}\n            accessible\n            accessibilityLabel={this.getErrorMessage()}\n          />\n        )}\n\n        <View row>\n          <View flex>{this.renderError(!useTopErrors)}</View>\n          {this.renderCharCounter()}\n        </View>\n      </View>\n    );\n  }\n\n  /** Events */\n  onDoneEditingExpandableInput = () => {\n    const expandableInputValue = _.get(this.expandableInput, 'state.value');\n    this.setState({value: expandableInputValue});\n    this.state.floatingPlaceholderState.setValue(expandableInputValue ? 1 : 0);\n    _.invoke(this.props, 'onChangeText', expandableInputValue);\n    this.toggleExpandableModal(false);\n  };\n\n  onKeyPress = event => {\n    this.lastKey = event.nativeEvent.key;\n    this.setCharCountColor(this.lastKey);\n    _.invoke(this.props, 'onKeyPress', event);\n  };\n\n  onChangeText = text => {\n    // when character count exceeds maxLength text will be empty string.\n    // HACK: To avoid setting state value to '' we check the source of that deletion\n    if (text === '' && this.lastKey && this.lastKey !== Constants.backspaceKey) {\n      return;\n    }\n\n    const {transformer, validateOnChange} = this.props;\n    let transformedText = text;\n    if (_.isFunction(transformer)) {\n      transformedText = transformer(text);\n    }\n\n    _.invoke(this.props, 'onChangeText', transformedText);\n    this.setState({value: transformedText}, () => {\n      if (validateOnChange) {\n        setImmediate(this.validate);\n      }\n    });\n  };\n}\n\nfunction createStyles({centered, multiline}, rightItemTopPadding = 0) {\n  const itemTopPadding = Constants.isIOS ? (rightItemTopPadding - 3) : (rightItemTopPadding - 1);\n\n  return StyleSheet.create({\n    container: {\n    },\n    innerContainer: {\n      // flexGrow: 1, // create bugs with lineHeight\n      flexDirection: 'row',\n      justifyContent: centered ? 'center' : undefined,\n      borderBottomWidth: 1,\n      borderColor: Colors.grey70,\n      paddingBottom: Constants.isIOS ? 10 : 5\n    },\n    innerContainerWithoutUnderline: {\n      borderBottomWidth: 0,\n      paddingBottom: 0\n    },\n    input: {\n      flexGrow: 1,\n      textAlign: centered ? 'center' : Constants.isRTL ? 'right' : 'left',\n      backgroundColor: 'transparent',\n      // marginBottom: Constants.isIOS ? 10 : 5,\n      padding: 0, // for Android\n      // textAlignVertical: 'top', // for Android\n      borderColor: 'transparent', // borderColor & borderWidth is a fix for collapsing issue on Android\n      borderWidth: Constants.isAndroid ? 1 : undefined // for Android\n    },\n    expandableInput: {\n      flexGrow: 1,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    // inputWithoutUnderline: {\n    //   marginBottom: undefined\n    // },\n    expandableModalContent: {\n      flex: 1,\n      paddingTop: 15,\n      paddingHorizontal: 20\n    },\n    prefix: {\n      color: Colors.grey30,\n      marginRight: Spacings.s1,\n      textAlignVertical: 'center'\n    },\n    placeholder: {\n      textAlign: 'left'\n    },\n    errorMessage: {\n      color: Colors.red30,\n      textAlign: centered ? 'center' : 'left'\n    },\n    topLabel: {\n      marginBottom: Constants.isIOS ? (multiline ? 1 : 5) : 7\n    },\n    bottomLabel: {\n      marginTop: 9\n    },\n    label: {\n      ...LABEL_TYPOGRAPHY,\n      height: LABEL_TYPOGRAPHY.lineHeight\n    },\n    rightElement: {\n      paddingRight: ICON_SIZE + ICON_LEFT_PADDING\n    },\n    rightButton: {\n      position: 'absolute',\n      right: 0,\n      alignSelf: 'flex-start',\n      paddingTop: itemTopPadding\n    },\n    rightButtonImage: {\n      width: ICON_SIZE,\n      height: ICON_SIZE\n    },\n    leadingIcon: {\n      alignSelf: 'center'\n    },\n    accessibilityDummyErrorMessage: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: 1,\n      height: 1\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}