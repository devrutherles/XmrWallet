{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"source\"],\n    _excluded2 = [\"tintColor\", \"style\", \"supportRTL\", \"cover\", \"aspectRatio\", \"overlayType\", \"overlayIntensity\", \"overlayColor\", \"customOverlayContent\", \"modifiers\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Constants from \"../../helpers/Constants\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport Assets from \"../../assets\";\nimport Overlay from \"../overlay\";\nimport SvgImage from \"./SvgImage\";\n\nvar Image = function (_PureComponent) {\n  _inherits(Image, _PureComponent);\n\n  var _super = _createSuper(Image);\n\n  function Image(props) {\n    var _this;\n\n    _classCallCheck(this, Image);\n\n    _this = _super.call(this, props);\n\n    _this.onError = function (event) {\n      if (event.nativeEvent.error) {\n        _this.setState({\n          error: true\n        });\n\n        _this.props.onError == null ? void 0 : _this.props.onError(event);\n      }\n    };\n\n    _this.renderSvg = function () {\n      var _this$props = _this.props,\n          source = _this$props.source,\n          others = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(SvgImage, _extends({\n        data: source\n      }, others));\n    };\n\n    _this.sourceTransformer = _this.props.sourceTransformer;\n    _this.state = {\n      error: false,\n      prevSource: props.source\n    };\n    return _this;\n  }\n\n  _createClass(Image, [{\n    key: \"isGif\",\n    value: function isGif() {\n      if (Constants.isAndroid) {\n        var source = this.props.source;\n\n        var url = _.get(source, 'uri');\n\n        var isGif = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/.test(url);\n        return isGif;\n      }\n    }\n  }, {\n    key: \"shouldUseImageBackground\",\n    value: function shouldUseImageBackground() {\n      var _this$props2 = this.props,\n          overlayType = _this$props2.overlayType,\n          customOverlayContent = _this$props2.customOverlayContent;\n      return !!overlayType || this.isGif() || !_.isUndefined(customOverlayContent);\n    }\n  }, {\n    key: \"getVerifiedSource\",\n    value: function getVerifiedSource(source) {\n      if (_.get(source, 'uri') === null || _.get(source, 'uri') === '') {\n        return _objectSpread(_objectSpread({}, source), {}, {\n          uri: undefined\n        });\n      }\n\n      return source;\n    }\n  }, {\n    key: \"getImageSource\",\n    value: function getImageSource() {\n      var _this$props3 = this.props,\n          assetName = _this$props3.assetName,\n          assetGroup = _this$props3.assetGroup,\n          source = _this$props3.source;\n\n      if (!_.isUndefined(assetName)) {\n        return _.get(Assets, assetGroup + \".\" + assetName);\n      }\n\n      if (this.sourceTransformer) {\n        return this.sourceTransformer(this.props);\n      }\n\n      return this.getVerifiedSource(source);\n    }\n  }, {\n    key: \"renderRegularImage\",\n    value: function renderRegularImage() {\n      var error = this.state.error;\n      var source = error ? this.getVerifiedSource(this.props.errorSource) : this.getImageSource();\n\n      var _this$props4 = this.props,\n          tintColor = _this$props4.tintColor,\n          style = _this$props4.style,\n          supportRTL = _this$props4.supportRTL,\n          cover = _this$props4.cover,\n          aspectRatio = _this$props4.aspectRatio,\n          overlayType = _this$props4.overlayType,\n          overlayIntensity = _this$props4.overlayIntensity,\n          overlayColor = _this$props4.overlayColor,\n          customOverlayContent = _this$props4.customOverlayContent,\n          modifiers = _this$props4.modifiers,\n          others = _objectWithoutProperties(_this$props4, _excluded2);\n\n      var shouldFlipRTL = supportRTL && Constants.isRTL;\n      var ImageView = this.shouldUseImageBackground() ? ImageBackground : RNImage;\n      var margins = modifiers.margins;\n      return React.createElement(ImageView, _extends({\n        style: [tintColor && {\n          tintColor: tintColor\n        }, shouldFlipRTL && styles.rtlFlipped, cover && styles.coverImage, this.isGif() && styles.gifImage, aspectRatio && {\n          aspectRatio: aspectRatio\n        }, margins, style],\n        accessible: false,\n        accessibilityRole: 'image'\n      }, others, {\n        onError: this.onError,\n        source: source\n      }), (overlayType || customOverlayContent) && React.createElement(Overlay, {\n        type: overlayType,\n        intensity: overlayIntensity,\n        color: overlayColor,\n        customContent: customOverlayContent\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var source = this.props.source;\n      var isSvg = typeof source === 'string' || typeof source === 'function';\n\n      if (isSvg) {\n        return this.renderSvg();\n      } else {\n        return this.renderRegularImage();\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.source !== prevState.prevSource) {\n        return {\n          error: false,\n          prevSource: nextProps.source\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Image;\n}(PureComponent);\n\nImage.propTypes = {\n  sourceTransformer: _pt.func,\n  assetName: _pt.string,\n  assetGroup: _pt.string,\n  tintColor: _pt.string,\n  supportRTL: _pt.bool,\n  cover: _pt.bool,\n  aspectRatio: _pt.number,\n  overlayColor: _pt.string,\n  customOverlayContent: _pt.element\n};\nImage.displayName = 'Image';\nImage.defaultProps = {\n  assetGroup: 'icons'\n};\nImage.overlayTypes = Overlay.overlayTypes;\nImage.overlayIntensityType = Overlay.intensityTypes;\nvar styles = StyleSheet.create({\n  rtlFlipped: {\n    transform: [{\n      scaleX: -1\n    }]\n  },\n  coverImage: {\n    width: '100%',\n    aspectRatio: 16 / 8\n  },\n  gifImage: {\n    overflow: 'hidden'\n  }\n});\nhoistNonReactStatic(Image, RNImage);\nexport { Image };\nexport default asBaseComponent(Image);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/image/index.js"],"names":["_pt","_","React","PureComponent","hoistNonReactStatic","Constants","asBaseComponent","Assets","Overlay","SvgImage","Image","props","onError","event","nativeEvent","error","setState","renderSvg","source","others","sourceTransformer","state","prevSource","isAndroid","url","get","isGif","test","overlayType","customOverlayContent","isUndefined","uri","undefined","assetName","assetGroup","getVerifiedSource","errorSource","getImageSource","tintColor","style","supportRTL","cover","aspectRatio","overlayIntensity","overlayColor","modifiers","shouldFlipRTL","isRTL","ImageView","shouldUseImageBackground","ImageBackground","RNImage","margins","styles","rtlFlipped","coverImage","gifImage","isSvg","renderRegularImage","nextProps","prevState","propTypes","func","string","bool","number","element","displayName","defaultProps","overlayTypes","overlayIntensityType","intensityTypes","StyleSheet","create","transform","scaleX","width","overflow"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { StyleSheet, Image as RNImage, ImageBackground } from 'react-native';\nimport Constants from \"../../helpers/Constants\";\nimport { asBaseComponent } from \"../../commons/new\"; // @ts-ignore\n\nimport Assets from \"../../assets\";\nimport Overlay from \"../overlay\";\nimport SvgImage from \"./SvgImage\";\n\n/**\n * @description: Image wrapper with extra functionality like source transform and assets support\n * @extends: Image\n * @extendsLink: https://reactnative.dev/docs/image\n * @notes: please note that for SVG support you need to add both\n * `react-native-svg` and `react-native-svg-transformer`,\n * and also configure them (see `metro.config.js`)\n */\nclass Image extends PureComponent {\n  static propTypes = {\n    /**\n       * custom source transform handler for manipulating the image source (great for size control)\n       */\n    sourceTransformer: _pt.func,\n\n    /**\n       * if provided image source will be driven from asset name\n       */\n    assetName: _pt.string,\n\n    /**\n       * the asset group, default is \"icons\"\n       */\n    assetGroup: _pt.string,\n\n    /**\n       * the asset tint\n       */\n    tintColor: _pt.string,\n\n    /**\n       * whether the image should flip horizontally on RTL locals\n       */\n    supportRTL: _pt.bool,\n\n    /**\n       * Show image as a cover, full width, image (according to aspect ratio, default: 16:8)\n       */\n    cover: _pt.bool,\n\n    /**\n       * The aspect ratio for the image\n       */\n    aspectRatio: _pt.number,\n\n    /**\n       * Pass a custom color for the overlay\n       */\n    overlayColor: _pt.string,\n\n    /**\n       * Render an overlay with custom content\n       */\n    customOverlayContent: _pt.element\n  };\n  static displayName = 'Image';\n  static defaultProps = {\n    assetGroup: 'icons'\n  };\n  static overlayTypes = Overlay.overlayTypes;\n  static overlayIntensityType = Overlay.intensityTypes;\n\n  constructor(props) {\n    super(props);\n    this.sourceTransformer = this.props.sourceTransformer;\n    this.state = {\n      error: false,\n      prevSource: props.source\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.source !== prevState.prevSource) {\n      return {\n        error: false,\n        prevSource: nextProps.source\n      };\n    }\n\n    return null;\n  }\n\n  isGif() {\n    if (Constants.isAndroid) {\n      const {\n        source\n      } = this.props;\n\n      const url = _.get(source, 'uri');\n\n      const isGif = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/.test(url);\n      return isGif;\n    }\n  }\n\n  shouldUseImageBackground() {\n    const {\n      overlayType,\n      customOverlayContent\n    } = this.props;\n    return !!overlayType || this.isGif() || !_.isUndefined(customOverlayContent);\n  }\n\n  getVerifiedSource(source) {\n    if (_.get(source, 'uri') === null || _.get(source, 'uri') === '') {\n      // @ts-ignore\n      return { ...source,\n        uri: undefined\n      };\n    }\n\n    return source;\n  }\n\n  getImageSource() {\n    const {\n      assetName,\n      assetGroup,\n      source\n    } = this.props;\n\n    if (!_.isUndefined(assetName)) {\n      return _.get(Assets, `${assetGroup}.${assetName}`);\n    }\n\n    if (this.sourceTransformer) {\n      return this.sourceTransformer(this.props);\n    }\n\n    return this.getVerifiedSource(source);\n  }\n\n  onError = event => {\n    if (event.nativeEvent.error) {\n      this.setState({\n        error: true\n      });\n      this.props.onError?.(event);\n    }\n  };\n  renderSvg = () => {\n    const {\n      source,\n      ...others\n    } = this.props;\n    return <SvgImage data={source} {...others} />;\n  };\n\n  renderRegularImage() {\n    const {\n      error\n    } = this.state;\n    const source = error ? this.getVerifiedSource(this.props.errorSource) : this.getImageSource();\n    const {\n      tintColor,\n      style,\n      supportRTL,\n      cover,\n      aspectRatio,\n      overlayType,\n      overlayIntensity,\n      overlayColor,\n      customOverlayContent,\n      modifiers,\n      ...others\n    } = this.props;\n    const shouldFlipRTL = supportRTL && Constants.isRTL;\n    const ImageView = this.shouldUseImageBackground() ? ImageBackground : RNImage;\n    const {\n      margins\n    } = modifiers;\n    return (// @ts-ignore\n      <ImageView style={[tintColor && {\n        tintColor\n      }, shouldFlipRTL && styles.rtlFlipped, cover && styles.coverImage, this.isGif() && styles.gifImage, aspectRatio && {\n        aspectRatio\n      }, margins, style]} accessible={false} accessibilityRole={'image'} {...others} onError={this.onError} source={source}>\n        {(overlayType || customOverlayContent) && <Overlay type={overlayType} intensity={overlayIntensity} color={overlayColor} customContent={customOverlayContent} />}\n      </ImageView>\n    );\n  }\n\n  render() {\n    const {\n      source\n    } = this.props;\n    const isSvg = typeof source === 'string' || typeof source === 'function';\n\n    if (isSvg) {\n      return this.renderSvg();\n    } else {\n      return this.renderRegularImage();\n    }\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  rtlFlipped: {\n    transform: [{\n      scaleX: -1\n    }]\n  },\n  coverImage: {\n    width: '100%',\n    aspectRatio: 16 / 8\n  },\n  gifImage: {\n    overflow: 'hidden'\n  }\n});\nhoistNonReactStatic(Image, RNImage);\nexport { Image };\nexport default asBaseComponent(Image);"]},"metadata":{},"sourceType":"module"}