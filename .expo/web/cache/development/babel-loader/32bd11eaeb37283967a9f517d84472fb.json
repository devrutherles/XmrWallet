{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport ReactNative from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nvar CustomInputControllerTemp = NativeModules.CustomInputControllerTemp;\n\nvar TextInputKeyboardManager = function TextInputKeyboardManager() {\n  _classCallCheck(this, TextInputKeyboardManager);\n};\n\nTextInputKeyboardManager.setInputComponent = function (textInputRef, _ref) {\n  var component = _ref.component,\n      initialProps = _ref.initialProps,\n      useSafeArea = _ref.useSafeArea;\n\n  if (!textInputRef || !CustomInputControllerTemp) {\n    return;\n  }\n\n  var reactTag = findNodeHandle(textInputRef);\n\n  if (reactTag) {\n    CustomInputControllerTemp.presentCustomInputComponent(reactTag, {\n      component: component,\n      initialProps: initialProps,\n      useSafeArea: useSafeArea\n    });\n  }\n};\n\nTextInputKeyboardManager.removeInputComponent = function (textInputRef) {\n  if (!textInputRef || !CustomInputControllerTemp) {\n    return;\n  }\n\n  var reactTag = findNodeHandle(textInputRef);\n\n  if (reactTag) {\n    CustomInputControllerTemp.resetInput(reactTag);\n  }\n};\n\nTextInputKeyboardManager.dismissKeyboard = function () {\n  CustomInputControllerTemp.dismissKeyboard();\n};\n\nTextInputKeyboardManager.toggleExpandKeyboard = function (textInputRef, expand) {\n  var performLayoutAnimation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (textInputRef) {\n    if (performLayoutAnimation) {\n      LayoutAnimation.configureNext(springAnimation);\n    }\n\n    var reactTag = findNodeHandle(textInputRef);\n\n    if (expand) {\n      CustomInputControllerTemp.expandFullScreenForInput(reactTag);\n    } else {\n      CustomInputControllerTemp.resetSizeForInput(reactTag);\n    }\n  }\n};\n\nexport { TextInputKeyboardManager as default };\n\nfunction findNodeHandle(ref) {\n  return ReactNative.findNodeHandle(ref.current || ref);\n}\n\nvar springAnimation = {\n  duration: 400,\n  create: {\n    type: LayoutAnimation.Types.linear,\n    property: LayoutAnimation.Properties.opacity\n  },\n  update: {\n    type: LayoutAnimation.Types.spring,\n    springDamping: 1.0\n  },\n  delete: {\n    type: LayoutAnimation.Types.linear,\n    property: LayoutAnimation.Properties.opacity\n  }\n};","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/TextInputKeyboardManager/TextInputKeyboardManager.ios.js"],"names":["ReactNative","CustomInputControllerTemp","NativeModules","TextInputKeyboardManager","setInputComponent","textInputRef","component","initialProps","useSafeArea","reactTag","findNodeHandle","presentCustomInputComponent","removeInputComponent","resetInput","dismissKeyboard","toggleExpandKeyboard","expand","performLayoutAnimation","LayoutAnimation","configureNext","springAnimation","expandFullScreenForInput","resetSizeForInput","ref","current","duration","create","type","Types","linear","property","Properties","opacity","update","spring","springDamping","delete"],"mappings":";OAAOA,W;;;AACP,IAAMC,yBAAyB,GAAGC,aAAa,CAACD,yBAAhD;;IACqBE,wB;;;;AAAAA,wB,CACZC,iB,GAAoB,UAACC,YAAD,QAIrB;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,YAEI,QAFJA,YAEI;AAAA,MADJC,WACI,QADJA,WACI;;AACJ,MAAI,CAACH,YAAD,IAAiB,CAACJ,yBAAtB,EAAiD;AAC/C;AACD;;AAED,MAAMQ,QAAQ,GAAGC,cAAc,CAACL,YAAD,CAA/B;;AAEA,MAAII,QAAJ,EAAc;AACZR,IAAAA,yBAAyB,CAACU,2BAA1B,CAAsDF,QAAtD,EAAgE;AAC9DH,MAAAA,SAAS,EAATA,SAD8D;AAE9DC,MAAAA,YAAY,EAAZA,YAF8D;AAG9DC,MAAAA,WAAW,EAAXA;AAH8D,KAAhE;AAKD;AACF,C;;AAnBkBL,wB,CAoBZS,oB,GAAuB,UAAAP,YAAY,EAAI;AAC5C,MAAI,CAACA,YAAD,IAAiB,CAACJ,yBAAtB,EAAiD;AAC/C;AACD;;AAED,MAAMQ,QAAQ,GAAGC,cAAc,CAACL,YAAD,CAA/B;;AAEA,MAAII,QAAJ,EAAc;AACZR,IAAAA,yBAAyB,CAACY,UAA1B,CAAqCJ,QAArC;AACD;AACF,C;;AA9BkBN,wB,CA+BZW,e,GAAkB,YAAM;AAC7Bb,EAAAA,yBAAyB,CAACa,eAA1B;AACD,C;;AAjCkBX,wB,CAkCZY,oB,GAAuB,UAACV,YAAD,EAAeW,MAAf,EAA0D;AAAA,MAAnCC,sBAAmC,uEAAV,KAAU;;AACtF,MAAIZ,YAAJ,EAAkB;AAChB,QAAIY,sBAAJ,EAA4B;AAC1BC,MAAAA,eAAe,CAACC,aAAhB,CAA8BC,eAA9B;AACD;;AAED,QAAMX,QAAQ,GAAGC,cAAc,CAACL,YAAD,CAA/B;;AAEA,QAAIW,MAAJ,EAAY;AACVf,MAAAA,yBAAyB,CAACoB,wBAA1B,CAAmDZ,QAAnD;AACD,KAFD,MAEO;AACLR,MAAAA,yBAAyB,CAACqB,iBAA1B,CAA4Cb,QAA5C;AACD;AACF;AACF,C;;SAhDkBN,wB;;AAmDrB,SAASO,cAAT,CAAwBa,GAAxB,EAA6B;AAC3B,SAAOvB,WAAW,CAACU,cAAZ,CAA2Ba,GAAG,CAACC,OAAJ,IAAeD,GAA1C,CAAP;AACD;;AAED,IAAMH,eAAe,GAAG;AACtBK,EAAAA,QAAQ,EAAE,GADY;AAEtBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAET,eAAe,CAACU,KAAhB,CAAsBC,MADtB;AAENC,IAAAA,QAAQ,EAAEZ,eAAe,CAACa,UAAhB,CAA2BC;AAF/B,GAFc;AAMtBC,EAAAA,MAAM,EAAE;AACNN,IAAAA,IAAI,EAAET,eAAe,CAACU,KAAhB,CAAsBM,MADtB;AAENC,IAAAA,aAAa,EAAE;AAFT,GANc;AAUtBC,EAAAA,MAAM,EAAE;AACNT,IAAAA,IAAI,EAAET,eAAe,CAACU,KAAhB,CAAsBC,MADtB;AAENC,IAAAA,QAAQ,EAAEZ,eAAe,CAACa,UAAhB,CAA2BC;AAF/B;AAVc,CAAxB","sourcesContent":["import ReactNative, { NativeModules, LayoutAnimation } from 'react-native';\nconst CustomInputControllerTemp = NativeModules.CustomInputControllerTemp;\nexport default class TextInputKeyboardManager {\n  static setInputComponent = (textInputRef, {\n    component,\n    initialProps,\n    useSafeArea\n  }) => {\n    if (!textInputRef || !CustomInputControllerTemp) {\n      return;\n    }\n\n    const reactTag = findNodeHandle(textInputRef);\n\n    if (reactTag) {\n      CustomInputControllerTemp.presentCustomInputComponent(reactTag, {\n        component,\n        initialProps,\n        useSafeArea\n      });\n    }\n  };\n  static removeInputComponent = textInputRef => {\n    if (!textInputRef || !CustomInputControllerTemp) {\n      return;\n    }\n\n    const reactTag = findNodeHandle(textInputRef);\n\n    if (reactTag) {\n      CustomInputControllerTemp.resetInput(reactTag);\n    }\n  };\n  static dismissKeyboard = () => {\n    CustomInputControllerTemp.dismissKeyboard();\n  };\n  static toggleExpandKeyboard = (textInputRef, expand, performLayoutAnimation = false) => {\n    if (textInputRef) {\n      if (performLayoutAnimation) {\n        LayoutAnimation.configureNext(springAnimation);\n      }\n\n      const reactTag = findNodeHandle(textInputRef);\n\n      if (expand) {\n        CustomInputControllerTemp.expandFullScreenForInput(reactTag);\n      } else {\n        CustomInputControllerTemp.resetSizeForInput(reactTag);\n      }\n    }\n  };\n}\n\nfunction findNodeHandle(ref) {\n  return ReactNative.findNodeHandle(ref.current || ref);\n}\n\nconst springAnimation = {\n  duration: 400,\n  create: {\n    type: LayoutAnimation.Types.linear,\n    property: LayoutAnimation.Properties.opacity\n  },\n  update: {\n    type: LayoutAnimation.Types.spring,\n    springDamping: 1.0\n  },\n  delete: {\n    type: LayoutAnimation.Types.linear,\n    property: LayoutAnimation.Properties.opacity\n  }\n};"]},"metadata":{},"sourceType":"module"}