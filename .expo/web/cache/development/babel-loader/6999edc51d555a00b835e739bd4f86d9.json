{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport memoize from 'memoize-one';\nimport { asBaseComponent, forwardRef } from \"../../commons\";\nimport { Constants } from \"../../helpers\";\nimport { LogService } from \"../../services\";\nimport View from \"../../components/view\";\nimport Modal from \"../modal\";\nimport Button from \"../../components/button\";\nimport { TextField } from \"../inputs\";\nimport NativePicker from \"./NativePicker\";\nimport PickerModal from \"./PickerModal\";\nimport PickerItem from \"./PickerItem\";\nimport PickerContext from \"./PickerContext\";\nimport { getItemLabel as getItemLabelPresenter, shouldFilterOut } from \"./PickerPresenter\";\nvar PICKER_MODES = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI'\n};\nvar ItemType = PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.shape({\n  value: PropTypes.any,\n  label: PropTypes.string\n})]);\n\nvar Picker = function (_Component) {\n  _inherits(Picker, _Component);\n\n  var _super = _createSuper(Picker);\n\n  function Picker(props) {\n    var _this;\n\n    _classCallCheck(this, Picker);\n\n    _this = _super.call(this, props);\n\n    _this.getContextValue = function () {\n      var value = _this.state.value;\n      var _this$props = _this.props,\n          migrate = _this$props.migrate,\n          mode = _this$props.mode,\n          getItemValue = _this$props.getItemValue,\n          getItemLabel = _this$props.getItemLabel,\n          renderItem = _this$props.renderItem,\n          selectionLimit = _this$props.selectionLimit;\n      var pickerValue = !migrate && _.isPlainObject(value) ? value == null ? void 0 : value.value : value;\n      return {\n        migrate: migrate,\n        value: pickerValue,\n        onPress: mode === Picker.modes.MULTI ? _this.toggleItemSelection : _this.onDoneSelecting,\n        isMultiMode: mode === Picker.modes.MULTI,\n        getItemValue: getItemValue,\n        getItemLabel: getItemLabel,\n        onSelectedLayout: _this.onSelectedItemLayout,\n        renderItem: renderItem,\n        selectionLimit: selectionLimit\n      };\n    };\n\n    _this.getLabelValueText = function () {\n      var value = _this.props.value;\n      return _this.getLabel(value);\n    };\n\n    _this.getLabelsFromArray = function (value) {\n      var items = _this.state.items;\n\n      var itemsByValue = _.keyBy(items, 'value');\n\n      var _this$props$getItemLa = _this.props.getItemLabel,\n          getItemLabel = _this$props$getItemLa === void 0 ? _.noop : _this$props$getItemLa;\n      return _.chain(value).map(function (item) {\n        var _itemsByValue$item;\n\n        return _.isPlainObject(item) ? getItemLabel(item) || (item == null ? void 0 : item.label) : (_itemsByValue$item = itemsByValue[item]) == null ? void 0 : _itemsByValue$item.label;\n      }).join(', ').value();\n    };\n\n    _this.getLabel = function (value) {\n      var getLabel = _this.props.getLabel;\n\n      if (_.isFunction(getLabel) && !_.isUndefined(getLabel(value))) {\n        return getLabel(value);\n      }\n\n      if (_.isArray(value)) {\n        return _this.getLabelsFromArray(value);\n      }\n\n      if (_.isPlainObject(value)) {\n        return _.get(value, 'label');\n      }\n\n      var items = _this.state.items;\n\n      var selectedItem = _.find(items, {\n        value: value\n      });\n\n      return _.get(selectedItem, 'label');\n    };\n\n    _this.getFilteredChildren = memoize(function (children, searchValue) {\n      var getItemLabelPicker = _this.props.getItemLabel;\n      return _.filter(children, function (child) {\n        var _child$props = child.props,\n            label = _child$props.label,\n            value = _child$props.value,\n            getItemLabel = _child$props.getItemLabel;\n        var itemLabel = getItemLabelPresenter(label, value, getItemLabel || getItemLabelPicker);\n        return !shouldFilterOut(searchValue, itemLabel);\n      });\n    });\n\n    _this.handlePickerOnPress = function () {\n      _this.toggleExpandableModal(true);\n\n      _.invoke(_this.props, 'onPress');\n    };\n\n    _this.toggleExpandableModal = function (value) {\n      _this.setState({\n        showExpandableModal: value\n      });\n\n      _this.clearSearchField();\n    };\n\n    _this.toggleItemSelection = function (item) {\n      var getItemValue = _this.props.getItemValue;\n      var value = _this.state.value;\n      var newValue;\n\n      if (_.isPlainObject(value)) {\n        newValue = _.xorBy(value, [item], getItemValue || 'value');\n      } else {\n        newValue = _.xor(value, [item]);\n      }\n\n      _this.setState({\n        value: newValue\n      });\n    };\n\n    _this.cancelSelect = function () {\n      _this.setState({\n        value: _this.props.value\n      });\n\n      _this.toggleExpandableModal(false);\n\n      _.invoke(_this.props, 'topBarProps.onCancel');\n    };\n\n    _this.onDoneSelecting = function (item) {\n      _this.clearSearchField();\n\n      _this.setState({\n        value: item\n      });\n\n      _this.toggleExpandableModal(false);\n\n      _.invoke(_this.props, 'onChange', item);\n    };\n\n    _this.onSearchChange = function (searchValue) {\n      _this.setState({\n        searchValue: searchValue\n      });\n\n      _.invoke(_this.props, 'onSearchChange', searchValue);\n    };\n\n    _this.onSelectedItemLayout = function (_ref) {\n      var y = _ref.nativeEvent.layout.y;\n\n      _this.setState({\n        selectedItemPosition: y\n      });\n    };\n\n    _this.clearSearchField = function () {\n      _this.setState({\n        searchValue: ''\n      });\n    };\n\n    _this.renderExpandableModal = function () {\n      var _this$props2 = _this.props,\n          mode = _this$props2.mode,\n          enableModalBlur = _this$props2.enableModalBlur,\n          topBarProps = _this$props2.topBarProps,\n          showSearch = _this$props2.showSearch,\n          onShow = _this$props2.onShow,\n          searchStyle = _this$props2.searchStyle,\n          searchPlaceholder = _this$props2.searchPlaceholder,\n          renderCustomSearch = _this$props2.renderCustomSearch,\n          renderCustomModal = _this$props2.renderCustomModal,\n          listProps = _this$props2.listProps,\n          children = _this$props2.children,\n          testID = _this$props2.testID,\n          pickerModalProps = _this$props2.pickerModalProps;\n      var _this$state = _this.state,\n          showExpandableModal = _this$state.showExpandableModal,\n          selectedItemPosition = _this$state.selectedItemPosition,\n          value = _this$state.value;\n\n      if (renderCustomModal) {\n        var modalProps = {\n          visible: showExpandableModal,\n          toggleModal: _this.toggleExpandableModal,\n          onSearchChange: _this.onSearchChange,\n          children: children,\n          onDone: function onDone() {\n            return _this.onDoneSelecting(value);\n          },\n          onCancel: _this.cancelSelect\n        };\n        return React.createElement(React.Fragment, null, React.createElement(PickerContext.Provider, {\n          value: _this.getContextValue()\n        }, renderCustomModal(modalProps)));\n      }\n\n      return React.createElement(PickerContext.Provider, {\n        value: _this.getContextValue()\n      }, React.createElement(PickerModal, {\n        testID: testID + \".modal\",\n        visible: showExpandableModal,\n        scrollPosition: selectedItemPosition,\n        enableModalBlur: enableModalBlur,\n        topBarProps: _objectSpread(_objectSpread({}, topBarProps), {}, {\n          onCancel: _this.cancelSelect,\n          onDone: mode === Picker.modes.MULTI ? function () {\n            return _this.onDoneSelecting(value);\n          } : undefined\n        }),\n        showSearch: showSearch,\n        searchStyle: searchStyle,\n        searchPlaceholder: searchPlaceholder,\n        onSearchChange: _this.onSearchChange,\n        renderCustomSearch: renderCustomSearch,\n        listProps: listProps,\n        onShow: onShow,\n        pickerModalProps: pickerModalProps\n      }, _this.children));\n    };\n\n    _this.state = {\n      value: props.value,\n      prevValue: undefined,\n      selectedItemPosition: 0,\n      items: Picker.extractPickerItems(props)\n    };\n\n    if (props.mode === Picker.modes.SINGLE && Array.isArray(props.value)) {\n      LogService.warn('Picker in SINGLE mode cannot accept an array for value');\n    }\n\n    if (props.mode === Picker.modes.MULTI && !Array.isArray(props.value)) {\n      LogService.warn('Picker in MULTI mode must accept an array for value');\n    }\n\n    if (_.isPlainObject(props.value)) {\n      LogService.warn('UILib Picker will stop supporting passing object as value in the next major version. Please use either string or a number as value');\n    }\n\n    return _this;\n  }\n\n  _createClass(Picker, [{\n    key: \"getAccessibilityInfo\",\n    value: function getAccessibilityInfo() {\n      var placeholder = this.props.placeholder;\n      return {\n        accessibilityLabel: this.getLabelValueText() ? placeholder + \". selected. \" + this.getLabelValueText() : \"Select \" + placeholder,\n        accessibilityHint: this.getLabelValueText() ? 'Double tap to edit' : \"Goes to \" + placeholder + \". Suggestions will be provided\"\n      };\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var searchValue = this.state.searchValue;\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          showSearch = _this$props3.showSearch;\n\n      if (showSearch && !_.isEmpty(searchValue)) {\n        return this.getFilteredChildren(children, searchValue);\n      }\n\n      return children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          useNativePicker = _this$props4.useNativePicker,\n          renderPicker = _this$props4.renderPicker,\n          customPickerProps = _this$props4.customPickerProps,\n          containerStyle = _this$props4.containerStyle,\n          testID = _this$props4.testID,\n          forwardedRef = _this$props4.forwardedRef,\n          modifiers = _this$props4.modifiers;\n\n      if (useNativePicker) {\n        return React.createElement(NativePicker, this.props);\n      }\n\n      if (_.isFunction(renderPicker)) {\n        var value = this.state.value;\n        return React.createElement(View, {\n          left: true\n        }, React.createElement(Button, _extends({}, customPickerProps, {\n          link: true,\n          onPress: this.handlePickerOnPress,\n          testID: testID\n        }), renderPicker(value, this.getLabel(value))), this.renderExpandableModal());\n      }\n\n      var textInputProps = TextField.extractOwnProps(this.props);\n      var label = this.getLabelValueText();\n      var paddings = modifiers.paddings,\n          margins = modifiers.margins,\n          positionStyle = modifiers.positionStyle;\n      return React.createElement(TextField, _extends({\n        ref: forwardedRef\n      }, textInputProps, {\n        containerStyle: [paddings, margins, positionStyle, containerStyle]\n      }, this.getAccessibilityInfo(), {\n        importantForAccessibility: 'no-hide-descendants',\n        value: label,\n        expandable: true,\n        renderExpandable: this.renderExpandableModal,\n        onToggleExpandableModal: this.toggleExpandableModal,\n        selection: Constants.isAndroid ? {\n          start: 0\n        } : undefined\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var hasNextValue = !_.isEmpty(nextProps.value) || _.isNumber(nextProps.value);\n\n      var externalValueChanged = hasNextValue && prevState.value !== nextProps.value;\n      var internalValueChanged = prevState.value !== prevState.prevValue;\n\n      if (internalValueChanged && nextProps.mode === Picker.modes.MULTI) {\n        return {\n          prevValue: prevState.value\n        };\n      } else if (externalValueChanged) {\n        return {\n          value: nextProps.value\n        };\n      } else if (_.isFunction(nextProps.renderPicker) && externalValueChanged) {\n        return {\n          prevValue: prevState.value,\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"extractPickerItems\",\n    value: function extractPickerItems(props) {\n      var children = props.children;\n      var items = React.Children.map(children, function (child) {\n        return {\n          value: child.props.value,\n          label: child.props.label\n        };\n      });\n      return items;\n    }\n  }]);\n\n  return Picker;\n}(Component);\n\nPicker.displayName = 'Picker';\nPicker.propTypes = _objectSpread(_objectSpread({\n  migrate: PropTypes.bool\n}, TextField.propTypes), {}, {\n  value: PropTypes.oneOfType([ItemType, PropTypes.arrayOf(ItemType), PropTypes.object, PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  mode: PropTypes.oneOf(Object.keys(PICKER_MODES)),\n  selectionLimit: PropTypes.number,\n  enableModalBlur: PropTypes.bool,\n  renderPicker: PropTypes.elementType,\n  renderItem: PropTypes.elementType,\n  renderCustomModal: PropTypes.elementType,\n  customPickerProps: PropTypes.object,\n  onPress: PropTypes.func,\n  getItemValue: PropTypes.func,\n  getItemLabel: PropTypes.func,\n  getLabel: PropTypes.func,\n  topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n  showSearch: PropTypes.bool,\n  searchStyle: PropTypes.shape({\n    color: PropTypes.string,\n    placeholderTextColor: PropTypes.string,\n    selectionColor: PropTypes.string\n  }),\n  searchPlaceholder: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  renderCustomSearch: PropTypes.elementType,\n  useNativePicker: PropTypes.bool,\n  renderNativePicker: PropTypes.elementType,\n  listProps: PropTypes.object,\n  pickerModalProps: PropTypes.object\n});\nPicker.defaultProps = _objectSpread(_objectSpread({}, TextField.defaultProps), {}, {\n  mode: PICKER_MODES.SINGLE\n});\nPicker.modes = PICKER_MODES;\nPicker.Item = PickerItem;\nexport { Picker };\nexport default asBaseComponent(forwardRef(Picker));","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/picker/index.js"],"names":["_","PropTypes","React","Component","memoize","asBaseComponent","forwardRef","Constants","LogService","View","Modal","Button","TextField","NativePicker","PickerModal","PickerItem","PickerContext","getItemLabel","getItemLabelPresenter","shouldFilterOut","PICKER_MODES","SINGLE","MULTI","ItemType","oneOfType","number","string","shape","value","any","label","Picker","props","getContextValue","state","migrate","mode","getItemValue","renderItem","selectionLimit","pickerValue","isPlainObject","onPress","modes","toggleItemSelection","onDoneSelecting","isMultiMode","onSelectedLayout","onSelectedItemLayout","getLabelValueText","getLabel","getLabelsFromArray","items","itemsByValue","keyBy","noop","chain","map","item","join","isFunction","isUndefined","isArray","get","selectedItem","find","getFilteredChildren","children","searchValue","getItemLabelPicker","filter","child","itemLabel","handlePickerOnPress","toggleExpandableModal","invoke","setState","showExpandableModal","clearSearchField","newValue","xorBy","xor","cancelSelect","onSearchChange","y","nativeEvent","layout","selectedItemPosition","renderExpandableModal","enableModalBlur","topBarProps","showSearch","onShow","searchStyle","searchPlaceholder","renderCustomSearch","renderCustomModal","listProps","testID","pickerModalProps","modalProps","visible","toggleModal","onDone","onCancel","undefined","prevValue","extractPickerItems","Array","warn","placeholder","accessibilityLabel","accessibilityHint","isEmpty","useNativePicker","renderPicker","customPickerProps","containerStyle","forwardedRef","modifiers","textInputProps","extractOwnProps","paddings","margins","positionStyle","getAccessibilityInfo","isAndroid","start","nextProps","prevState","hasNextValue","isNumber","externalValueChanged","internalValueChanged","Children","displayName","propTypes","bool","arrayOf","object","onChange","func","oneOf","Object","keys","elementType","TopBar","color","placeholderTextColor","selectionColor","renderNativePicker","defaultProps","Item"],"mappings":"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","sourcesContent":["// TODO: deprecate all places where we check if _.isPlainObject\n// TODO: deprecate getItemValue prop\n// TODO: deprecate getItemLabel prop\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport memoize from 'memoize-one';\nimport {asBaseComponent, forwardRef} from '../../commons';\nimport {Constants} from '../../helpers';\nimport {LogService} from '../../services';\nimport View from '../../components/view';\nimport Modal from '../modal';\nimport Button from '../../components/button';\nimport {TextField} from '../inputs';\nimport NativePicker from './NativePicker';\nimport PickerModal from './PickerModal';\nimport PickerItem from './PickerItem';\nimport PickerContext from './PickerContext';\nimport {getItemLabel as getItemLabelPresenter, shouldFilterOut} from './PickerPresenter';\n\nconst PICKER_MODES = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI'\n};\nconst ItemType = PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.shape({\n    value: PropTypes.any,\n    label: PropTypes.string\n  })\n]);\n\n/**\n * @description: Picker Component, support single or multiple selection, blurModel and nativePicker\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/MultiPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/NativePicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/DialogPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/CustomPicker.gif?raw=true\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js\n * @notes: 'useNativePicker' prop requires installing the '@react-native-picker/picker' native library\n */\nclass Picker extends Component {\n  static displayName = 'Picker';\n  static propTypes = {\n    /**\n     * Temporary prop required for migration to Picker's new API\n     */\n    migrate: PropTypes.bool,\n    ...TextField.propTypes,\n    /**\n     * Picker current value in the shape of {value: ..., label: ...}, for custom shape use 'getItemValue' prop\n     */\n    value: PropTypes.oneOfType([\n      ItemType,\n      PropTypes.arrayOf(ItemType),\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    /**\n     * Callback for when picker value change\n     */\n    onChange: PropTypes.func,\n    /**\n     * SINGLE mode or MULTI mode\n     */\n    mode: PropTypes.oneOf(Object.keys(PICKER_MODES)),\n    /**\n     * Limit the number of selected items\n     */\n    selectionLimit: PropTypes.number,\n    /**\n     * Adds blur effect to picker modal (iOS only)\n     */\n    enableModalBlur: PropTypes.bool,\n    /**\n     * Render custom picker - input will be value (see above)\n     * Example:\n     * renderPicker = (selectedItem) => {...}\n     */\n    renderPicker: PropTypes.elementType,\n    /**\n     * Render custom picker item\n     */\n    renderItem: PropTypes.elementType,\n    /**\n     * Render custom picker modal (e.g ({visible, children, toggleModal}) => {...})\n     */\n    renderCustomModal: PropTypes.elementType,\n    /**\n     * Custom picker props (when using renderPicker, will apply on the button wrapper)\n     */\n    customPickerProps: PropTypes.object,\n    /**\n     * Add onPress callback for when pressing the picker\n     */\n    onPress: PropTypes.func,\n    /**\n     * A function that extract the unique value out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})\n     */\n    getItemValue: PropTypes.func,\n    /**\n     * A function that extract the label out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})\n     */\n    getItemLabel: PropTypes.func,\n    /**\n     * A function that returns the label to show for the selected Picker value\n     */\n    getLabel: PropTypes.func,\n    /**\n     * The picker modal top bar props\n     */\n    topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n    /**\n     * Show search input to filter picker items by label\n     */\n    showSearch: PropTypes.bool,\n    /**\n     * Style object for the search input (only when passing showSearch)\n     */\n    searchStyle: PropTypes.shape({\n      color: PropTypes.string,\n      placeholderTextColor: PropTypes.string,\n      selectionColor: PropTypes.string\n    }),\n    /**\n     * Placeholder text for the search input (only when passing showSearch)\n     */\n    searchPlaceholder: PropTypes.string,\n    /**\n     * callback for picker modal search input text change (only when passing showSearch)\n     */\n    onSearchChange: PropTypes.func,\n    /**\n     * Render custom search input (only when passing showSearch)\n     */\n    renderCustomSearch: PropTypes.elementType,\n    /**\n     * Allow to use the native picker solution (different style for iOS and Android)\n     */\n    useNativePicker: PropTypes.bool,\n    /**\n     * Callback for rendering a custom native picker inside the dialog (relevant to native picker only)\n     */\n    renderNativePicker: PropTypes.elementType,\n    /**\n     * Pass props to the list component that wraps the picker options (allows to control FlatList behavior)\n     */\n    listProps: PropTypes.object,\n    /**\n     * Pass props to the picker modal\n     */\n    pickerModalProps: PropTypes.object\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    mode: PICKER_MODES.SINGLE\n  };\n\n  static modes = PICKER_MODES;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      prevValue: undefined,\n      selectedItemPosition: 0,\n      items: Picker.extractPickerItems(props)\n    };\n\n    if (props.mode === Picker.modes.SINGLE && Array.isArray(props.value)) {\n      LogService.warn('Picker in SINGLE mode cannot accept an array for value');\n    }\n    if (props.mode === Picker.modes.MULTI && !Array.isArray(props.value)) {\n      LogService.warn('Picker in MULTI mode must accept an array for value');\n    }\n\n    // TODO: this warning should be replaced by the opposite\n    // we should warn user NOT to pass an object to the value prop\n    // if (props.useNativePicker && _.isPlainObject(props.value)) {\n    //   console.warn('UILib Picker: don\\'t use object as value for native picker, use either string or a number');\n    // }\n    if (_.isPlainObject(props.value)) {\n      LogService.warn('UILib Picker will stop supporting passing object as value in the next major version. Please use either string or a number as value');\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const hasNextValue = !_.isEmpty(nextProps.value) || _.isNumber(nextProps.value);\n    /* Relevant for keeping the value prop controlled - react when user change value prop */\n    const externalValueChanged = hasNextValue && prevState.value !== nextProps.value;\n    /* Relevant for multi select mode when we keep an internal value state */\n    const internalValueChanged = prevState.value !== prevState.prevValue;\n    if (internalValueChanged && nextProps.mode === Picker.modes.MULTI) {\n      /* for this.setState() updates to 'value'\n      NOTE: this.setState() already updated the 'value' so here we only updating the 'prevValue' */\n      return {\n        prevValue: prevState.value\n      };\n    } else if (externalValueChanged) {\n      return {\n        value: nextProps.value\n      };\n    } else if (_.isFunction(nextProps.renderPicker) && externalValueChanged) {\n      return {\n        prevValue: prevState.value,\n        value: nextProps.value\n      };\n    }\n    return null;\n  }\n\n  static extractPickerItems(props) {\n    const {children} = props;\n    const items = React.Children.map(children, child => ({value: child.props.value, label: child.props.label}));\n    return items;\n  }\n\n  getAccessibilityInfo() {\n    const {placeholder} = this.props;\n\n    return {\n      accessibilityLabel: this.getLabelValueText()\n        ? `${placeholder}. selected. ${this.getLabelValueText()}`\n        : `Select ${placeholder}`,\n      accessibilityHint: this.getLabelValueText()\n        ? 'Double tap to edit'\n        : `Goes to ${placeholder}. Suggestions will be provided`\n    };\n  }\n\n  getContextValue = () => {\n    const {value} = this.state;\n    const {migrate, mode, getItemValue, getItemLabel, renderItem, selectionLimit} = this.props;\n    const pickerValue = !migrate && _.isPlainObject(value) ? value?.value : value;\n    return {\n      migrate,\n      value: pickerValue,\n      onPress: mode === Picker.modes.MULTI ? this.toggleItemSelection : this.onDoneSelecting,\n      isMultiMode: mode === Picker.modes.MULTI,\n      getItemValue,\n      getItemLabel,\n      onSelectedLayout: this.onSelectedItemLayout,\n      renderItem,\n      selectionLimit\n    };\n  };\n\n  getLabelValueText = () => {\n    const {value} = this.props;\n    return this.getLabel(value);\n  };\n\n  getLabelsFromArray = value => {\n    const {items} = this.state;\n    const itemsByValue = _.keyBy(items, 'value');\n\n    const {getItemLabel = _.noop} = this.props;\n    return _.chain(value)\n      .map(item => (_.isPlainObject(item) ? getItemLabel(item) || item?.label : itemsByValue[item]?.label))\n      .join(', ')\n      .value();\n  };\n\n  getLabel = value => {\n    const {getLabel} = this.props;\n\n    if (_.isFunction(getLabel) && !_.isUndefined(getLabel(value))) {\n      return getLabel(value);\n    }\n\n    if (_.isArray(value)) {\n      return this.getLabelsFromArray(value);\n    }\n\n    if (_.isPlainObject(value)) {\n      return _.get(value, 'label');\n    }\n\n    // otherwise, extract from picker items\n    const {items} = this.state;\n    const selectedItem = _.find(items, {value});\n\n    return _.get(selectedItem, 'label');\n  };\n\n  getFilteredChildren = memoize((children, searchValue) => {\n    const {getItemLabel: getItemLabelPicker} = this.props;\n    return _.filter(children, child => {\n      const {label, value, getItemLabel} = child.props;\n      const itemLabel = getItemLabelPresenter(label, value, getItemLabel || getItemLabelPicker);\n      return !shouldFilterOut(searchValue, itemLabel);\n    });\n  });\n\n  get children() {\n    const {searchValue} = this.state;\n    const {children, showSearch} = this.props;\n    if (showSearch && !_.isEmpty(searchValue)) {\n      return this.getFilteredChildren(children, searchValue);\n    }\n\n    return children;\n  }\n\n  handlePickerOnPress = () => {\n    this.toggleExpandableModal(true);\n    _.invoke(this.props, 'onPress');\n  };\n\n  toggleExpandableModal = value => {\n    this.setState({showExpandableModal: value});\n    this.clearSearchField();\n  };\n\n  toggleItemSelection = item => {\n    const {getItemValue} = this.props;\n    const {value} = this.state;\n    let newValue;\n    if (_.isPlainObject(value)) {\n      newValue = _.xorBy(value, [item], getItemValue || 'value');\n    } else {\n      newValue = _.xor(value, [item]);\n    }\n\n    this.setState({value: newValue});\n  };\n\n  cancelSelect = () => {\n    this.setState({value: this.props.value});\n    this.toggleExpandableModal(false);\n    _.invoke(this.props, 'topBarProps.onCancel');\n  };\n\n  onDoneSelecting = item => {\n    this.clearSearchField();\n    this.setState({value: item});\n    this.toggleExpandableModal(false);\n    _.invoke(this.props, 'onChange', item);\n  };\n\n  onSearchChange = searchValue => {\n    this.setState({searchValue});\n    _.invoke(this.props, 'onSearchChange', searchValue);\n  };\n\n  onSelectedItemLayout = ({\n    nativeEvent: {\n      layout: {y}\n    }\n  }) => {\n    this.setState({selectedItemPosition: y});\n  };\n\n  clearSearchField = () => {\n    this.setState({searchValue: ''});\n  };\n\n  renderExpandableModal = () => {\n    const {\n      mode,\n      enableModalBlur,\n      topBarProps,\n      showSearch,\n      onShow,\n      searchStyle,\n      searchPlaceholder,\n      renderCustomSearch,\n      renderCustomModal,\n      listProps,\n      children,\n      testID,\n      pickerModalProps\n    } = this.props;\n    const {showExpandableModal, selectedItemPosition, value} = this.state;\n\n    if (renderCustomModal) {\n      const modalProps = {\n        visible: showExpandableModal,\n        toggleModal: this.toggleExpandableModal,\n        onSearchChange: this.onSearchChange,\n        children,\n        onDone: () => this.onDoneSelecting(value),\n        onCancel: this.cancelSelect\n      };\n\n      return (\n        <>\n          <PickerContext.Provider value={this.getContextValue()}>\n            {renderCustomModal(modalProps)}\n          </PickerContext.Provider>\n        </>\n      );\n    }\n\n    return (\n      <PickerContext.Provider value={this.getContextValue()}>\n        <PickerModal\n          testID={`${testID}.modal`}\n          visible={showExpandableModal}\n          scrollPosition={selectedItemPosition}\n          enableModalBlur={enableModalBlur}\n          topBarProps={{\n            ...topBarProps,\n            onCancel: this.cancelSelect,\n            onDone: mode === Picker.modes.MULTI ? () => this.onDoneSelecting(value) : undefined\n          }}\n          showSearch={showSearch}\n          searchStyle={searchStyle}\n          searchPlaceholder={searchPlaceholder}\n          onSearchChange={this.onSearchChange}\n          renderCustomSearch={renderCustomSearch}\n          listProps={listProps}\n          onShow={onShow}\n          pickerModalProps={pickerModalProps}\n        >\n          {this.children}\n        </PickerModal>\n      </PickerContext.Provider>\n    );\n  };\n\n  render() {\n    const {useNativePicker, renderPicker, customPickerProps, containerStyle, testID, forwardedRef, modifiers} =\n      this.props;\n\n    if (useNativePicker) {\n      return <NativePicker {...this.props}/>;\n    }\n\n    if (_.isFunction(renderPicker)) {\n      const {value} = this.state;\n\n      return (\n        <View left>\n          <Button {...customPickerProps} link onPress={this.handlePickerOnPress} testID={testID}>\n            {renderPicker(value, this.getLabel(value))}\n          </Button>\n          {this.renderExpandableModal()}\n        </View>\n      );\n    }\n\n    const textInputProps = TextField.extractOwnProps(this.props);\n    const label = this.getLabelValueText();\n    const {paddings, margins, positionStyle} = modifiers;\n\n    return (\n      <TextField\n        ref={forwardedRef}\n        {...textInputProps}\n        containerStyle={[paddings, margins, positionStyle, containerStyle]}\n        {...this.getAccessibilityInfo()}\n        importantForAccessibility={'no-hide-descendants'}\n        value={label}\n        expandable\n        renderExpandable={this.renderExpandableModal}\n        onToggleExpandableModal={this.toggleExpandableModal}\n        selection={Constants.isAndroid ? {start: 0} : undefined}\n      />\n    );\n  }\n}\n\nPicker.Item = PickerItem;\n\nexport {Picker}; // For tests\nexport default asBaseComponent(forwardRef(Picker));\n"]},"metadata":{},"sourceType":"module"}