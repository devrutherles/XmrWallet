{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport _ from 'lodash';\nvar SafeAreaInsetsCache = null;\nvar NativeSafeAreaManager = NativeModules.SafeAreaManager;\n\nvar SafeAreaInsetsManager = function () {\n  function SafeAreaInsetsManager() {\n    _classCallCheck(this, SafeAreaInsetsManager);\n\n    this._defaultInsets = {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    };\n    this._safeAreaInsets = {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    };\n    this._safeAreaChangedDelegates = [];\n    this.addSafeAreaChangedListener();\n  }\n\n  _createClass(SafeAreaInsetsManager, [{\n    key: \"addSafeAreaChangedListener\",\n    value: function addSafeAreaChangedListener() {\n      var _this = this;\n\n      if (!NativeSafeAreaManager) {\n        return;\n      }\n\n      var NativeSafeAreaEvents = new NativeEventEmitter(NativeSafeAreaManager);\n      NativeSafeAreaEvents.addListener('SafeAreaInsetsDidChangeEvent', function (safeAreaInsets) {\n        SafeAreaInsetsCache = safeAreaInsets;\n        _this._safeAreaInsets = SafeAreaInsetsCache;\n\n        _.forEach(_this._safeAreaChangedDelegates, function (delegate) {\n          if (delegate.onSafeAreaInsetsDidChangeEvent) {\n            delegate.onSafeAreaInsetsDidChangeEvent(_this._safeAreaInsets);\n          } else {\n            console.warn('ERROR', 'SafeAreaInsetsManager', 'safe area changed delegate was added, but it does not implement the onSafeAreaInsetsDidChangeEvent method');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_updateInsets\",\n    value: function _updateInsets() {\n      return _regeneratorRuntime.async(function _updateInsets$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(NativeSafeAreaManager && SafeAreaInsetsCache === null)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(NativeSafeAreaManager.getSafeAreaInsets());\n\n            case 3:\n              SafeAreaInsetsCache = _context.sent;\n              this._safeAreaInsets = SafeAreaInsetsCache;\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getSafeAreaInsets\",\n    value: function getSafeAreaInsets() {\n      return _regeneratorRuntime.async(function getSafeAreaInsets$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this._updateInsets());\n\n            case 2:\n              return _context2.abrupt(\"return\", this._safeAreaInsets);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addSafeAreaChangedDelegate\",\n    value: function addSafeAreaChangedDelegate(delegate) {\n      this._safeAreaChangedDelegates.push(delegate);\n    }\n  }, {\n    key: \"removeSafeAreaChangedDelegate\",\n    value: function removeSafeAreaChangedDelegate(delegateToRemove) {\n      _.remove(this._safeAreaChangedDelegates, function (currentDelegate) {\n        return currentDelegate === delegateToRemove;\n      });\n    }\n  }, {\n    key: \"defaultInsets\",\n    get: function get() {\n      return this._defaultInsets;\n    }\n  }]);\n\n  return SafeAreaInsetsManager;\n}();\n\nexport default new SafeAreaInsetsManager();","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/SafeArea/SafeAreaInsetsManager.js"],"names":["_","SafeAreaInsetsCache","NativeSafeAreaManager","NativeModules","SafeAreaManager","SafeAreaInsetsManager","_defaultInsets","top","left","bottom","right","_safeAreaInsets","_safeAreaChangedDelegates","addSafeAreaChangedListener","NativeSafeAreaEvents","NativeEventEmitter","addListener","safeAreaInsets","forEach","delegate","onSafeAreaInsetsDidChangeEvent","console","warn","getSafeAreaInsets","_updateInsets","push","delegateToRemove","remove","currentDelegate"],"mappings":";;;;;AAEA,OAAOA,CAAP,MAAc,QAAd;AACA,IAAIC,mBAAmB,GAAG,IAA1B;AACA,IAAMC,qBAAqB,GAAGC,aAAa,CAACC,eAA5C;;IAEMC,qB;AAeJ,mCAAc;AAAA;;AAAA,SAddC,cAcc,GAdG;AACfC,MAAAA,GAAG,EAAE,CADU;AAEfC,MAAAA,IAAI,EAAE,CAFS;AAGfC,MAAAA,MAAM,EAAE,CAHO;AAIfC,MAAAA,KAAK,EAAE;AAJQ,KAcH;AAAA,SARdC,eAQc,GARI;AAChBJ,MAAAA,GAAG,EAAE,CADW;AAEhBC,MAAAA,IAAI,EAAE,CAFU;AAGhBC,MAAAA,MAAM,EAAE,CAHQ;AAIhBC,MAAAA,KAAK,EAAE;AAJS,KAQJ;AAAA,SAFdE,yBAEc,GAFc,EAEd;AACZ,SAAKC,0BAAL;AACD;;;;WAED,sCAA6B;AAAA;;AAC3B,UAAI,CAACX,qBAAL,EAA4B;AAC1B;AACD;;AAED,UAAMY,oBAAoB,GAAG,IAAIC,kBAAJ,CAAuBb,qBAAvB,CAA7B;AACAY,MAAAA,oBAAoB,CAACE,WAArB,CAAiC,8BAAjC,EAAiE,UAAAC,cAAc,EAAI;AACjFhB,QAAAA,mBAAmB,GAAGgB,cAAtB;AACA,QAAA,KAAI,CAACN,eAAL,GAAuBV,mBAAvB;;AAEAD,QAAAA,CAAC,CAACkB,OAAF,CAAU,KAAI,CAACN,yBAAf,EAA0C,UAAAO,QAAQ,EAAI;AACpD,cAAIA,QAAQ,CAACC,8BAAb,EAA6C;AAC3CD,YAAAA,QAAQ,CAACC,8BAAT,CAAwC,KAAI,CAACT,eAA7C;AACD,WAFD,MAEO;AACLU,YAAAA,OAAO,CAACC,IAAR,CAAa,OAAb,EAAsB,uBAAtB,EAA+C,2GAA/C;AACD;AACF,SAND;AAOD,OAXD;AAYD;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA,oBACMpB,qBAAqB,IAAID,mBAAmB,KAAK,IADvD;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEgCC,qBAAqB,CAACqB,iBAAtB,EAFhC;;AAAA;AAEItB,cAAAA,mBAFJ;AAGI,mBAAKU,eAAL,GAAuBV,mBAAvB;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQ,KAAKuB,aAAL,EADR;;AAAA;AAAA,gDAES,KAAKb,eAFd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAKA,oCAA2BQ,QAA3B,EAAqC;AACnC,WAAKP,yBAAL,CAA+Ba,IAA/B,CAAoCN,QAApC;AACD;;;WAED,uCAA8BO,gBAA9B,EAAgD;AAC9C1B,MAAAA,CAAC,CAAC2B,MAAF,CAAS,KAAKf,yBAAd,EAAyC,UAAAgB,eAAe,EAAI;AAC1D,eAAOA,eAAe,KAAKF,gBAA3B;AACD,OAFD;AAGD;;;SAED,eAAoB;AAClB,aAAO,KAAKpB,cAAZ;AACD;;;;;;AAIH,eAAe,IAAID,qBAAJ,EAAf","sourcesContent":["/* eslint no-underscore-dangle: 0 */\nimport { NativeModules, NativeEventEmitter } from 'react-native';\nimport _ from 'lodash';\nlet SafeAreaInsetsCache = null;\nconst NativeSafeAreaManager = NativeModules.SafeAreaManager;\n\nclass SafeAreaInsetsManager {\n  _defaultInsets = {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  };\n  _safeAreaInsets = {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  };\n  _safeAreaChangedDelegates = [];\n\n  constructor() {\n    this.addSafeAreaChangedListener();\n  }\n\n  addSafeAreaChangedListener() {\n    if (!NativeSafeAreaManager) {\n      return;\n    }\n\n    const NativeSafeAreaEvents = new NativeEventEmitter(NativeSafeAreaManager);\n    NativeSafeAreaEvents.addListener('SafeAreaInsetsDidChangeEvent', safeAreaInsets => {\n      SafeAreaInsetsCache = safeAreaInsets;\n      this._safeAreaInsets = SafeAreaInsetsCache;\n\n      _.forEach(this._safeAreaChangedDelegates, delegate => {\n        if (delegate.onSafeAreaInsetsDidChangeEvent) {\n          delegate.onSafeAreaInsetsDidChangeEvent(this._safeAreaInsets);\n        } else {\n          console.warn('ERROR', 'SafeAreaInsetsManager', 'safe area changed delegate was added, but it does not implement the onSafeAreaInsetsDidChangeEvent method'); //eslint-disable-line\n        }\n      });\n    });\n  }\n\n  async _updateInsets() {\n    if (NativeSafeAreaManager && SafeAreaInsetsCache === null) {\n      SafeAreaInsetsCache = await NativeSafeAreaManager.getSafeAreaInsets();\n      this._safeAreaInsets = SafeAreaInsetsCache;\n    }\n  }\n\n  async getSafeAreaInsets() {\n    await this._updateInsets();\n    return this._safeAreaInsets;\n  }\n\n  addSafeAreaChangedDelegate(delegate) {\n    this._safeAreaChangedDelegates.push(delegate);\n  }\n\n  removeSafeAreaChangedDelegate(delegateToRemove) {\n    _.remove(this._safeAreaChangedDelegates, currentDelegate => {\n      return currentDelegate === delegateToRemove;\n    });\n  }\n\n  get defaultInsets() {\n    return this._defaultInsets;\n  }\n\n}\n\nexport default new SafeAreaInsetsManager();"]},"metadata":{},"sourceType":"module"}