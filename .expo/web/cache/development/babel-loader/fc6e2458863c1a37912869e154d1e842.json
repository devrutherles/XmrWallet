{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport TextInputKeyboardManager from \"./../TextInputKeyboardManager/TextInputKeyboardManager.ios\";\nimport KeyboardRegistry from \"./../KeyboardRegistry\";\nimport CustomKeyboardViewBase from \"./../CustomKeyboardViewBase\";\n\nvar CustomKeyboardView = function (_CustomKeyboardViewBa) {\n  _inherits(CustomKeyboardView, _CustomKeyboardViewBa);\n\n  var _super = _createSuper(CustomKeyboardView);\n\n  function CustomKeyboardView(props) {\n    var _this;\n\n    _classCallCheck(this, CustomKeyboardView);\n\n    _this = _super.call(this, props);\n    var component = props.component;\n\n    if (component) {\n      _this.registeredRequestShowKeyboard = false;\n    }\n\n    KeyboardRegistry.addListener('onToggleExpandedKeyboard', function (args) {\n      var _this$props = _this.props,\n          inputRef = _this$props.inputRef,\n          initialProps = _this$props.initialProps;\n\n      if (inputRef) {\n        if (_this.keyboardExpandedToggle[args.keyboardId] === undefined) {\n          _this.keyboardExpandedToggle[args.keyboardId] = false;\n        }\n\n        _this.keyboardExpandedToggle[args.keyboardId] = !_this.keyboardExpandedToggle[args.keyboardId];\n        TextInputKeyboardManager.toggleExpandKeyboard(inputRef, _this.keyboardExpandedToggle[args.keyboardId], initialProps.expandWithLayoutAnimation);\n      }\n    });\n    return _this;\n  }\n\n  _createClass(CustomKeyboardView, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      KeyboardRegistry.removeListeners('onToggleExpandedKeyboard');\n\n      _get(_getPrototypeOf(CustomKeyboardView.prototype), \"componentWillUnmount\", this).call(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          nextInputRef = _this$props2.inputRef,\n          nextComponent = _this$props2.component,\n          nextInitialProps = _this$props2.initialProps,\n          useSafeArea = _this$props2.useSafeArea;\n      var component = prevProps.component;\n\n      if (nextInputRef && nextComponent !== component) {\n        if (nextComponent) {\n          TextInputKeyboardManager.setInputComponent(nextInputRef, {\n            component: nextComponent,\n            initialProps: nextInitialProps,\n            useSafeArea: useSafeArea\n          });\n        } else {\n          TextInputKeyboardManager.removeInputComponent(nextInputRef);\n        }\n      }\n\n      _get(_getPrototypeOf(CustomKeyboardView.prototype), \"componentDidUpdate\", this).call(this, prevProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return CustomKeyboardView;\n}(CustomKeyboardViewBase);\n\nCustomKeyboardView.displayName = 'IGNORE';\nCustomKeyboardView.defaultProps = {\n  initialProps: {},\n  useSafeArea: true\n};\nexport { CustomKeyboardView as default };","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardInput/CustomKeyboardView/CustomKeyboardView.ios.js"],"names":["TextInputKeyboardManager","KeyboardRegistry","CustomKeyboardViewBase","CustomKeyboardView","props","component","registeredRequestShowKeyboard","addListener","args","inputRef","initialProps","keyboardExpandedToggle","keyboardId","undefined","toggleExpandKeyboard","expandWithLayoutAnimation","removeListeners","prevProps","nextInputRef","nextComponent","nextInitialProps","useSafeArea","setInputComponent","removeInputComponent","displayName","defaultProps"],"mappings":";;;;;;;;;;;AAAA,OAAOA,wBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,sBAAP;;IACqBC,kB;;;;;AAOnB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,QACEC,SADF,GAEID,KAFJ,CACEC,SADF;;AAIA,QAAIA,SAAJ,EAAe;AACb,YAAKC,6BAAL,GAAqC,KAArC;AACD;;AAEDL,IAAAA,gBAAgB,CAACM,WAAjB,CAA6B,0BAA7B,EAAyD,UAAAC,IAAI,EAAI;AAC/D,wBAGI,MAAKJ,KAHT;AAAA,UACEK,QADF,eACEA,QADF;AAAA,UAEEC,YAFF,eAEEA,YAFF;;AAKA,UAAID,QAAJ,EAAc;AACZ,YAAI,MAAKE,sBAAL,CAA4BH,IAAI,CAACI,UAAjC,MAAiDC,SAArD,EAAgE;AAC9D,gBAAKF,sBAAL,CAA4BH,IAAI,CAACI,UAAjC,IAA+C,KAA/C;AACD;;AAED,cAAKD,sBAAL,CAA4BH,IAAI,CAACI,UAAjC,IAA+C,CAAC,MAAKD,sBAAL,CAA4BH,IAAI,CAACI,UAAjC,CAAhD;AACAZ,QAAAA,wBAAwB,CAACc,oBAAzB,CAA8CL,QAA9C,EAAwD,MAAKE,sBAAL,CAA4BH,IAAI,CAACI,UAAjC,CAAxD,EAAsGF,YAAY,CAACK,yBAAnH;AACD;AACF,KAdD;AAViB;AAyBlB;;;;WAED,gCAAuB;AACrBd,MAAAA,gBAAgB,CAACe,eAAjB,CAAiC,0BAAjC;;AACA;AACD;;;WAED,4BAAmBC,SAAnB,EAA8B;AAC5B,yBAKI,KAAKb,KALT;AAAA,UACYc,YADZ,gBACET,QADF;AAAA,UAEaU,aAFb,gBAEEd,SAFF;AAAA,UAGgBe,gBAHhB,gBAGEV,YAHF;AAAA,UAIEW,WAJF,gBAIEA,WAJF;AAMA,UACEhB,SADF,GAEIY,SAFJ,CACEZ,SADF;;AAIA,UAAIa,YAAY,IAAIC,aAAa,KAAKd,SAAtC,EAAiD;AAC/C,YAAIc,aAAJ,EAAmB;AACjBnB,UAAAA,wBAAwB,CAACsB,iBAAzB,CAA2CJ,YAA3C,EAAyD;AACvDb,YAAAA,SAAS,EAAEc,aAD4C;AAEvDT,YAAAA,YAAY,EAAEU,gBAFyC;AAGvDC,YAAAA,WAAW,EAAXA;AAHuD,WAAzD;AAKD,SAND,MAMO;AACLrB,UAAAA,wBAAwB,CAACuB,oBAAzB,CAA8CL,YAA9C;AACD;AACF;;AAED,iGAAyBD,SAAzB;AACD;;;WAED,kBAAS;AACP,aAAO,IAAP;AACD;;;;EAnE6Cf,sB;;AAA3BC,kB,CACZqB,W,GAAc,Q;AADFrB,kB,CAEZsB,Y,GAAe;AACpBf,EAAAA,YAAY,EAAE,EADM;AAEpBW,EAAAA,WAAW,EAAE;AAFO,C;SAFHlB,kB","sourcesContent":["import TextInputKeyboardManager from \"./../TextInputKeyboardManager/TextInputKeyboardManager.ios\";\nimport KeyboardRegistry from \"./../KeyboardRegistry\";\nimport CustomKeyboardViewBase from \"./../CustomKeyboardViewBase\";\nexport default class CustomKeyboardView extends CustomKeyboardViewBase {\n  static displayName = 'IGNORE';\n  static defaultProps = {\n    initialProps: {},\n    useSafeArea: true\n  };\n\n  constructor(props) {\n    super(props);\n    const {\n      component\n    } = props;\n\n    if (component) {\n      this.registeredRequestShowKeyboard = false;\n    }\n\n    KeyboardRegistry.addListener('onToggleExpandedKeyboard', args => {\n      const {\n        inputRef,\n        initialProps\n      } = this.props;\n\n      if (inputRef) {\n        if (this.keyboardExpandedToggle[args.keyboardId] === undefined) {\n          this.keyboardExpandedToggle[args.keyboardId] = false;\n        }\n\n        this.keyboardExpandedToggle[args.keyboardId] = !this.keyboardExpandedToggle[args.keyboardId];\n        TextInputKeyboardManager.toggleExpandKeyboard(inputRef, this.keyboardExpandedToggle[args.keyboardId], initialProps.expandWithLayoutAnimation);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    KeyboardRegistry.removeListeners('onToggleExpandedKeyboard');\n    super.componentWillUnmount();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      inputRef: nextInputRef,\n      component: nextComponent,\n      initialProps: nextInitialProps,\n      useSafeArea\n    } = this.props;\n    const {\n      component\n    } = prevProps;\n\n    if (nextInputRef && nextComponent !== component) {\n      if (nextComponent) {\n        TextInputKeyboardManager.setInputComponent(nextInputRef, {\n          component: nextComponent,\n          initialProps: nextInitialProps,\n          useSafeArea\n        });\n      } else {\n        TextInputKeyboardManager.removeInputComponent(nextInputRef);\n      }\n    }\n\n    super.componentDidUpdate(prevProps);\n  }\n\n  render() {\n    return null;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}