{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport { LogService } from \"../../services\";\nimport { Colors, Typography } from \"../../style\";\nimport * as Modifiers from \"../../commons/modifiers\";\nimport Assets from \"../../assets\";\nimport View from \"../view\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\nimport Text from \"../text\";\nimport { getItemLabel, isItemSelected } from \"./PickerPresenter\";\nimport PickerContext from \"./PickerContext\";\n\nvar PickerItem = function PickerItem(props) {\n  var _context$value;\n\n  var value = props.value,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      disabled = props.disabled,\n      _props$selectedIcon = props.selectedIcon,\n      selectedIcon = _props$selectedIcon === void 0 ? Assets.icons.check : _props$selectedIcon,\n      _props$selectedIconCo = props.selectedIconColor,\n      selectedIconColor = _props$selectedIconCo === void 0 ? Colors.primary : _props$selectedIconCo,\n      testID = props.testID;\n  var context = useContext(PickerContext);\n  var migrate = context.migrate;\n  var customRenderItem = context.renderItem || props.renderItem;\n  var itemValue = !migrate && _.isPlainObject(value) ? value == null ? void 0 : value.value : value;\n  var isSelected = isItemSelected(itemValue, context.value);\n  var itemLabel = getItemLabel(label, value, props.getItemLabel || context.getItemLabel);\n  var selectedCounter = context.selectionLimit && ((_context$value = context.value) == null ? void 0 : _context$value.length);\n\n  var accessibilityProps = _objectSpread({\n    accessibilityState: isSelected ? {\n      selected: true\n    } : undefined,\n    accessibilityHint: 'Double click to select this suggestion'\n  }, Modifiers.extractAccessibilityProps(props));\n\n  var isItemDisabled = useMemo(function () {\n    return disabled || !isSelected && context.selectionLimit && context.selectionLimit === selectedCounter;\n  }, [selectedCounter]);\n  useEffect(function () {\n    if (_.isPlainObject(value)) {\n      LogService.warn('UILib Picker.Item will stop supporting passing object as value & label (e.g {value, label}) in the next major version. Please pass separate label and value props');\n    }\n  }, [value]);\n  var selectedIndicator = useMemo(function () {\n    if (isSelected) {\n      return React.createElement(Image, {\n        source: selectedIcon,\n        tintColor: isItemDisabled ? Colors.grey60 : selectedIconColor\n      });\n    }\n  }, [isSelected, isItemDisabled, selectedIcon, selectedIconColor]);\n\n  var _onPress = useCallback(function () {\n    if (migrate) {\n      context.onPress(value);\n    } else {\n      context.onPress(_.isPlainObject(value) || context.isMultiMode ? value : {\n        value: value,\n        label: itemLabel\n      });\n    }\n  }, [migrate, value, context.onPress]);\n\n  var onSelectedLayout = useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _.invoke.apply(_, [context, 'onSelectedLayout'].concat(args));\n  }, []);\n\n  var _renderItem = function _renderItem() {\n    return React.createElement(View, {\n      style: styles.container,\n      flex: true,\n      row: true,\n      spread: true,\n      centerV: true\n    }, React.createElement(Text, {\n      numberOfLines: 1,\n      style: [styles.labelText, isItemDisabled && styles.labelTextDisabled, labelStyle]\n    }, itemLabel), selectedIndicator);\n  };\n\n  return React.createElement(TouchableOpacity, _extends({\n    activeOpacity: 0.5,\n    onPress: _onPress,\n    onLayout: isSelected ? onSelectedLayout : undefined,\n    disabled: isItemDisabled,\n    testID: testID,\n    throttleTime: 0\n  }, accessibilityProps), customRenderItem ? customRenderItem(value, _objectSpread(_objectSpread({}, props), {}, {\n    isSelected: isSelected\n  }), itemLabel) : _renderItem());\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: 56.5,\n    paddingHorizontal: 23,\n    borderColor: Colors.rgba(Colors.grey10, 0.1),\n    borderBottomWidth: 1\n  },\n  labelText: _objectSpread(_objectSpread({}, Typography.text70), {}, {\n    color: Colors.grey10,\n    flex: 1,\n    textAlign: 'left'\n  }),\n  labelTextDisabled: {\n    color: Colors.grey60\n  }\n});\nPickerItem.displayName = 'Picker.Item';\nPickerItem.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  label: PropTypes.string,\n  labelStyle: RNText.propTypes.style,\n  getItemLabel: PropTypes.func,\n  getItemValue: PropTypes.func,\n  isSelected: PropTypes.bool,\n  selectedIcon: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  selectedIconColor: PropTypes.string,\n  disabled: PropTypes.bool,\n  renderItem: PropTypes.elementType,\n  onPress: PropTypes.func,\n  onSelectedLayout: PropTypes.func\n};\nexport default PickerItem;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/picker/PickerItem.js"],"names":["_","PropTypes","React","useCallback","useEffect","useMemo","useContext","LogService","Colors","Typography","Modifiers","Assets","View","TouchableOpacity","Image","Text","getItemLabel","isItemSelected","PickerContext","PickerItem","props","value","label","labelStyle","disabled","selectedIcon","icons","check","selectedIconColor","primary","testID","context","migrate","customRenderItem","renderItem","itemValue","isPlainObject","isSelected","itemLabel","selectedCounter","selectionLimit","length","accessibilityProps","accessibilityState","selected","undefined","accessibilityHint","extractAccessibilityProps","isItemDisabled","warn","selectedIndicator","grey60","_onPress","onPress","isMultiMode","onSelectedLayout","args","invoke","_renderItem","styles","container","labelText","labelTextDisabled","StyleSheet","create","height","paddingHorizontal","borderColor","rgba","grey10","borderBottomWidth","text70","color","flex","textAlign","displayName","propTypes","oneOfType","object","string","number","RNText","style","func","getItemValue","bool","elementType"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, {useCallback, useEffect, useMemo, useContext} from 'react';\nimport {StyleSheet, Text as RNText} from 'react-native';\nimport {LogService} from '../../services';\nimport {Colors, Typography} from '../../style';\nimport * as Modifiers from '../../commons/modifiers';\nimport Assets from '../../assets';\nimport View from '../view';\nimport TouchableOpacity from '../touchableOpacity';\nimport Image from '../image';\nimport Text from '../text';\nimport {getItemLabel, isItemSelected} from './PickerPresenter';\nimport PickerContext from './PickerContext';\n\n/**\n * @description: Picker.Item, for configuring the Picker's selectable options\n * @extends: TouchableOpacity\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js\n */\nconst PickerItem = props => {\n  const {\n    value,\n    label,\n    labelStyle,\n    disabled,\n    selectedIcon = Assets.icons.check,\n    selectedIconColor = Colors.primary,\n    testID\n  } = props;\n  const context = useContext(PickerContext);\n  const {migrate} = context;\n  const customRenderItem = context.renderItem || props.renderItem;\n  const itemValue = !migrate && _.isPlainObject(value) ? value?.value : value;\n  const isSelected = isItemSelected(itemValue, context.value);\n  const itemLabel = getItemLabel(label, value, props.getItemLabel || context.getItemLabel);\n  const selectedCounter = context.selectionLimit && context.value?.length;\n  const accessibilityProps = {\n    accessibilityState: isSelected ? {selected: true} : undefined,\n    accessibilityHint: 'Double click to select this suggestion',\n    ...Modifiers.extractAccessibilityProps(props)\n  };\n\n  const isItemDisabled = useMemo(() => {\n    return disabled || (!isSelected && context.selectionLimit && context.selectionLimit === selectedCounter);\n  }, [selectedCounter]);\n  \n  useEffect(() => {\n    if (_.isPlainObject(value)) {\n      LogService.warn('UILib Picker.Item will stop supporting passing object as value & label (e.g {value, label}) in the next major version. Please pass separate label and value props');\n    }\n  }, [value]);\n\n  const selectedIndicator = useMemo(() => {\n    if (isSelected) {\n      return <Image source={selectedIcon} tintColor={isItemDisabled ? Colors.grey60 : selectedIconColor}/>;\n    }\n  }, [isSelected, isItemDisabled, selectedIcon, selectedIconColor]);\n\n  const _onPress = useCallback(() => {\n    if (migrate) {\n      context.onPress(value);\n    } else {\n      context.onPress((_.isPlainObject(value) || context.isMultiMode) ? value : {value, label: itemLabel});\n    }\n  }, [migrate, value, context.onPress]);\n\n  const onSelectedLayout = useCallback((...args) => {\n    _.invoke(context, 'onSelectedLayout', ...args);\n  }, []);\n\n  const _renderItem = () => {\n    return (\n      <View style={styles.container} flex row spread centerV>\n        <Text numberOfLines={1} style={[styles.labelText, isItemDisabled && styles.labelTextDisabled, labelStyle]}>\n          {itemLabel}\n        </Text>\n        {selectedIndicator}\n      </View>\n    );\n  };\n\n  return (\n    <TouchableOpacity\n      activeOpacity={0.5}\n      onPress={_onPress}\n      onLayout={isSelected ? onSelectedLayout : undefined}\n      disabled={isItemDisabled}\n      testID={testID}\n      throttleTime={0}\n      {...accessibilityProps}\n    >\n      {customRenderItem ? customRenderItem(value, {...props, isSelected}, itemLabel) : _renderItem()}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 56.5,\n    paddingHorizontal: 23,\n    borderColor: Colors.rgba(Colors.grey10, 0.1),\n    borderBottomWidth: 1\n  },\n  labelText: {\n    ...Typography.text70,\n    color: Colors.grey10,\n    flex: 1,\n    textAlign: 'left'\n  },\n  labelTextDisabled: {\n    color: Colors.grey60\n  }\n});\n\nPickerItem.displayName = 'Picker.Item';\nPickerItem.propTypes = {\n  /**\n   * Item's value\n   */\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Item's label\n   */\n  label: PropTypes.string,\n  /**\n   * Item's label style\n   */\n  labelStyle: RNText.propTypes.style,\n  /**\n   * Custom function for the item label (e.g (value) => customLabel)\n   */\n  getItemLabel: PropTypes.func,\n  /**\n   * DEPRECATE: Function to return the value out of the item value prop when value is custom shaped.\n   */\n  getItemValue: PropTypes.func,\n  /**\n   * Is the item selected\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * Pass to change the selected icon\n   */\n  selectedIcon: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n  /**\n   * Pass to change the selected icon color\n   */\n  selectedIconColor: PropTypes.string,\n  /**\n   * Is the item disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Render custom item\n   */\n  renderItem: PropTypes.elementType,\n  /**\n   * Callback for onPress action\n   */\n  onPress: PropTypes.func,\n  /**\n   * Callback for onLayout event\n   */\n  onSelectedLayout: PropTypes.func\n};\n\nexport default PickerItem;\n"]},"metadata":{},"sourceType":"module"}