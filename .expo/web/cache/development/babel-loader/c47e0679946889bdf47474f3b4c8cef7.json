{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"activeOpacity\", \"backgroundColor\", \"containerStyle\", \"hitSlop\", \"onPress\", \"testID\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { BorderRadiuses, Colors, Spacings, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\nimport View from \"../view\";\nvar LABEL_FORMATTER_VALUES = [1, 2, 3, 4];\n\nvar Badge = function (_PureComponent) {\n  _inherits(Badge, _PureComponent);\n\n  var _super = _createSuper(Badge);\n\n  function Badge(props) {\n    var _this;\n\n    _classCallCheck(this, Badge);\n\n    _this = _super.call(this, props);\n    _this.styles = createStyles(props);\n    return _this;\n  }\n\n  _createClass(Badge, [{\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var _this$props = this.props,\n          onPress = _this$props.onPress,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          accessibilityLabel = _this$props.accessibilityLabel;\n      return _objectSpread(_objectSpread({\n        accessibilityLabel: accessibilityLabel || label ? label + \" new items\" : 'badge'\n      }, extractAccessibilityProps(this.props)), {}, {\n        accessible: !_.isUndefined(label),\n        accessibilityRole: onPress ? 'button' : icon ? 'image' : 'text'\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.props.size || 20;\n    }\n  }, {\n    key: \"isSmallBadge\",\n    value: function isSmallBadge() {\n      return this.size <= 16;\n    }\n  }, {\n    key: \"getBadgeSizeStyle\",\n    value: function getBadgeSizeStyle() {\n      var _this$props2 = this.props,\n          borderWidth = _this$props2.borderWidth,\n          icon = _this$props2.icon,\n          customElement = _this$props2.customElement;\n      var label = this.getFormattedLabel();\n      var style = {\n        paddingHorizontal: this.isSmallBadge() ? 4 : 6,\n        height: this.size,\n        minWidth: this.size\n      };\n\n      if (icon && label) {\n        style.paddingRight = 6;\n        style.paddingLeft = 4;\n        style.height = Spacings.s5;\n\n        if (borderWidth) {\n          style.height += borderWidth * 2;\n        }\n\n        return style;\n      }\n\n      if (customElement) {\n        return style;\n      }\n\n      var isPimple = label === undefined;\n\n      if (isPimple || icon) {\n        style.paddingHorizontal = 0;\n        style.minWidth = undefined;\n        style.width = style.height;\n\n        if (borderWidth) {\n          style.height += borderWidth * 2;\n          style.width += borderWidth * 2;\n        }\n\n        return style;\n      }\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n        style.minWidth += borderWidth * 2;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"getFormattedLabel\",\n    value: function getFormattedLabel() {\n      var _this$props3 = this.props,\n          labelFormatterLimit = _this$props3.labelFormatterLimit,\n          label = _this$props3.label;\n\n      if (_.isNaN(label)) {\n        return label;\n      }\n\n      if (LABEL_FORMATTER_VALUES.includes(labelFormatterLimit)) {\n        var maxLabelNumber = Math.pow(10, labelFormatterLimit) - 1;\n        var formattedLabel = label;\n\n        if (formattedLabel > maxLabelNumber) {\n          formattedLabel = maxLabelNumber + \"+\";\n        }\n\n        return formattedLabel;\n      } else {\n        return label;\n      }\n    }\n  }, {\n    key: \"getBorderStyling\",\n    value: function getBorderStyling() {\n      var _this$props4 = this.props,\n          borderWidth = _this$props4.borderWidth,\n          borderColor = _this$props4.borderColor,\n          borderRadius = _this$props4.borderRadius;\n      var style = {};\n\n      if (borderWidth) {\n        style.borderWidth = borderWidth;\n        style.borderColor = borderColor;\n      }\n\n      if (borderRadius) {\n        style.borderRadius = borderRadius;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      var _this$props5 = this.props,\n          labelStyle = _this$props5.labelStyle,\n          label = _this$props5.label;\n\n      if (label) {\n        return React.createElement(Text, {\n          style: [this.styles.label, this.isSmallBadge() && this.styles.labelSmall, labelStyle],\n          allowFontScaling: false,\n          numberOfLines: 1,\n          testID: \"badge\"\n        }, this.getFormattedLabel());\n      }\n    }\n  }, {\n    key: \"renderCustomElement\",\n    value: function renderCustomElement() {\n      var customElement = this.props.customElement;\n      return customElement;\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      var _this$props6 = this.props,\n          icon = _this$props6.icon,\n          iconStyle = _this$props6.iconStyle,\n          iconProps = _this$props6.iconProps,\n          borderColor = _this$props6.borderColor,\n          label = _this$props6.label;\n      var flex = label ? 0 : 1;\n      return icon && React.createElement(Image, _extends({\n        source: icon,\n        resizeMode: \"contain\",\n        borderColor: borderColor\n      }, iconProps, {\n        style: _objectSpread({\n          flex: flex\n        }, iconStyle)\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          activeOpacity = _this$props7.activeOpacity,\n          backgroundColor = _this$props7.backgroundColor,\n          containerStyle = _this$props7.containerStyle,\n          hitSlop = _this$props7.hitSlop,\n          onPress = _this$props7.onPress,\n          testID = _this$props7.testID,\n          others = _objectWithoutProperties(_this$props7, _excluded);\n\n      var backgroundStyle = backgroundColor && {\n        backgroundColor: backgroundColor\n      };\n      var sizeStyle = this.getBadgeSizeStyle();\n      var borderStyle = this.getBorderStyling();\n      var Container = onPress ? TouchableOpacity : View;\n      return React.createElement(View, _extends({\n        style: containerStyle\n      }, others, {\n        backgroundColor: undefined,\n        borderWidth: undefined\n      }, this.getAccessibilityProps()), React.createElement(Container, {\n        testID: testID,\n        pointerEvents: 'none',\n        style: [sizeStyle, this.styles.badge, borderStyle, backgroundStyle],\n        onPress: onPress,\n        activeOpacity: activeOpacity,\n        hitSlop: hitSlop,\n        row: true\n      }, this.renderCustomElement(), this.renderIcon(), this.renderLabel()));\n    }\n  }]);\n\n  return Badge;\n}(PureComponent);\n\nBadge.propTypes = {\n  label: _pt.string,\n  backgroundColor: _pt.string,\n  size: _pt.oneOfType([_pt.number, _pt.string]),\n  onPress: _pt.func,\n  borderWidth: _pt.number,\n  borderRadius: _pt.number,\n  iconStyle: _pt.object,\n  iconProps: _pt.object,\n  customElement: _pt.element\n};\nBadge.displayName = 'Badge';\n\nfunction createStyles(props) {\n  var styles = StyleSheet.create({\n    badge: {\n      alignSelf: 'flex-start',\n      borderRadius: BorderRadiuses.br100,\n      backgroundColor: !props.icon || props.customElement ? Colors.primary : undefined,\n      alignItems: 'center',\n      justifyContent: 'center',\n      overflow: 'hidden'\n    },\n    label: _objectSpread(_objectSpread({}, Typography.text90), {}, {\n      color: Colors.white,\n      backgroundColor: 'transparent'\n    }),\n    labelSmall: _objectSpread(_objectSpread({}, Typography.text100), {}, {\n      lineHeight: undefined\n    })\n  });\n  return styles;\n}\n\nexport { Badge };\nexport default asBaseComponent(Badge);","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/badge/index.js"],"names":["_pt","_","React","PureComponent","extractAccessibilityProps","asBaseComponent","BorderRadiuses","Colors","Spacings","Typography","TouchableOpacity","Image","View","LABEL_FORMATTER_VALUES","Badge","props","styles","createStyles","onPress","icon","label","accessibilityLabel","accessible","isUndefined","accessibilityRole","size","borderWidth","customElement","getFormattedLabel","style","paddingHorizontal","isSmallBadge","height","minWidth","paddingRight","paddingLeft","s5","isPimple","undefined","width","labelFormatterLimit","isNaN","includes","maxLabelNumber","formattedLabel","borderColor","borderRadius","labelStyle","labelSmall","iconStyle","iconProps","flex","activeOpacity","backgroundColor","containerStyle","hitSlop","testID","others","backgroundStyle","sizeStyle","getBadgeSizeStyle","borderStyle","getBorderStyling","Container","getAccessibilityProps","badge","renderCustomElement","renderIcon","renderLabel","propTypes","string","oneOfType","number","func","object","element","displayName","StyleSheet","create","alignSelf","br100","primary","alignItems","justifyContent","overflow","text90","color","white","text100","lineHeight"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, Text } from 'react-native';\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { BorderRadiuses, Colors, Spacings, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Image from \"../image\";\nimport View from \"../view\";\nconst LABEL_FORMATTER_VALUES = [1, 2, 3, 4];\n\n/**\n * @description: Round colored badge, typically used to show a number\n * @extends: View\n * @image: https://user-images.githubusercontent.com/33805983/34480753-df7a868a-efb6-11e7-9072-80f5c110a4f3.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BadgesScreen.tsx\n */\nclass Badge extends PureComponent {\n  static propTypes = {\n    /**\n         * Text to show inside the badge.\n         * Not passing a label (undefined) will present a pimple badge.\n         */\n    label: _pt.string,\n\n    /**\n         * Color of the badge background\n         */\n    backgroundColor: _pt.string,\n\n    /**\n         * the badge size\n         */\n    size: _pt.oneOfType([_pt.number, _pt.string]),\n\n    /**\n         * Press handler\n         */\n    onPress: _pt.func,\n\n    /**\n         * width of border around the badge\n         */\n    borderWidth: _pt.number,\n\n    /**\n         * radius of border around the badge\n         */\n    borderRadius: _pt.number,\n\n    /**\n         * Additional styling to badge icon\n         */\n    iconStyle: _pt.object,\n\n    /**\n         * Additional props passed to icon\n         */\n    iconProps: _pt.object,\n\n    /**\n         * Custom element to render instead of an icon\n         */\n    customElement: _pt.element\n  };\n  static displayName = 'Badge';\n\n  constructor(props) {\n    super(props);\n    this.styles = createStyles(props);\n  }\n\n  getAccessibilityProps() {\n    const {\n      onPress,\n      icon,\n      label,\n      accessibilityLabel\n    } = this.props;\n    return {\n      accessibilityLabel: accessibilityLabel || label ? `${label} new items` : 'badge',\n      ...extractAccessibilityProps(this.props),\n      accessible: !_.isUndefined(label),\n      accessibilityRole: onPress ? 'button' : icon ? 'image' : 'text'\n    };\n  }\n\n  get size() {\n    return this.props.size || 20;\n  }\n\n  isSmallBadge() {\n    return this.size <= 16;\n  }\n\n  getBadgeSizeStyle() {\n    const {\n      borderWidth,\n      icon,\n      customElement\n    } = this.props;\n    const label = this.getFormattedLabel();\n    const style = {\n      paddingHorizontal: this.isSmallBadge() ? 4 : 6,\n      height: this.size,\n      minWidth: this.size\n    };\n\n    if (icon && label) {\n      style.paddingRight = 6;\n      style.paddingLeft = 4;\n      style.height = Spacings.s5;\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n      }\n\n      return style;\n    }\n\n    if (customElement) {\n      return style;\n    }\n\n    const isPimple = label === undefined;\n\n    if (isPimple || icon) {\n      style.paddingHorizontal = 0;\n      style.minWidth = undefined;\n      style.width = style.height;\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n        style.width += borderWidth * 2;\n      }\n\n      return style;\n    }\n\n    if (borderWidth) {\n      style.height += borderWidth * 2;\n      style.minWidth += borderWidth * 2;\n    }\n\n    return style;\n  }\n\n  getFormattedLabel() {\n    const {\n      labelFormatterLimit,\n      label\n    } = this.props;\n\n    if (_.isNaN(label)) {\n      return label;\n    }\n\n    if (LABEL_FORMATTER_VALUES.includes(labelFormatterLimit)) {\n      const maxLabelNumber = 10 ** labelFormatterLimit - 1;\n      let formattedLabel = label;\n\n      if (formattedLabel > maxLabelNumber) {\n        formattedLabel = `${maxLabelNumber}+`;\n      }\n\n      return formattedLabel;\n    } else {\n      return label;\n    }\n  }\n\n  getBorderStyling() {\n    const {\n      borderWidth,\n      borderColor,\n      borderRadius\n    } = this.props;\n    const style = {};\n\n    if (borderWidth) {\n      style.borderWidth = borderWidth;\n      style.borderColor = borderColor;\n    }\n\n    if (borderRadius) {\n      style.borderRadius = borderRadius;\n    }\n\n    return style;\n  }\n\n  renderLabel() {\n    const {\n      labelStyle,\n      label\n    } = this.props;\n\n    if (label) {\n      return <Text style={[this.styles.label, this.isSmallBadge() && this.styles.labelSmall, labelStyle]} allowFontScaling={false} numberOfLines={1} testID=\"badge\">\n          {this.getFormattedLabel()}\n        </Text>;\n    }\n  }\n\n  renderCustomElement() {\n    const {\n      customElement\n    } = this.props;\n    return customElement;\n  }\n\n  renderIcon() {\n    const {\n      icon,\n      iconStyle,\n      iconProps,\n      borderColor,\n      label\n    } = this.props;\n    const flex = label ? 0 : 1;\n    return icon && <Image source={icon} resizeMode=\"contain\" //@ts-ignore\n    borderColor={borderColor} {...iconProps} style={{\n      flex,\n      ...iconStyle\n    }} />;\n  }\n\n  render() {\n    const {\n      activeOpacity,\n      backgroundColor,\n      containerStyle,\n      hitSlop,\n      onPress,\n      testID,\n      ...others\n    } = this.props;\n    const backgroundStyle = backgroundColor && {\n      backgroundColor\n    };\n    const sizeStyle = this.getBadgeSizeStyle();\n    const borderStyle = this.getBorderStyling();\n    const Container = onPress ? TouchableOpacity : View;\n    return (// The extra View wrapper is to break badge's flex-ness\n      // @ts-ignore\n      <View style={containerStyle} {...others} backgroundColor={undefined} // @ts-expect-error\n      borderWidth={undefined} {...this.getAccessibilityProps()}>\n        <Container testID={testID} pointerEvents={'none'} style={[sizeStyle, this.styles.badge, borderStyle, backgroundStyle]} onPress={onPress} activeOpacity={activeOpacity} hitSlop={hitSlop} row>\n          {this.renderCustomElement()}\n          {this.renderIcon()}\n          {this.renderLabel()}\n        </Container>\n      </View>\n    );\n  }\n\n}\n\nfunction createStyles(props) {\n  const styles = StyleSheet.create({\n    badge: {\n      alignSelf: 'flex-start',\n      borderRadius: BorderRadiuses.br100,\n      backgroundColor: !props.icon || props.customElement ? Colors.primary : undefined,\n      alignItems: 'center',\n      justifyContent: 'center',\n      overflow: 'hidden'\n    },\n    label: { ...Typography.text90,\n      color: Colors.white,\n      backgroundColor: 'transparent'\n    },\n    labelSmall: { ...Typography.text100,\n      lineHeight: undefined\n    }\n  });\n  return styles;\n}\n\nexport { Badge }; // For tests\n\nexport default asBaseComponent(Badge);"]},"metadata":{},"sourceType":"module"}