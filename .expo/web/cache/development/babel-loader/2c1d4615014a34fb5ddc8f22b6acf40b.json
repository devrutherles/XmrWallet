{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback } from 'react';\nimport forwardRef from \"./forwardRef\";\nimport hoistStatics from 'hoist-non-react-statics';\nimport { Constants } from \"../helpers\";\nvar DEFAULT_THRESHOLD = Constants.isAndroid ? 1 : 0;\n\nfunction withScrollReached(WrappedComponent) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var ScrollReachedDetector = function ScrollReachedDetector(props) {\n    var _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isScrollAtStart = _useState2[0],\n        setScrollAtStart = _useState2[1];\n\n    var _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isScrollAtEnd = _useState4[0],\n        setScrollAtEnd = _useState4[1];\n\n    var onScroll = useCallback(function (event) {\n      var _event$nativeEvent = event.nativeEvent,\n          _event$nativeEvent$la = _event$nativeEvent.layoutMeasurement,\n          layoutWidth = _event$nativeEvent$la.width,\n          layoutHeight = _event$nativeEvent$la.height,\n          _event$nativeEvent$co = _event$nativeEvent.contentOffset,\n          offsetX = _event$nativeEvent$co.x,\n          offsetY = _event$nativeEvent$co.y,\n          _event$nativeEvent$co2 = _event$nativeEvent.contentSize,\n          contentWidth = _event$nativeEvent$co2.width,\n          contentHeight = _event$nativeEvent$co2.height;\n      var horizontal = options.horizontal;\n      var threshold = options.threshold || DEFAULT_THRESHOLD;\n      var layoutSize = horizontal ? layoutWidth : layoutHeight;\n      var offset = horizontal ? offsetX : offsetY;\n      var contentSize = horizontal ? contentWidth : contentHeight;\n\n      if (horizontal && Constants.isRTL && Constants.isAndroid) {\n        var scrollingWidth = Math.max(0, contentSize - layoutSize);\n        offset = scrollingWidth - offset;\n      }\n\n      var closeToStart = offset <= threshold;\n\n      if (closeToStart !== isScrollAtStart) {\n        setScrollAtStart(closeToStart);\n      }\n\n      var closeToEnd = layoutSize + offset >= contentSize - threshold;\n\n      if (closeToEnd !== isScrollAtEnd) {\n        setScrollAtEnd(closeToEnd);\n      }\n    }, [isScrollAtStart, isScrollAtEnd]);\n    return React.createElement(WrappedComponent, _extends({}, props, {\n      scrollReachedProps: {\n        onScroll: onScroll,\n        isScrollAtStart: isScrollAtStart,\n        isScrollAtEnd: isScrollAtEnd\n      },\n      ref: props.forwardedRef\n    }));\n  };\n\n  hoistStatics(ScrollReachedDetector, WrappedComponent);\n  ScrollReachedDetector.displayName = WrappedComponent.displayName;\n  ScrollReachedDetector.propTypes = WrappedComponent.propTypes;\n  ScrollReachedDetector.defaultProps = WrappedComponent.defaultProps;\n  return forwardRef(ScrollReachedDetector);\n}\n\nexport default withScrollReached;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/commons/withScrollReached.js"],"names":["React","useState","useCallback","forwardRef","hoistStatics","Constants","DEFAULT_THRESHOLD","isAndroid","withScrollReached","WrappedComponent","options","ScrollReachedDetector","props","isScrollAtStart","setScrollAtStart","isScrollAtEnd","setScrollAtEnd","onScroll","event","nativeEvent","layoutMeasurement","layoutWidth","width","layoutHeight","height","contentOffset","offsetX","x","offsetY","y","contentSize","contentWidth","contentHeight","horizontal","threshold","layoutSize","offset","isRTL","scrollingWidth","Math","max","closeToStart","closeToEnd","forwardedRef","displayName","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport forwardRef from \"./forwardRef\";\nimport hoistStatics from 'hoist-non-react-statics';\nimport { Constants } from \"../helpers\";\nconst DEFAULT_THRESHOLD = Constants.isAndroid ? 1 : 0;\n/**\n * @description: Add scroll reached which notifies on reaching start \\ end of ScrollView \\ FlatList\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WithScrollReachedScreen.tsx\n * @notes: Send `props.scrollReachedProps.onScroll` to your onScroll and receive via props.scrollReachedProps.isScrollAtStart props.scrollReachedProps.isScrollAtEnd\n */\n\nfunction withScrollReached(WrappedComponent, options = {}) {\n  const ScrollReachedDetector = props => {\n    // The scroll starts at the start, from what I've tested this works fine\n    const [isScrollAtStart, setScrollAtStart] = useState(true);\n    const [isScrollAtEnd, setScrollAtEnd] = useState(false);\n    const onScroll = useCallback(event => {\n      const {\n        nativeEvent: {\n          layoutMeasurement: {\n            width: layoutWidth,\n            height: layoutHeight\n          },\n          contentOffset: {\n            x: offsetX,\n            y: offsetY\n          },\n          contentSize: {\n            width: contentWidth,\n            height: contentHeight\n          }\n        }\n      } = event;\n      const horizontal = options.horizontal;\n      const threshold = options.threshold || DEFAULT_THRESHOLD;\n      const layoutSize = horizontal ? layoutWidth : layoutHeight;\n      let offset = horizontal ? offsetX : offsetY;\n      const contentSize = horizontal ? contentWidth : contentHeight;\n\n      if (horizontal && Constants.isRTL && Constants.isAndroid) {\n        const scrollingWidth = Math.max(0, contentSize - layoutSize);\n        offset = scrollingWidth - offset;\n      }\n\n      const closeToStart = offset <= threshold;\n\n      if (closeToStart !== isScrollAtStart) {\n        setScrollAtStart(closeToStart);\n      }\n\n      const closeToEnd = layoutSize + offset >= contentSize - threshold;\n\n      if (closeToEnd !== isScrollAtEnd) {\n        setScrollAtEnd(closeToEnd);\n      }\n    }, [isScrollAtStart, isScrollAtEnd]);\n    return <WrappedComponent {...props} scrollReachedProps={{\n      onScroll,\n      isScrollAtStart,\n      isScrollAtEnd\n    }} ref={props.forwardedRef} />;\n  };\n\n  hoistStatics(ScrollReachedDetector, WrappedComponent);\n  ScrollReachedDetector.displayName = WrappedComponent.displayName; //@ts-ignore\n\n  ScrollReachedDetector.propTypes = WrappedComponent.propTypes; //@ts-ignore\n\n  ScrollReachedDetector.defaultProps = WrappedComponent.defaultProps;\n  return forwardRef(ScrollReachedDetector);\n}\n\nexport default withScrollReached;"]},"metadata":{},"sourceType":"module"}