{"ast":null,"code":"import _pt from \"prop-types\";\nimport React, { useRef, useEffect, useCallback, useMemo } from 'react';\nimport View from \"../view\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\n\nvar OverlayFadingBackground = function OverlayFadingBackground(_ref) {\n  var testID = _ref.testID,\n      dialogVisibility = _ref.dialogVisibility,\n      modalVisibility = _ref.modalVisibility,\n      overlayBackgroundColor = _ref.overlayBackgroundColor,\n      propsOnFadeDone = _ref.onFadeDone,\n      fadeOut = _ref.fadeOut;\n  var fadeAnimation = useRef(new Animated.Value(0)).current;\n  var isAnimating = useRef(false);\n  var onFadeDone = useCallback(function () {\n    isAnimating.current = false;\n    propsOnFadeDone == null ? void 0 : propsOnFadeDone();\n  }, [propsOnFadeDone]);\n  var animateFading = useCallback(function (toValue) {\n    isAnimating.current = true;\n    Animated.timing(fadeAnimation, {\n      toValue: toValue,\n      duration: 400,\n      useNativeDriver: true\n    }).start(onFadeDone);\n  }, [fadeAnimation, onFadeDone]);\n  useEffect(function () {\n    if (!isAnimating.current && (!dialogVisibility || fadeOut)) {\n      animateFading(0);\n    }\n  }, [dialogVisibility, animateFading, fadeOut]);\n  useEffect(function () {\n    if (modalVisibility) {\n      animateFading(1);\n    }\n  }, [modalVisibility, animateFading]);\n  var style = useMemo(function () {\n    return {\n      opacity: fadeAnimation,\n      backgroundColor: overlayBackgroundColor\n    };\n  }, [overlayBackgroundColor, fadeAnimation]);\n  return React.createElement(View, {\n    testID: testID,\n    absF: true,\n    animated: true,\n    style: style,\n    pointerEvents: \"none\"\n  });\n};\n\nOverlayFadingBackground.propTypes = {\n  testID: _pt.string,\n  dialogVisibility: _pt.bool,\n  modalVisibility: _pt.bool,\n  overlayBackgroundColor: _pt.string,\n  onFadeDone: _pt.func,\n  fadeOut: _pt.bool\n};\nOverlayFadingBackground.displayName = 'IGNORE';\nexport default OverlayFadingBackground;","map":{"version":3,"sources":["C:/Users/ruthe/OneDrive/Área de Trabalho/projetos/xmrwallet/node_modules/react-native-ui-lib/src/components/dialog/OverlayFadingBackground.js"],"names":["_pt","React","useRef","useEffect","useCallback","useMemo","View","OverlayFadingBackground","testID","dialogVisibility","modalVisibility","overlayBackgroundColor","propsOnFadeDone","onFadeDone","fadeOut","fadeAnimation","Animated","Value","current","isAnimating","animateFading","toValue","timing","duration","useNativeDriver","start","style","opacity","backgroundColor","propTypes","string","bool","func","displayName"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,OAAhD,QAA+D,OAA/D;AACA,OAAOC,IAAP;;;AAGA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,OAO1B;AAAA,MANJC,MAMI,QANJA,MAMI;AAAA,MALJC,gBAKI,QALJA,gBAKI;AAAA,MAJJC,eAII,QAJJA,eAII;AAAA,MAHJC,sBAGI,QAHJA,sBAGI;AAAA,MAFQC,eAER,QAFJC,UAEI;AAAA,MADJC,OACI,QADJA,OACI;AACJ,MAAMC,aAAa,GAAGb,MAAM,CAAC,IAAIc,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAApD;AACA,MAAMC,WAAW,GAAGjB,MAAM,CAAC,KAAD,CAA1B;AACA,MAAMW,UAAU,GAAGT,WAAW,CAAC,YAAM;AACnCe,IAAAA,WAAW,CAACD,OAAZ,GAAsB,KAAtB;AACAN,IAAAA,eAAe,QAAf,YAAAA,eAAe;AAChB,GAH6B,EAG3B,CAACA,eAAD,CAH2B,CAA9B;AAIA,MAAMQ,aAAa,GAAGhB,WAAW,CAAC,UAAAiB,OAAO,EAAI;AAC3CF,IAAAA,WAAW,CAACD,OAAZ,GAAsB,IAAtB;AACAF,IAAAA,QAAQ,CAACM,MAAT,CAAgBP,aAAhB,EAA+B;AAC7BM,MAAAA,OAAO,EAAPA,OAD6B;AAE7BE,MAAAA,QAAQ,EAAE,GAFmB;AAG7BC,MAAAA,eAAe,EAAE;AAHY,KAA/B,EAIGC,KAJH,CAISZ,UAJT;AAKD,GAPgC,EAO9B,CAACE,aAAD,EAAgBF,UAAhB,CAP8B,CAAjC;AAQAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACgB,WAAW,CAACD,OAAb,KAAyB,CAACT,gBAAD,IAAqBK,OAA9C,CAAJ,EAA4D;AAC1DM,MAAAA,aAAa,CAAC,CAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACX,gBAAD,EAAmBW,aAAnB,EAAkCN,OAAlC,CAJM,CAAT;AAKAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,eAAJ,EAAqB;AACnBU,MAAAA,aAAa,CAAC,CAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACV,eAAD,EAAkBU,aAAlB,CAJM,CAAT;AAKA,MAAMM,KAAK,GAAGrB,OAAO,CAAC,YAAM;AAC1B,WAAO;AACLsB,MAAAA,OAAO,EAAEZ,aADJ;AAELa,MAAAA,eAAe,EAAEjB;AAFZ,KAAP;AAID,GALoB,EAKlB,CAACA,sBAAD,EAAyBI,aAAzB,CALkB,CAArB;AAMA,SAAO,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAEP,MAAd;AAAsB,IAAA,IAAI,MAA1B;AAA2B,IAAA,QAAQ,MAAnC;AAAoC,IAAA,KAAK,EAAEkB,KAA3C;AAAkD,IAAA,aAAa,EAAC;AAAhE,IAAP;AACD,CAvCD;;AAyCAnB,uBAAuB,CAACsB,SAAxB,GAAoC;AAClCrB,EAAAA,MAAM,EAAER,GAAG,CAAC8B,MADsB;AAElCrB,EAAAA,gBAAgB,EAAET,GAAG,CAAC+B,IAFY;AAGlCrB,EAAAA,eAAe,EAAEV,GAAG,CAAC+B,IAHa;AAIlCpB,EAAAA,sBAAsB,EAAEX,GAAG,CAAC8B,MAJM;AAKlCjB,EAAAA,UAAU,EAAEb,GAAG,CAACgC,IALkB;AAMlClB,EAAAA,OAAO,EAAEd,GAAG,CAAC+B;AANqB,CAApC;AAQAxB,uBAAuB,CAAC0B,WAAxB,GAAsC,QAAtC;AACA,eAAe1B,uBAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useRef, useEffect, useCallback, useMemo } from 'react';\nimport View from \"../view\";\nimport { Animated } from 'react-native';\n\nconst OverlayFadingBackground = ({\n  testID,\n  dialogVisibility,\n  modalVisibility,\n  overlayBackgroundColor,\n  onFadeDone: propsOnFadeDone,\n  fadeOut\n}) => {\n  const fadeAnimation = useRef(new Animated.Value(0)).current;\n  const isAnimating = useRef(false);\n  const onFadeDone = useCallback(() => {\n    isAnimating.current = false;\n    propsOnFadeDone?.();\n  }, [propsOnFadeDone]);\n  const animateFading = useCallback(toValue => {\n    isAnimating.current = true;\n    Animated.timing(fadeAnimation, {\n      toValue,\n      duration: 400,\n      useNativeDriver: true\n    }).start(onFadeDone);\n  }, [fadeAnimation, onFadeDone]);\n  useEffect(() => {\n    if (!isAnimating.current && (!dialogVisibility || fadeOut)) {\n      animateFading(0);\n    }\n  }, [dialogVisibility, animateFading, fadeOut]);\n  useEffect(() => {\n    if (modalVisibility) {\n      animateFading(1);\n    }\n  }, [modalVisibility, animateFading]);\n  const style = useMemo(() => {\n    return {\n      opacity: fadeAnimation,\n      backgroundColor: overlayBackgroundColor\n    };\n  }, [overlayBackgroundColor, fadeAnimation]);\n  return <View testID={testID} absF animated style={style} pointerEvents=\"none\" />;\n};\n\nOverlayFadingBackground.propTypes = {\n  testID: _pt.string,\n  dialogVisibility: _pt.bool,\n  modalVisibility: _pt.bool,\n  overlayBackgroundColor: _pt.string,\n  onFadeDone: _pt.func,\n  fadeOut: _pt.bool\n};\nOverlayFadingBackground.displayName = 'IGNORE';\nexport default OverlayFadingBackground;"]},"metadata":{},"sourceType":"module"}